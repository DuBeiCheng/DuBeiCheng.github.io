<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一建经济公式</title>
      <link href="/2023/11/29/yi-jian-jing-ji-gong-shi/"/>
      <url>/2023/11/29/yi-jian-jing-ji-gong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一建经济公式"><a href="#一建经济公式" class="headerlink" title="一建经济公式"></a>一建经济公式</h1><span id="more"></span><h3 id="第一章——工程经济"><a href="#第一章——工程经济" class="headerlink" title="第一章——工程经济"></a>第一章——工程经济</h3><h4 id="1、利息："><a href="#1、利息：" class="headerlink" title="1、利息："></a>1、利息：</h4><ul><li>影响资金时间价值的因素：<ul><li>资金使用时间（正比）</li><li>资金数量大小（正比）</li><li>资金投入和回收特点；早收晚投</li><li>资金周转速度（正比）</li></ul></li><li>利息越高，投资贷款越少；利息越低，投资贷款越多；</li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231130143653713.png" alt="image-20231130143653713"></p><h4 id="2、利率："><a href="#2、利率：" class="headerlink" title="2、利率："></a>2、利率：</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20231130143756858.png" alt="image-20231130143756858"></p><h4 id="3、单利："><a href="#3、单利：" class="headerlink" title="3、单利："></a>3、单利：</h4><ul><li>利息活期，本金不变</li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231130143823179.png" alt="image-20231130143823179"></p><h4 id="4、复利："><a href="#4、复利：" class="headerlink" title="4、复利："></a>4、复利：</h4><ul><li><p>利息加本金</p></li><li><p>终值——现值关系</p><ul><li><p>已知现值P，求终值F：n次复利，越复越多，P代表过去，F代表未来</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130143850510.png" alt="image-20231130143850510"></p></li><li><p>已知终值F，求现值P：n次折现，越折越少</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130144210037.png" alt="image-20231130144210037"></p></li></ul></li><li><p>年金——终值关系</p><ul><li><p>已知年金求终值</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130144240626.png" alt="image-20231130144240626"></p></li></ul></li><li><p>年金——现值</p><ul><li><p>已知年金求现值</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130144301327.png" alt="image-20231130144301327"></p></li></ul></li></ul><h4 id="5、有效利率"><a href="#5、有效利率" class="headerlink" title="5、有效利率"></a>5、有效利率</h4><ul><li><p>年有效利率</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130144334377.png" alt="image-20231130144334377"></p></li><li><p>其他有效利率</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130144436266.png" alt="image-20231130144436266"></p></li></ul><h4 id="6、经济效果评价"><a href="#6、经济效果评价" class="headerlink" title="6、经济效果评价"></a>6、经济效果评价</h4><ul><li><p>财务可行性和经济合理性分析论证；</p></li><li><p>评价内容包括方案盈利能力、偿债能力、财务生存能力；</p></li><li><p>经营性方案选择盈利能力、偿债能力、财务生存能力；非经营性方案选择财务生产能力；</p></li><li><p>按评价方法分静态分析、动态分析。分析应动静结合，以动态分析为主，静态分析为辅；</p></li><li><p>计算方案：</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130175948441.png" alt="image-20231130175948441"></p></li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231204093935213.png" alt="image-20231204093935213"></p><h4 id="7、投资收益率"><a href="#7、投资收益率" class="headerlink" title="7、投资收益率"></a>7、投资收益率</h4><ul><li>一句话记公式：净利润对资本金，息税前对总投资，谁的蛋对谁的鸡</li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231130174947782.png" alt="image-20231130174947782"></p><ul><li>优劣：<ul><li>优点：简便，直观；适合于各种投资规模。</li><li>缺点：忽略了资金的时间价值；正常年份的选取主观色彩浓厚；适合于方案评价的初期，以及工艺简单，计算期较短的情况。</li></ul></li></ul><h4 id="8、投资回收期"><a href="#8、投资回收期" class="headerlink" title="8、投资回收期"></a>8、投资回收期</h4><ul><li><p>按是否考虑资金时间价值分静态投资回收期和动态投资回收期；宜从技术方案建设开始年算起；</p></li><li><p>静态投资回收期计算步骤：</p><ul><li>先算各年的净现金流量：流入-流出</li><li>再算各年累计净现金流量</li><li>当累计净现金流量=0，对应时间长度为静态投资回收期</li></ul></li><li><p>整数位由负转正，小数位用未回收/净流入；</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231130190503168.png" alt="image-20231130190503168"></p></li><li><p>一句话记公式：净流入抵扣总投资，扣到0为止；</p></li><li><p>优劣：</p><ul><li>优点：简便，易懂；反映资本周转速度；适合更新迅速、资金短缺等；</li><li>缺点：没反应资金回收后情况，没考虑资金时间价值，只能作辅助指标；</li></ul></li></ul><h4 id="9、财务净现值"><a href="#9、财务净现值" class="headerlink" title="9、财务净现值"></a>9、财务净现值</h4><ul><li><p>预定的基准收益率（或设定的折现率）i</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231201101744061.png" alt="image-20231201101744061"></p></li><li><p>公式记忆：每年现金流折现求和</p></li><li><p>判别准则：</p><ul><li>FNPV&gt;0，获得超额收益</li><li>FNPV=0，收益刚好等于基准收益率</li><li>FNPV&lt;0，不可行</li></ul></li><li><p>优劣：</p><ul><li>优点：全面，明确，直观；</li><li>缺点：基准收益率取值困难；不同技术方案需要相同计算期才能通过净现值进行比较；难以反映单位投资的使用效率；不能反映运营期各年的经营成果；不能反映投资回收的速度；</li></ul></li></ul><h4 id="10、财务内部收益率"><a href="#10、财务内部收益率" class="headerlink" title="10、财务内部收益率"></a>10、财务内部收益率</h4><ul><li>公式记忆：同正在其右，同负在其左，正负在中间</li><li>结论：<ul><li>已知 i1&lt;i2<ul><li>当财务净现值FNPV(i1)&gt;0,FNPV(i2)&lt;0，则i1&lt;财务内部收益率FIRR&lt;i2</li><li>当FNPV(i1)&gt;0且FNPV(i2)&gt;0，则i1,i2&lt;FIRR</li><li>当FVPV(i1)&lt;0且FNPV(i2)&lt;0，则i1,i2&gt;FIRR</li></ul></li></ul></li><li>判别：若FNPV大于等于基准收益率(ic)，则技术方案可行，否则，不可行</li></ul><h4 id="11、基准收益率确定（最低标准）"><a href="#11、基准收益率确定（最低标准）" class="headerlink" title="11、基准收益率确定（最低标准）"></a>11、基准收益率确定（最低标准）</h4><ul><li>政府投资项目应根据政府的政策向导确定；</li><li>企业各类技术方案的应选用行业财务基准收益率，并考虑战略、规划、政策、市场等因素自行测定；</li><li>境外投资的技术方案考虑国家风险因素；</li><li>投资者自行测定的基准收益率<ul><li>资金成本（借钱利息）</li><li>机会成本（放弃的收益）</li><li>投资风险</li><li>通货膨胀</li></ul></li></ul><h4 id="12、偿债能力"><a href="#12、偿债能力" class="headerlink" title="12、偿债能力"></a>12、偿债能力</h4><ul><li><p>偿债资金来源：</p><ul><li>可用于归还贷款的利润</li><li>固定资产折旧</li><li>无形资产摊销</li><li>其他资产摊销费</li><li>其他还款资金（减免的税金）</li></ul></li><li><p>偿债能力指标：</p><ul><li>借款偿还期</li><li>利息背付率</li><li>偿债备付率</li><li>资产负债率</li><li>流动比率</li><li>速动比率</li></ul></li><li><p>利息备付率：可用于支付利息的息税前利润与当年应付利息的比值</p><ul><li>判别准则：应该大于1，一般不宜低于2;</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231204152530902.png" alt="image-20231204152530902"></li></ul></li><li><p>偿债备付率：可用于还本付息的资金与当期应还本付息金额的比值</p><ul><li>判别准则：大于1；不宜低于1.3；</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231204153146737.png" alt="image-20231204153146737"></li></ul></li></ul><h4 id="13、盈亏平衡分析"><a href="#13、盈亏平衡分析" class="headerlink" title="13、盈亏平衡分析"></a>13、盈亏平衡分析</h4><table><thead><tr><th>固定成本</th><th>如：工资及福利费（计件工资除外）、折旧费、修理费、无形资产及其他资产摊销费，其他费用等</th></tr></thead><tbody><tr><td>可变成本</td><td>如：原材料、燃料、动力费、包装费和计件工资</td></tr><tr><td>半可变（半固定）成本</td><td>如：与生产批量有关的某些消耗性材料费用，工模具费及运输费</td></tr></tbody></table><ul><li><p>盈亏平衡点计算：</p><ul><li>利润=销售收入-总成本</li><li>销售收入=价格x产销量-单位产品所交税金及附件x产销量</li><li>总成本=固定成本+单位产品可变成本x产销量</li><li>利润=价格x产销量-单位产品所交税金及附加x产销量-固定成本-单位产品可变成本x产销量（利润=价x量-单税x量-固-单可变x量）</li></ul></li><li><p>“盈亏平衡”即利润为0，利润=销售收入-总成本=0</p></li><li><p>一句记公式：平衡就是收支相等，收入需要扣税金，成本固定和可变</p></li><li><p>变形公式：</p><ul><li>盈亏平衡点产量<ul><li>达到盈亏平衡点时的产量越低，表明技术方案投产后盈利可能越大，适用市场能力越强，抗风险能力越强</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231205090632657.png" alt="image-20231205090632657"></li></ul></li><li>盈亏平衡点价格<ul><li>用价格和可变成本表示盈亏平衡点，是假设产量达到设计产量<ul><li><img src="/imgs/$%7Bfiilename%7D/image-20231205091051894.png" alt="image-20231205091051894"></li></ul></li><li>用可变成本表示盈亏平衡点<ul><li><img src="/imgs/$%7Bfiilename%7D/image-20231205091435798.png" alt="image-20231205091435798"></li></ul></li></ul></li><li>生产能力利用率<ul><li><img src="/imgs/$%7Bfiilename%7D/image-20231205091603616.png" alt="image-20231205091603616"></li></ul></li></ul></li><li><p>结果判别：</p><ul><li>盈亏平衡点反映了技术方案对市场变化的适应能力和抗风险能力。盈亏平衡点越低，抗风险能力越强；</li><li>若生产能力利用率的盈亏平衡点≤70%，则技术方案的运营是安全的，或者说技术方案可以承受比较大的风险；</li></ul></li></ul><h4 id="14、敏感性分析"><a href="#14、敏感性分析" class="headerlink" title="14、敏感性分析"></a>14、敏感性分析</h4><ul><li><p>敏感性分析步骤：</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205103629451.png" alt="image-20231205103629451"></p></li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231205103852772.png" alt="image-20231205103852772"></p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205104758633.png" alt="image-20231205104758633"></p><ul><li>临界点<ul><li>临界点指技术方案允许不确定因素向不利方向变化的极限值，超过极限值，技术方案的经济效果指标不可行</li><li>临界点的高低与设定的指标判断标准有关；如财务内部收益率的判断标准为基准收益率，则不确定性因素变化的临界点是财务内部收益率等于基准收益率；</li><li>对于同一个技术方案，设定基准收益率提高，临界点就会变低（即临界点表示的不确定因素的极限变化变小）</li><li>利用临界点判别敏感因素的方法是一种绝对测定法，技术方案能否接受的判据是各经济效果评价指标能否达到临界值</li><li>临界点越低，说明该因素对技术方案经济效果指标影响越大，技术方案对该因素就越敏感；</li></ul></li><li>选择方案：<ul><li>应选择敏感程度小、抗风险能力强、可靠性大的方案；</li></ul></li></ul><h4 id="15、现金流量表"><a href="#15、现金流量表" class="headerlink" title="15、现金流量表"></a>15、现金流量表</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20231205150214709.png" alt="image-20231205150214709"></p><ul><li><p>一句话记公式：经营成本人材机他，或总成本减折摊利</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205152204625.png" alt="image-20231205152204625"></p></li></ul><h4 id="16、设备磨损和补偿"><a href="#16、设备磨损和补偿" class="headerlink" title="16、设备磨损和补偿"></a>16、设备磨损和补偿</h4><ul><li>设备磨损：</li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231205154314765.png" alt="image-20231205154314765"></p><ul><li><p>设备补偿：</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205154455313.png" alt="image-20231205154455313"></p></li></ul><h4 id="17、设备更新方案比选"><a href="#17、设备更新方案比选" class="headerlink" title="17、设备更新方案比选"></a>17、设备更新方案比选</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20231205160706884.png" alt="image-20231205160706884"></p><h4 id="18、设备寿命"><a href="#18、设备寿命" class="headerlink" title="18、设备寿命"></a>18、设备寿命</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20231205161908420.png" alt="image-20231205161908420"></p><h4 id="19、设备租赁"><a href="#19、设备租赁" class="headerlink" title="19、设备租赁"></a>19、设备租赁</h4><ul><li><p>设备租赁概念</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205164146647.png" alt="image-20231205164146647"></p></li><li><p>租赁费用</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205165117198.png" alt="image-20231205165117198"></p></li><li><p>租金计算</p><ul><li><p>附加率法：</p></li><li><p>一句话记公式：租金为年买价加利息利润</p><p><img src="/imgs/$%7Bfiilename%7D/image-20231205181115211.png" alt="image-20231205181115211"></p></li><li><p>年金法：将一项租赁资产价值按动态等额分摊到未来各租赁期间内的租金计算方法</p></li></ul></li></ul><h4 id="20、价值工程"><a href="#20、价值工程" class="headerlink" title="20、价值工程"></a>20、价值工程</h4><ul><li><p>价值工程定义</p><ul><li>以提高产品（或作业）价值和有效利用资源为目的，通过有组织的创造性工作，寻求用最低的寿命周期成本，可靠地实现适用者所需功能，以获得最佳的综合效益的一种管理技术。</li><li>价值工程不是实体工程，价值既不是使用价值也不是交换价值，而是比较价值；</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231206101925799.png" alt="image-20231206101925799"></li><li>价值工程的核心，是对产品进行功能分析；价值工程将产品价值、功能和成本作为一个整体同时考虑。价值工程强调不断改革和创新。价值工程要求将功能定量化。</li><li>价值工程是以集体的智慧开展的有计划、有组织的管理活动；</li></ul></li><li><p>价值工程特点</p><ul><li>以最低的寿命周期成本，使产品具备它所必须具备的功能；产品的寿命周期成本包括产品生产成本（指发生在生产企业内部的成本，也指用户购买产品的费用）和产品使用及维护成本（指用户在使用过程中支付的各种费用的总和），如图：</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231206102802832.png" alt="image-20231206102802832"></li><li>价值工程的核心，是对产品进行功能分析；</li><li>价值工程将产品价值、功能和成本作为一个整体同时来考虑；</li><li>价值工程强调不断改革和创新；</li><li>价值工程要求将功能定量化；将功能转化为能够与成本直接相比的量化值；</li><li>价值工程是以集体智慧开展的有计划、有组织有领导的管理活动；</li></ul></li><li><p>提高价值工程途径</p><ul><li>基于价值工程的基本原理（公式V=F/C），提高价值工程的途径，即两数相除，如何让结果变大，工5个；</li><li><img src="/imgs/$%7Bfiilename%7D/image-20231206103503226.png" alt="image-20231206103503226"></li><li>对于建设工程，应用价值工程的重点是在规划和设计阶段；</li></ul></li></ul><h4 id="21、价值工程的工作程序和分类"><a href="#21、价值工程的工作程序和分类" class="headerlink" title="21、价值工程的工作程序和分类"></a>21、价值工程的工作程序和分类</h4><ul><li><p>价值工程的工作程序</p><ul><li><img src="/imgs/$%7Bfiilename%7D/image-20231206105243669.png" alt="image-20231206105243669"></li></ul></li><li><p>价值工程的功能分类</p></li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20231206110606161.png" alt="image-20231206110606161"></p><h4 id="22、价值系数计算"><a href="#22、价值系数计算" class="headerlink" title="22、价值系数计算"></a>22、价值系数计算</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20231206112139326.png" alt="image-20231206112139326"></p><p><img src="/imgs/$%7Bfiilename%7D/image-20231206112210036.png" alt="image-20231206112210036"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 一建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL函数</title>
      <link href="/2023/09/11/excel-han-shu/"/>
      <url>/2023/09/11/excel-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="EXCEL函数"><a href="#EXCEL函数" class="headerlink" title="EXCEL函数"></a>EXCEL函数</h1><span id="more"></span><h2 id="一、清洗类函数"><a href="#一、清洗类函数" class="headerlink" title="一、清洗类函数"></a>一、清洗类函数</h2><p><strong>1、left()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=left(text,[num_chars])</td><td>【文本单元格，字符串长度】；=left(D3,3)</td></tr></tbody></table><p>解释：left函数是一个字符串函数，它返回具有指定长度的字符串的左边部分。</p><p><strong>2、right()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=right(text,[num_chars])</td><td>【文本单元格，字符串长度】；=right(D3,3)</td></tr></tbody></table><p>解释：right函数是一个字符串函数，它返回具有指定长度的字符串的右边部分。</p><p><strong>3、mid（）</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=mid(text,start_num,num_chars)</td><td>【文本单元格，起始位置，字符串长度】；=mid(D3,3,3)</td></tr></tbody></table><p>解释：从指定位置开始，提取用户指定的字符串。</p><p><strong>4、len()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=len(text)</td><td>【返回字符个数】；=len(D3)</td></tr></tbody></table><p>解释：返回文本字符串中的字符个数。</p><p><strong>5、lenb()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=lenb(text)</td><td>【返回字符个数（中文为双字节）】；=lenb(D3)</td></tr></tbody></table><p>解释：lenb函数返回字符串长度，与len函数不同的是lenb双字节字符会返回2，而单字节返回1。</p><p><strong>6、concatenate()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=concatenate(text1,text2,text3,…)</td><td>【单元格1，单元格2，单元格3，…（合并字符串）】；=concatenate(D3,D4,D5,…)</td></tr></tbody></table><p>解释：将多个字符文本或单元格中的数据连接在一起，显示在一个单元格中。</p><p><strong>7、text()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=text(value,format_text)</td><td>【必须为数值，设备value格式】；=text(D3,”0.00”) ,=text(D3,YYYY年M月D日)</td></tr></tbody></table><p>解释：按照指定格式将数值转成文本。</p><p><strong>8、trim()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=trim(text)</td><td>【清楚左右两边空格】；=trim(D3)</td></tr></tbody></table><p>解释：把单元格内容前后的空格去掉，但并不去除字符之间的空格。</p><p><strong>9、replace()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=replace(old_text,start_num,num_chars,new_text)</td><td>【需要被替换字符串，替换起始位置，替换几个字符串，替换内容】；=replace(D3,3,3,”好样的”)</td></tr></tbody></table><p>解释：将一个字符串中的部分字符用另外一个字符串代替。</p><p><strong>10、substitute()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=substitute(text,old_text,new_text,[instance_num])</td><td>【单元格，需要被替换的数据，替换的新数据，[重复数据替换第几个]】；=substitute(D3,”数据哇”,”我爱你”),=substitute(D3,”数据哇”,”我爱你”,3)</td></tr></tbody></table><p>解释：对指定的字符串进行替换；</p><p><strong>11、find()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=find(find_text,within_text,[start_num])</td><td>【要查找的字符串””，要在哪个单元格查找，[起始位置]】；=find(“A”,D3,2)</td></tr></tbody></table><p>解释：查找一个字符串在另一个字符串的位置，区分大小写。</p><p><strong>12、search()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=search(find_text,within_text,[start_num])</td><td>【要查找的字符串””，要在哪个单元格查找，[起始位置]】; =search(“A”,D3,2)</td></tr></tbody></table><p>解释：查找一个字符串在另一个字符串的位置，不区分大小写。</p><h2 id="二、时间类函数"><a href="#二、时间类函数" class="headerlink" title="二、时间类函数"></a>二、时间类函数</h2><p><strong>1、today()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=today()</td><td>【返回当前日期】；=today()+10</td></tr></tbody></table><p>解释：返回当前日期。</p><p><strong>2、date()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=date(year,month,day)</td><td>【年，月，日】；=date(2021,12,7)</td></tr></tbody></table><p>解释：返回表示特定日期的连续序列号。</p><p><strong>3、eomonth()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=eomonth(start_date,months)</td><td>【选中的日期，-1/0/1】-1：上个月，0：当月，1：下月； =eomonth(D3,0)</td></tr></tbody></table><p>解释：返回某个月份的最后一天。</p><p><strong>4、year()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=year(serial_number)</td><td>【选中的日期】；=year(D3)</td></tr></tbody></table><p>解释：提取日期的年份。</p><p><strong>5、month()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=month(serial_number)</td><td>【选中的日期】；=month(D3)</td></tr></tbody></table><p>解释：提取日期的月份。</p><p><strong>6、day()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=day(serial_number)</td><td>【选中的日期】；=day(D3)</td></tr></tbody></table><p>解释：提取日期的天。</p><p><strong>7、weekday()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=weekday(serial_number,[return_type])</td><td>【选中的日期，返回值类型的数字】1：1（星期日）到7（星期六），2：1（星期一）到7（星期日）；=weekday(D3,2)</td></tr></tbody></table><p>解释：提取返回某日期的星期数。在默认情况下，它的值为1（星期日）到7（星期六）之间的一个整数。</p><p><strong>8、weeknum()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=weeknum(serial_num,[return_type])</td><td>【选中的日期，返回值类型的数字】1：一周的第一天为星期日，2：一周的第一天为星期一；=weeknum(D3,2)</td></tr></tbody></table><p>解释：用于返回指定日期是一年中第几个星期的数字。</p><h2 id="三、逻辑类函数"><a href="#三、逻辑类函数" class="headerlink" title="三、逻辑类函数"></a>三、逻辑类函数</h2><p><strong>1、if()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=if(logical_test,[value_if_true],[value_if_false])</td><td>【条件表达式，如果真返回””，如果返回””】；=if(D3&gt;10,1,0)</td></tr></tbody></table><p>解释：如果为真时则返回一个值，如果为假则返回另一个值。</p><p><strong>2、and()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=and(logical1,[logical2],[…])</td><td>【条件表达式1，[条件表达式2]，[…]】；=and(D3&gt;1,D3&lt;10)</td></tr></tbody></table><p>解释：如果条件都为真，则返回true，否则返回false。</p><p><strong>3、or()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=or(logical1,[logical2],[…])</td><td>【条件表达式1，[条件表达式2]，[…]】；=or(D3&gt;1,D3&lt;10)</td></tr></tbody></table><p>解释：如果有一个条件为真，则返回true，若全部为假时，则返回false。</p><p><strong>4、iserror()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=iserror(value)</td><td>【要测试的内容】；=iserror(D3/E3)</td></tr></tbody></table><p>解释：用于测试函数式返回的数值是否错误。如果错误，该函数返回TRUE，反之返回FALSE。</p><p><strong>5、iferror()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=iferror(value,value_if_error)</td><td>【要测试的内容，如果错返回内容””】；=iferror(D3/E3,”error”)</td></tr></tbody></table><p>解释：用于用来判断某些内容的 正确与否，正确则返回正确的结果，错误则返回需要显示的信息。</p><p><strong>6、true()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=true()</td><td>【不需要参数】；=true()</td></tr></tbody></table><p>解释：返回逻辑值TRUE。</p><p><strong>7、false()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=false()</td><td>【不需要参数】；=false()</td></tr></tbody></table><p>解释：返回逻辑值FALSE。</p><h2 id="四、关联匹配类函数"><a href="#四、关联匹配类函数" class="headerlink" title="四、关联匹配类函数"></a>四、关联匹配类函数</h2><p><strong>1、vlookup()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=vlookup(lookup_value,table_array,col_index_num,[range_lookup])</td><td>【要匹配查找的内容某一单元格，去匹配查找的数组区域（匹配列在首行），返回的内容所在列数（首行为1），[0精确匹配1近似匹配]】；=vlookup(D3,H6:I9,2,0)</td></tr></tbody></table><p>解释：vlookup函数的作用为在表格的首列查找指定的数据，并返回指定的数据所在行中的指定列处的数据。</p><p><strong>2、Hlookup()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=hlookup(lookup_value,table_array,col_index_num,[range_lookup])</td><td>【要匹配查找的内容某一单元格，去匹配查找的数据区域（匹配行在首行），返回内容所在列数（首行为1），0精确匹配1近似匹配】；=hlookup(D3,A3:H3,2,0)</td></tr></tbody></table><p>解释：hlookup函数可以在表格或数值数组的首行查找指定的数值，并返回表格或数组中指定行的同一列的数值。</p><p><strong>3、lookup()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=lookup(lookup_value,lookup_vector,[result_vector])</td><td>【要匹配查找的内容，去匹配查找的数组区域，返回的内容】；=lookup(1800,D3:D9,E3,E9)，查找工资为1800的员工姓名</td></tr></tbody></table><p>解释：lookup函数是EXCEL中的一种运算函数，实质是返回向量或数组中的值，要求数值必须按升序排序。</p><p><strong>4、index()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=index(array,row_num,[column_num])</td><td>【选定的内容区域，行（列数）以内容区域左上角为起点，列数（可选）】；=index(D3:F6,2,3),返回第2行第3列交叉的值</td></tr></tbody></table><p>解释：index函数是返回表或区域中的值或值的引用，以行列数返回对应的内容。</p><p><strong>5、match()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=match(lookup_value,lookup_array,[match_type])</td><td>【要查找的内容单元格，要在其查找区域（行列），[1小于或等于lookup_valued 的最大值0等于lookup_value的第一个值-1大于或等于lookup_value的最小值]】；=match(1900,D3:D10,1),查看小于1900工资的最大值的位置</td></tr></tbody></table><p>解释：返回指定数值在指定数组区域中的位置。</p><p><strong>6、offset()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=offset(reference,rows,cols,[height],[width])</td><td>【起点，上下偏移行数（向下为正，向上为负），左右偏移列数（向右为正，向左为负），[可选-引用区域行数（含到达点）],[可选-引用区域列数（含到达点）]】；=offset(E8,0,0)，返回E8不偏移值</td></tr></tbody></table><p>解释：offset函数以指定的（单元格或相连单元格区域的引用）为参照系，通过给定偏移量得到新的引用。</p><p><strong>7、row()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=row([reference])</td><td>【引用的单元格】；=row(D3)，查看指定单元格所在行</td></tr></tbody></table><p>解释：获取行号的函数。</p><p><strong>8、column()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=column([reference])</td><td>【引用的单元格】；=column()，查看当前单元格所在列</td></tr></tbody></table><p>解释：获取列号的函数。</p><h2 id="五、计算统计类函数"><a href="#五、计算统计类函数" class="headerlink" title="五、计算统计类函数"></a>五、计算统计类函数</h2><p><strong>1、count()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=count(value1,[value2],…)</td><td>【范围1，范围2，…】；=count(D3:D15)</td></tr></tbody></table><p>解释：count函数对给定数据集合或者单元格中数据的个数进行计数。</p><p><strong>2、counta()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=counta(value1,[value2],…)</td><td>【范围1，范围2，…】；=counta(D3:D15)，单元格里共有多少个数字</td></tr></tbody></table><p>解释：counta函数计算区域中不为空的单元格的个数。</p><p><strong>3、countif()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=countif(range,criteria)</td><td>【范围区域，某一条件】；=countif(D3:D15,”&gt;200”)，大于200的数值有多少个</td></tr></tbody></table><p>解释：countif函数在指定区域中按指定条件对单元格进行计数（单条件计数）。</p><p><strong>4、countblank()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=countblank(range)</td><td>【范围】；=countblank(D3:D15)，计算所选范围内有多少个空值</td></tr></tbody></table><p>解释：countblank函数统计指定区域内空白单元格个数。</p><p><strong>5、countifs()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=countifs(criteria_range1,criteria1,criteria_range2,criteria2),…</td><td>【范围区域1，某一条件1，范围区域2，某一条件2，…】；=countifs(D3:D10,”dubeicheng”,E3:E10,”&gt;200”)，统计姓名为“dubeicheng”且花费大于200的人数</td></tr></tbody></table><p>解释：countifs函数统计多个区域中满足给定条件的单元格的个数。</p><p><strong>6、sum()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=sum(range)</td><td>【范围】；=sum(D3:D10)</td></tr></tbody></table><p>解释：sum函数统计指定区域的数值进行求和。</p><p><strong>7、sumif()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=sumif(range,criteria,[sum_range])</td><td>【范围，条件，[实际求和范围]】；=sumif(D3:D10,”dubeicheng”,E3:E10)，姓名为“dubeicheng”总工花了多少钱</td></tr></tbody></table><p>解释：sumif函数对指定条件的值求和。</p><p><strong>8、sumifs()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=sumifs(sum_range,criteria_range1,criteria1,…)</td><td>【实际求和范围，范围1，条件1，…】；=sumifs(D3:D10,D3:D10,”&gt;100”,D3:D10,”&lt;210”)，统计大于100小于210的数的和</td></tr></tbody></table><p>解释：sumifs函数统计多个区域中满足给定条件数据之和（单字段多条件求和）。</p><p><strong>9、sumproduct()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=sumproduct(array1*,[array2]<em>,[array3]</em>,…)</td><td>【条件数组1，[条件数组2]，[条件数组3]，…】；=sumproduct(D3:D6,E3:E6)，计算销售额，单价*数量的和</td></tr></tbody></table><p>解释：sumproduct函数是在给定的几组数组中，将数组间对应的元素相乘，并返回乘积之和。</p><p><strong>10、max()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=max(number1,[number2],…)</td><td>=max(D3:D10)，查找所选区域最大值</td></tr></tbody></table><p>解释：max函数返回一组中的最大值。</p><p><strong>11、min()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=min(number1,[number2],…)</td><td>=min(D3:D10)，查找所选区域最小值</td></tr></tbody></table><p>解释：min函数返回一组中的最小值。</p><p><strong>12、average()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=average(value1,[value2],…)</td><td>【值1，值2，…】；=average(D3:D10)，查找所选区域平均值</td></tr></tbody></table><p>解释：average返回所选区域的平均值。</p><p><strong>13、mod()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=mod(number,divisor)</td><td>【被除数，除数】；=mod(9,3)，9能否被3整除</td></tr></tbody></table><p>解释：mod函数得出不能被整除的数，能被整除返回0，不能被整除返回余数。</p><p><strong>14、rank()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=rank(number,ref,[order])</td><td>【需要计算排位数字，在某个区域，[]】；=rank(D3,D1:d10)，查看某数据单价排名多少</td></tr></tbody></table><p>解释：rank函数返回一列数字的数字排位。</p><p><strong>15、round()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=round(number,num_digits)</td><td>【数值，小数点后位数】；=round(D3,2)，保留2位小数</td></tr></tbody></table><p>解释：round函数返回一个数值，该数值是按照指定的小数位数进行四舍五入运算的结果。</p><p><strong>16、floor()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=floor(number,significance)</td><td>【数值，向下取舍】;=floor(3,6,2)，将3，6向下取舍，使其等于2的倍数</td></tr></tbody></table><p>解释：floor函数将数字向下取舍入到最近接近的指定基数的倍数，如果number为正数，significance为负数，则函数返回错误值#NUM！。</p><p><strong>17、rand()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=rand()，不需要参数</td><td>=rand()，返回0-1之间的随机数</td></tr></tbody></table><p>解释：rand函数返回0-1之间的随机数。</p><p><strong>18、int()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=int(number)</td><td>【整数】；=int(D3)</td></tr></tbody></table><p>解释：int函数将单元格内数值向下取整。</p><p><strong>19、randbetween()</strong></p><table><thead><tr><th>使用：</th><th>解释：</th></tr></thead><tbody><tr><td>=randbetween(bottom,top)</td><td>【返回bottom~top之间的随机数】;=randbetween(100,200)，返回100-200之间随机的一个数</td></tr></tbody></table><p>解释：randbetween函数返回大于等于指定的最小值，小于指定最大值之间的一个随机整数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL快捷键大全</title>
      <link href="/2023/09/06/excel-kuai-jie-jian/"/>
      <url>/2023/09/06/excel-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Excel-快捷键"><a href="#Excel-快捷键" class="headerlink" title="Excel 快捷键"></a>Excel 快捷键</h1><span id="more"></span><h2 id="一、CTRL快捷键"><a href="#一、CTRL快捷键" class="headerlink" title="一、CTRL快捷键"></a>一、CTRL快捷键</h2><p>1、隐藏列——CTRL+0</p><p><strong>2、设置单元格格式——CTRL+1</strong></p><p>3、添加或取消字体加粗——CTRL+2</p><p>4、添加或取下字体倾斜——CTRL+3</p><p>5、添加或取消下划线——CTRL+4</p><p>6、添加或取消删除线——CTRL+5</p><p>7、隐藏或显示图形——CTRL+6</p><p>8、隐藏工具栏——CTRL+7</p><p>9、隐藏或显示大纲符号——CTRL+8</p><p>10、隐藏行——CTRL+9</p><p><strong>11、全选表格——CTRL+A</strong></p><p>12、字体加粗——CTRL+B</p><p><strong>13、复制内容——CTRL+C</strong></p><p><strong>14、向下填充——CTRL+D</strong></p><p><strong>15、智能填充——CTRL+E</strong></p><p><strong>16、查找——CTRL+F</strong></p><p><strong>17、定位——CTRL+G</strong></p><p><strong>18、替换——CTRL+H</strong></p><p>19、斜字体——CTRL+I</p><p>20、换行符——CTRL+J</p><p><strong>21、超链接——CTRL+K</strong></p><p>22、创建智能表——CTRL+L</p><p>23、左缩进——CTRL+M</p><p><strong>24、新建表——CTRL+N</strong></p><p>25、打开——CTRL+O</p><p><strong>26、打印——CTRL+P</strong></p><p>27、快速分析——CTRL+Q</p><p><strong>28、向右填充——CTRL+R</strong></p><p><strong>29、保存文件——CTRL+S</strong></p><p><strong>30、超级表格转换——CTRL+T</strong></p><p>31、下划线——CTRL+U</p><p><strong>32、粘贴——CTRL+V</strong></p><p>33、关闭文件——CTRL+W</p><p>34、剪切——CTRL+X</p><p><strong>35、恢复上一步——CTRL+Y</strong></p><p><strong>36、撤销——CTRL+Z</strong></p><p>37、隐藏或显示功能区——CTRL+F1</p><p>38、打印——CTRL+F2</p><p>39、名称管理器——CTRL+F3</p><p>40、保存并关闭文件——CTRL+F4</p><p>41、还原窗口——CTRL+F5</p><p>42、切换窗口——CTRL+F6</p><p>43、移动窗口——CTRL+F7</p><p>44、调整窗口大小——CTRL+F8</p><p>45、最小化窗口——CTRL+F9</p><p>46、最大化窗口——CTRL+F10</p><p>47、新建宏表——CTRL+F11</p><p>48、打开文件——CTRL+F12</p><p>49、删除行——CTRL+-</p><p>50、显示当前日期——CTRL+;</p><p>51、移动到数据区域最后一行——CTRL+⬇</p><p>52、已到到数据区域最后一列——CTRL+➡</p><p><strong>53、批量填充——CTRL+ENTER</strong></p><h2 id="二、ALT快捷键"><a href="#二、ALT快捷键" class="headerlink" title="二、ALT快捷键"></a>二、ALT快捷键</h2><p><strong>1、截图/打开数据选项卡——ALT+A</strong></p><p>2、打开文件选项卡——ALT+F</p><p>3、打开主页选项卡——ALT+H</p><p>4、打开公式选项卡——ALT+M</p><p>5、打开插入选项卡——ALT+N</p><p>6、打开页面布局——ALT+P</p><p>7、操作说明搜索框——ALT+Q</p><p>8、打开审阅选项卡——ALT+R</p><p>9、打开视图选项卡——ALT+W</p><p><strong>10、强制换行——ALT+ENTER</strong></p><p><strong>11、一秒数据求和——ALT+=</strong></p><p>12、关闭EXCEL——ALT+F4</p><h2 id="三、SHIFT快捷键"><a href="#三、SHIFT快捷键" class="headerlink" title="三、SHIFT快捷键"></a>三、SHIFT快捷键</h2><p><strong>1、插入批注——SHIFT+F2</strong></p><p><strong>2、插入函数——SHIFT+F3</strong></p><p>3、查找空单元格——SHIFT+F4</p><p>4、弹出查找对话框——SHIFT+F5</p><p>5、选择不相邻的区域——SHIFT+F8</p><p>6、插入新工作表——SHIFT+F11</p><h2 id="四、组合快捷键"><a href="#四、组合快捷键" class="headerlink" title="四、组合快捷键"></a>四、组合快捷键</h2><p>1、取消隐藏列——CTRL+SHIFT+0</p><p><strong>2、设置为数值格式——CTRL+SHIFT+1</strong></p><p><strong>3、设置为时间格式——CTRL+SHIFT+2</strong></p><p><strong>4、设置为日期格式——CTRL+SHIFT+3</strong></p><p><strong>5、设置为货币格式——CTRL+SHIFT+4</strong></p><p><strong>6、输入当前时间——CTRL+SHIFT+;</strong></p><p><strong>7、设置为百分比格式——CTRL+SHIFT+5</strong></p><p><strong>8、设置为科学计数格式——CTRL+SHIFT+6</strong></p><p><strong>9、快速添加外边框——CTRL+SHIFT+7</strong></p><p>10、选定已使用的区域——CTRL+SHIFT+8</p><p>11、取消隐藏行——CTRL+SHIFT+9</p><p><strong>12、快速删除边框——CTRL+SHIFT+-</strong></p><p>13、百分比格式——CTRL+SHIFT+%</p><p><strong>14、复制格式——SHIFT+CTRL+C</strong></p><p><strong>15、粘贴格式——SHIFT+CTRL+V</strong></p><p><strong>16、选择性粘贴——ALT+E+S</strong></p><p><strong>17、选中当前的位置到最后一行——CTRL+SHIFT+⬇</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> EXCEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/29/hello-world/"/>
      <url>/2022/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello-World"></a>Hello-World</h1><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/06/24/jvm-xu-ni-ji/"/>
      <url>/2022/06/24/jvm-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><span id="more"></span><h2 id="一、执行引擎"><a href="#一、执行引擎" class="headerlink" title="一、执行引擎"></a>一、执行引擎</h2><h3 id="1-机器码"><a href="#1-机器码" class="headerlink" title="1.机器码"></a>1.机器码</h3><ul><li>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它编写程序，这就是机器语言。</li><li>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</li><li>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</li><li>机器指令与CPU密切相关，所以不同种类的CPU所对应的机器指令也就不同。</li></ul><h3 id="2-指令"><a href="#2-指令" class="headerlink" title="2.指令"></a>2.指令</h3><ul><li>由于机器码是由0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</li><li>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov、inc等），可读性稍好。</li><li>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</li></ul><h3 id="3-指令集"><a href="#3-指令集" class="headerlink" title="3.指令集"></a>3.指令集</h3><ul><li>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。</li><li>如常见的<ul><li>x86指令集，对应的是x86架构的平台。</li><li>ARM指令集，对应的是ARM架构平台。</li></ul></li></ul><h3 id="4-汇编语言"><a href="#4-汇编语言" class="headerlink" title="4.汇编语言"></a>4.汇编语言</h3><ul><li>由于指令的可读性还是太差，于是人们有发明了汇编语言。</li><li>在汇编语言中，用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。</li><li>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。<ul><li>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</li></ul></li></ul><h3 id="5-高级语言"><a href="#5-高级语言" class="headerlink" title="5.高级语言"></a>5.高级语言</h3><ul><li>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言。</li><li>当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</li></ul><h3 id="6-C、C-源程序执行过程："><a href="#6-C、C-源程序执行过程：" class="headerlink" title="6.C、C++ 源程序执行过程："></a>6.C、C++ 源程序执行过程：</h3><ul><li>编译过程有可以分成两个阶段：编译和汇编。<ul><li>编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编语言。</li><li>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</li></ul></li></ul><h3 id="7-字节码"><a href="#7-字节码" class="headerlink" title="7.字节码"></a>7.字节码</h3><ul><li>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码。</li><li>字节码只要为了实现特定软件运行和软件环境、与硬件环境无关。</li><li>字节码的实现方式是通过编译器和虚拟机。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。<ul><li>字节码的典型应用为Java bytecode。</li></ul></li></ul><p><img src="/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220624175315049.png" alt="image-20220624175315049"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="二、类加载子系统"><a href="#二、类加载子系统" class="headerlink" title="二、类加载子系统"></a>二、类加载子系统</h2><h3 id="1-获取ClassLoader途径："><a href="#1-获取ClassLoader途径：" class="headerlink" title="1.获取ClassLoader途径："></a>1.获取ClassLoader途径：</h3><ul><li>方式一：获取当前类的ClassLoader<ul><li>Class.getClassLoader();</li></ul></li><li>方式二：获取当前线程上下文的ClassLoader<ul><li>Thread.currentThread().getContextClassLoader();</li></ul></li><li>方式三：获取系统的ClassLoader<ul><li>ClassLoader.getSystemClassLoader();</li></ul></li><li>方式四：获取调用者的ClassLoader<ul><li>DriverManager.getCallerClassLoader();</li></ul></li></ul><h3 id="2-双亲委派机制"><a href="#2-双亲委派机制" class="headerlink" title="2.双亲委派机制"></a>2.双亲委派机制</h3><h4 id="（1）概念："><a href="#（1）概念：" class="headerlink" title="（1）概念："></a>（1）概念：</h4><ul><li>Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时，才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即请求交由父类处理，它是一种任务委派模式。</li></ul><h4 id="（2）双亲委派机制工作原理"><a href="#（2）双亲委派机制工作原理" class="headerlink" title="（2）双亲委派机制工作原理"></a>（2）双亲委派机制工作原理</h4><ul><li>如果一个类加载器收到类加载请求，它并不会自己先去加载，而是把这个亲求委托给父类加载器去执行。</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器。</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li></ul><h4 id="（3）双亲委派机制优势"><a href="#（3）双亲委派机制优势" class="headerlink" title="（3）双亲委派机制优势"></a>（3）双亲委派机制优势</h4><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改<ul><li>自定义类：java.lang.String</li><li>自定义类：java.lang.ShkStart</li></ul></li><li>java.lang.SecurityException:Prohibited package name: java.lang</li></ul><h4 id="4-沙箱安全机制："><a href="#4-沙箱安全机制：" class="headerlink" title="(4) 沙箱安全机制："></a>(4) 沙箱安全机制：</h4><ul><li>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器进行加载，而引导类加载器在加载的过程中会先加载JDK自带的文件（rt.jar包中java\lang\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</li></ul><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h4><h4 id="（1）在JVM中表示两个class对象是否为同一个类存在两个必要条件："><a href="#（1）在JVM中表示两个class对象是否为同一个类存在两个必要条件：" class="headerlink" title="（1）在JVM中表示两个class对象是否为同一个类存在两个必要条件："></a>（1）在JVM中表示两个class对象是否为同一个类存在两个必要条件：</h4><ul><li>类的完整类名必须一致，包括包名。</li><li>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</li><li>换句话说，在JVM中，即使这两个类对象（class对象）来源同一个class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</li></ul><h4 id="（2）对类加载器的引用"><a href="#（2）对类加载器的引用" class="headerlink" title="（2）对类加载器的引用"></a>（2）对类加载器的引用</h4><ul><li>JVM必须知道一个类型是由启动类加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</li></ul><h4 id="（3）类的主动使用和被动使用"><a href="#（3）类的主动使用和被动使用" class="headerlink" title="（3）类的主动使用和被动使用"></a>（3）类的主动使用和被动使用</h4><ul><li><p>Java程序对类的使用方式分为：主动使用和被动使用。</p></li><li><p>主动使用，又分为七种情况：</p><ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射（比如：Class.forName(“com.atguigu.Test”））</li><li>初始化一个类的子类</li><li>Java虚拟机启动时被标明为启动类的类</li><li>JDK 7 开始提供的动态语言支持</li></ul></li><li><p>java.lang.invoke.MethodHandle实例的解析结果</p><p>REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化。</p></li><li><p>除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。</p></li></ul><h2 id="三、运行时数据区概述及线程"><a href="#三、运行时数据区概述及线程" class="headerlink" title="三、运行时数据区概述及线程"></a>三、运行时数据区概述及线程</h2><h3 id="1-方法区"><a href="#1-方法区" class="headerlink" title="1.方法区"></a>1.方法区</h3><h4 id="1-1、栈、堆、方法区的交互关系"><a href="#1-1、栈、堆、方法区的交互关系" class="headerlink" title="1.1、栈、堆、方法区的交互关系"></a>1.1、栈、堆、方法区的交互关系</h4><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728144908126.png" alt="image-20220728144908126"></p><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728144922635.png" alt="image-20220728144922635"></p><h4 id="1-2、对方法区理解"><a href="#1-2、对方法区理解" class="headerlink" title="1.2、对方法区理解"></a>1.2、对方法区理解</h4><h5 id="1-方法区在哪里？"><a href="#1-方法区在哪里？" class="headerlink" title="1.方法区在哪里？"></a>1.方法区在哪里？</h5><ul><li><p>《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但是一些简单的实现可能不会选择去进行垃圾回收或者进行压缩。”但对于Hotsot JVM 而言，方法区还有一个别名叫做 Non-Heap （非堆），目的就是要和堆分开。</p></li><li><p>所以，方法区看作是一块独立于Java堆的内存空间。</p></li></ul><h5 id="2-方法区的基本理解"><a href="#2-方法区的基本理解" class="headerlink" title="2.方法区的基本理解"></a>2.方法区的基本理解</h5><ul><li><p>方法区（Method Area） 与 Java堆一样，是各个线程共享的内存区域。</p></li><li><p>方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的。</p></li><li><p>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</p></li><li><p>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：java.lang.OutOfMemoryError:PermGen space 或者 java.lang.OutOfMemoryError:Metaspace</p></li><li><ul><li>加载大量的第三方的jar包：Tomcat部署的工程较多（30-50个）：大量动态的生成反射类。</li></ul></li><li><p>关闭JVM就会释放这个区域的内存。</p></li><li><p><strong>例，使用jvisualvm查看加载类的个数:</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728145710219.png" alt="image-20220728145710219"></p><h5 id="3-Hotspot方法区演进"><a href="#3-Hotspot方法区演进" class="headerlink" title="3.Hotspot方法区演进"></a>3.Hotspot方法区演进</h5><ul><li>在jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代。</li></ul><blockquote><p>In JDK8 classes metadata is now stored in the native heap and this space is called Metaspace.</p></blockquote><ul><li><p>本质上，方法区和永久代并不等价。仅是对Hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念。</p></li><li><ul><li>现在来看，当年使用永久代不是好的主意。导致Java程序更容易OOM（超过 -XX:MaxPermSize 上限）。</li></ul></li></ul><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728145843302.png" alt="image-20220728145843302"></p><ul><li>而到了JDK8 ，终于完全废弃了永久代的概念，改用与JRockit 、J9 一样在本地内存中实现的元空间（Metaspace）来代替。</li></ul><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728145906499.png" alt="image-20220728145906499"></p><ul><li>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存。</li><li>永久代、元空间二者并不是只是名字变了，内部结构也调整了。</li><li>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常。</li></ul><h4 id="1-3、对方法区理解"><a href="#1-3、对方法区理解" class="headerlink" title="1.3、对方法区理解"></a>1.3、对方法区理解</h4><h5 id="1-设置方法区大小："><a href="#1-设置方法区大小：" class="headerlink" title="1.设置方法区大小："></a>1.设置方法区大小：</h5><ul><li><p>方法区的大小不是固定的，jvm可以根据应用的需要动态调整。</p></li><li><p>jdk 7 及以前：</p></li><li><ul><li>通过 -XX:PermSize 来设置永久代初始分配空间。默认值是20.75M.</li><li>-XX:MaxPermSize 来设定永久代最大可分配空间。32位机器默认是64M，64位机器默认为82M.</li><li>当JVM加载的类信息容量超过了这个值，会报OutOfMemoryError:PermGen space。</li></ul></li><li><p>jdk8 及以后：</p></li><li><ul><li>元数据区大小可以使用参数 -XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 指定。替代上述原因的两个参数。</li><li>默认值依赖于平台，windows下， -XX:MetaspaceSize 是21M. -XX:MaxMetaspaceSize 的值是 -1 ，即没有限制。</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存，如果元数据区发生溢出，虚拟机一样会抛出异常OutOfMemoryError:Metaspace</li><li>-XX:MetaspaceSize: 设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的-XX：MetaspaceSize 值为21MB.这是初始的高水位线，一旦触及这个水位线，Full GC 将会被触发并卸载没出的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize 时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC 多次调用。为了避免频繁的GC，建议将 -XX:MetaspaceSize 设置为一个相对较高的值。</li></ul></li></ul><p> </p><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span>  jdk7及以前： <span class="token operator">*</span>  查询 jps  <span class="token operator">-</span><span class="token operator">></span> jinfo <span class="token operator">-</span>flag PermSize <span class="token punctuation">[</span>进程id<span class="token punctuation">]</span> <span class="token operator">*</span>  <span class="token operator">-</span>XX<span class="token operator">:</span>PermSize<span class="token operator">=</span>100m <span class="token operator">-</span>XX<span class="token operator">:</span>MaxPermSize<span class="token operator">=</span>100m <span class="token operator">*</span> <span class="token operator">*</span>  jdk8及以后： <span class="token operator">*</span>  查询 jps  <span class="token operator">-</span><span class="token operator">></span> jinfo <span class="token operator">-</span>flag MetaspaceSize <span class="token punctuation">[</span>进程id<span class="token punctuation">]</span> <span class="token operator">*</span>  <span class="token operator">-</span>XX<span class="token operator">:</span>MetaspaceSize<span class="token operator">=</span>100m  <span class="token operator">-</span>XX<span class="token operator">:</span>MaxMetaspaceSize<span class="token operator">=</span>100m</code></pre><h4 id="1-4-OOM"><a href="#1-4-OOM" class="headerlink" title="1.4.OOM"></a>1.4.OOM</h4><ul><li>以下代码在JDK8环境下会报 Exception in thread “main” java.lang.OutOfMemoryError: Compressed class space 错误</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * jdk6/7中： * -XX:PermSize=10m -XX:MaxPermSize=10m * * jdk8中： * -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            OOMTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OOMTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建ClassWriter对象，用于生成类的二进制字节码</span>                ClassWriter classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//指明版本号，修饰符，类名，包名，父类，接口</span>                classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>V1_6<span class="token punctuation">,</span> Opcodes<span class="token punctuation">.</span>ACC_PUBLIC<span class="token punctuation">,</span> <span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//返回byte[]</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//类的加载</span>                test<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Class对象</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-如何解决这些OOM？"><a href="#1-5-如何解决这些OOM？" class="headerlink" title="1.5.如何解决这些OOM？"></a>1.5.如何解决这些OOM？</h4><ol><li>要解决OOM异常或heap space 的异常，一般的手段是首先通过内存映射工具（如：Eclipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak） 还是内存溢出（Memory Overflow）。</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就能找到泄露对象是通过怎样的路径与 GC Roots 相关联系并导致垃圾收集器无法自动回收它们的。掌握了泄露对象的内存信息，以及 GC Roots 引用链的信息，就可以比较准确的定位出泄漏代码的位置。</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实还都必须存活着，那就应当检查虚拟机的堆参数（-Xmx -Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><h4 id="1-6-方法区的内部结构"><a href="#1-6-方法区的内部结构" class="headerlink" title="1.6.方法区的内部结构"></a>1.6.方法区的内部结构</h4><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728150407709.png" alt="image-20220728150407709"></p><h4 id="1-7、方法区（Method-Area）存储什么？"><a href="#1-7、方法区（Method-Area）存储什么？" class="headerlink" title="1.7、方法区（Method Area）存储什么？"></a>1.7、方法区（Method Area）存储什么？</h4><ul><li>《深入理解Java虚拟机》书中对方法区（Method Area）存储内容描述如下：它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</li></ul><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728150513847.png" alt="image-20220728150513847"></p><h4 id="1-8、类型信息"><a href="#1-8、类型信息" class="headerlink" title="1.8、类型信息"></a>1.8、类型信息</h4><ul><li><p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation）,JVN必须在方法区中存储以下类型信息：</p></li><li><ul><li>这个类型的完整有效名称（全名=包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或者是java.lang.Object，都没有父类）</li><li>这个类型的修饰符（public、abstract、final的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ul></li></ul><h4 id="1-9、域（Field）信息"><a href="#1-9、域（Field）信息" class="headerlink" title="1.9、域（Field）信息:"></a>1.9、域（Field）信息:</h4><ul><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：域名称、域类型、域修饰符（public、private、protected、static、final、volatile、transient的某个子集）。</li></ul><h4 id="1-10、方法（Method）信息："><a href="#1-10、方法（Method）信息：" class="headerlink" title="1.10、方法（Method）信息："></a>1.10、方法（Method）信息：</h4><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序。</p><ul><li><p>方法的名称</p></li><li><p>方法的返回类型（或void）</p></li><li><p>方法参数的数量和类型（按顺序）</p></li><li><p>方法的修饰符（public、private、protected、static、final、synchronized、native、abstract的一个子集）。</p></li><li><p>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）</p></li><li><p>异常表（abstract和native方法除外）</p></li><li><ul><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器的偏移地址、被捕获的异常类的常量池索引。</li></ul></li></ul><h4 id="1-11、non-final的类变量"><a href="#1-11、non-final的类变量" class="headerlink" title="1.11、non-final的类变量"></a>1.11、non-final的类变量</h4><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分。</li><li>类变量被类的所有实例共享，即使没有类实例时你也可以访问它。</li><li>以下代码不会报空指针异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Order order <span class="token operator">=</span> null<span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Void <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-12、补充说明：全局常量：static-final"><a href="#1-12、补充说明：全局常量：static-final" class="headerlink" title="1.12、补充说明：全局常量：static  final"></a>1.12、补充说明：全局常量：static  final</h4><ul><li>被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。</li></ul><p><strong>上边的代码解析：</strong></p><ul><li>Order.class字节码文件，右键Open in Teminal打开控制台，</li><li>使用javap -v -p Order.class &gt; tst.txt 将字节码文件反编译并输出为txt文件</li><li>可以看到==被声明为static final的常量number在编译的时候就被赋值了，这不同于没有被final修饰的static变量count是在类加载的准备阶段被赋值==</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> I    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> I    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC<span class="token punctuation">,</span> ACC_FINAL    ConstantValue<span class="token operator">:</span> <span class="token keyword">int</span> <span class="token number">2</span></code></pre><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728150938405.png" alt="image-20220728150938405"></p><h4 id="1-13、运行时常量池-vs-常量池"><a href="#1-13、运行时常量池-vs-常量池" class="headerlink" title="1.13、运行时常量池 vs  常量池"></a>1.13、运行时常量池 vs  常量池</h4><p><strong>class文件中常量池的理解：</strong></p><ul><li>方法区，内部包含了运行时常量池。</li><li>字节码文件，内部包含了常量池。</li><li>要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池。</li><li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html</a></li></ul><h4 id="1-14、常量池："><a href="#1-14、常量池：" class="headerlink" title="1.14、常量池："></a>1.14、常量池：</h4><ul><li>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一些项目信息，那就是常量表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用。</li></ul><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728151150906.png" alt="image-20220728151150906"></p><h4 id="1-15、为什么需要常量池？"><a href="#1-15、为什么需要常量池？" class="headerlink" title="1.15、为什么需要常量池？"></a>1.15、为什么需要常量池？</h4><ul><li><p>一个Java源文件中的类、接口，编译后产生一个字节码文件，而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存放到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。</p></li><li><p>在动态链接的时候会用到运行时常量池，之前有介绍。</p></li><li><p>比如：如下代码：</p></li><li><ul><li>虽然只有194字节，但是里面却使用了String、System、PrintStream及Object等结构。</li><li>这里代码量其实已经很小了。如果代码多，引用到的结构会更多！这里就需要常量池了。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-16、常量池中有什么？"><a href="#1-16、常量池中有什么？" class="headerlink" title="1.16、常量池中有什么？"></a>1.16、常量池中有什么？</h4><ul><li><p>几种在常量池内存储的数据类型包括：</p></li><li><ul><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaTest2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>object foo = new Object();将会编译成如下字节码：</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">new</span>  #<span class="token number">2</span>          <span class="token comment" spellcheck="true">//Class java/lang/Object</span><span class="token number">1</span>：       dup        <span class="token number">2</span>：       invokespecial  #<span class="token number">3</span>       <span class="token comment" spellcheck="true">//Method java/lang/Object "&lt;init>"() v</span></code></pre><h4 id="1-17、小结"><a href="#1-17、小结" class="headerlink" title="1.17、小结"></a>1.17、小结</h4><ul><li>常量池。可以看作是一张表。</li><li>虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</li></ul><h4 id="1-18、运行时常量池"><a href="#1-18、运行时常量池" class="headerlink" title="1.18、运行时常量池"></a>1.18、运行时常量池</h4><h5 id="1-18-1、理解"><a href="#1-18-1、理解" class="headerlink" title="1.18.1、理解"></a>1.18.1、理解</h5><ul><li><p>运行时常量池（Runtime Constant Pool） 是方法区的一部分。</p></li><li><p>常量表（Constant Pool Table） 是Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p></li><li><p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p></li><li><p>JVM为每个己加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</p></li><li><p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换位真实地址。</p></li><li><ul><li>运行时常量池，相当于Class文件常量池的另一个重要特征是：具备动态性。</li></ul></li><li><p>运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些。</p></li><li><p>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutOfMemoryError异常。</p></li></ul><h4 id="1-19、方法区使用举例"><a href="#1-19、方法区使用举例" class="headerlink" title="1.19、方法区使用举例"></a>1.19、方法区使用举例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        Ststem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>main方法的字节码指令：</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token number">0</span> sipush <span class="token number">500</span> <span class="token number">3</span> istore_1 <span class="token number">4</span> bipush <span class="token number">100</span> <span class="token number">6</span> istore_2 <span class="token number">7</span> iload_1 <span class="token number">8</span> iload_2 <span class="token number">9</span> idiv<span class="token number">10</span> istore_3<span class="token number">11</span> bipush <span class="token number">50</span><span class="token number">13</span> istore <span class="token number">4</span><span class="token number">15</span> getstatic #<span class="token number">2</span> <span class="token operator">&lt;</span>java<span class="token operator">/</span>lang<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token operator">></span><span class="token number">18</span> iload_3<span class="token number">19</span> iload <span class="token number">4</span><span class="token number">21</span> iadd<span class="token number">22</span> invokevirtual #<span class="token number">3</span> <span class="token operator">&lt;</span>java<span class="token operator">/</span>io<span class="token operator">/</span>PrintStream<span class="token punctuation">.</span>println<span class="token operator">></span><span class="token number">25</span> <span class="token keyword">return</span></code></pre><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728151954619.png" alt="image-20220728151954619"></p><h4 id="1-20、方法区的演进细节"><a href="#1-20、方法区的演进细节" class="headerlink" title="1.20、方法区的演进细节"></a>1.20、方法区的演进细节</h4><h5 id="1-20-1、概述"><a href="#1-20-1、概述" class="headerlink" title="1.20.1、概述"></a>1.20.1、概述</h5><ul><li><p>首先明确：只有 HotSpot 才有永久代。</p></li><li><ul><li>BEA JRockit 、IBM J9 等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一。</li></ul></li><li><p>HotSpot 中方法区的变化：</p></li></ul><blockquote><p>jdk1.6及之前有永久代（permanent generation），静态变量存放在永久代上。</p><p>jdk1.7有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移</p><p>​                                      除，保存在堆中。</p><p>jdk1.8及以后无永久代，类型信息、字段、方法、常量保存在本地内存的元空间</p><p>​                                      ，但字符串常量池、静态变量仍在堆。</p></blockquote><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728152129436.png" alt="image-20220728152129436"></p><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728152139524.png" alt="image-20220728152139524"></p><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728152147323.png" alt="image-20220728152147323"></p><h5 id="1-20-2、永久代为什么要被元空间替换？"><a href="#1-20-2、永久代为什么要被元空间替换？" class="headerlink" title="1.20.2、永久代为什么要被元空间替换？"></a>1.20.2、永久代为什么要被元空间替换？</h5><ul><li><p><a href="http://openjdk.java.net/jeps/122">http://openjdk.java.net/jeps/122</a></p></li><li><p>随着jdk8的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。</p></li><li><p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。</p></li><li><p>这项改动是很有必要的，原因有：</p></li><li><ul><li><p>为永久代设置空间大小是很难确定的。</p></li><li><ul><li>在某些场景下，如果动态加载类过多，容易产生Perm 区的OOM。比如某个实际WEB工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。</li><li>而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</li></ul></li><li><p>对永久代进行调优是很困难的。</p></li></ul></li></ul><h5 id="1-20-3、StringTable为什么要调整？"><a href="#1-20-3、StringTable为什么要调整？" class="headerlink" title="1.20.3、StringTable为什么要调整？"></a>1.20.3、StringTable为什么要调整？</h5><ul><li>jdk7中将StringTable 放到堆空间中。</li><li>因为永久代的回收率很低，在full gc 的时候才会触发，。而 full gc 是老年代的空间不足、永久代不足时才会触发。</li><li>这就导致StringTable 回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放在堆里，能及时回收内存。</li></ul><h5 id="1-20-4、静态变量放在哪里？"><a href="#1-20-4、静态变量放在哪里？" class="headerlink" title="1.20.4、静态变量放在哪里？"></a>1.20.4、静态变量放在哪里？</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 结论：     静态引用对应的对象实体始终都存在堆空间。        jdk7:    -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails            jdk8:    -Xms200m -Xmx200m -XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackFieldTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//100MB</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>StackFieldTest<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    《深入Java虚拟机》中的案例：    staticObj、instanceObj、localObj存放在哪里？*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackObjTest</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> ObjectHolder staticObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectHolder instanceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ObjectHolder localObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackObjTest<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>staticObj 随着Test 的类型信息存放在方法区</li><li>instanceObj 随着 Test 的对象实例存放在 Java 堆</li><li>localObject 则是存放在 foo() 方法栈帧的局部变量表中。</li></ul><pre class=" language-java"><code class="language-java">hsdb<span class="token operator">></span>scanoops <span class="token number">0x00007f32c7800000</span> <span class="token number">0x00007f32c7b50000</span> JHSDB_ _TestCase$Obj ectHolder<span class="token number">0x00007f32c7a7c458</span> JHSDB_ TestCase$Obj ectHolder<span class="token number">0x00007f32c7a7c480</span> JHSDB_ TestCase$Obj ectHolder<span class="token number">0x00007f32c7a7c490</span> JHSDB_ TestCase$Obj ectHolder</code></pre><ul><li>测试发现：三个对象的数据在内存中的地址都落在 Eden 区范围内，所以结论：只要是对象实例必然会在 Java 堆中分配。</li><li>接着，找到了一个引用该 staticObj 对象的地方，是在一个 java.lang.Class 的实例里，并且给出了这个实例的地址，通过Inspector 查看该对象实例，可以清楚看到这确实是一个 java.lang.Class 类型的对象实例，里面有一个名为 staticObj 的实例字段：</li></ul><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728152544935.png" alt="image-20220728152544935"></p><ul><li>从《Java虚拟机规范》所定义的概念模型来看，所有Class相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。</li><li>JDK7 及以后版本的 HotSpot 虚拟机选择把静态变量与类型在 Java 语言一端的映射 Class 对象存放在一起，存储于 Java 堆之中，从我们的实验中也明确验证了这一点。</li></ul><h4 id="1-21、方法区的垃圾回收"><a href="#1-21、方法区的垃圾回收" class="headerlink" title="1.21、方法区的垃圾回收"></a>1.21、方法区的垃圾回收</h4><ul><li><p>有些人认为方法区（如Hotspot，虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的 2GC 收集器就不支持类卸载）。</p></li><li><p>一般来说<strong>这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。</strong>但是这部分区域的回收<strong>有时又确实是必要</strong>的。以前 Sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 Hotspot 虚拟机对此区域未完全回收而导致内存泄漏。</p></li><li><p>方法区的垃圾收集主要回收两部分内容：</p></li><li><ul><li>常量池中废弃的常量</li><li>不再使用的类型</li></ul></li><li><p>来说说方法区内常量池之中主要存放的两大类常量：</p></li><li><ul><li>字面量</li><li>符号引用</li></ul></li><li><p>字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为final的常量值等。</p></li><li><p>而符号引用则属于编译原理方面的概念，包括下面三类常量：</p></li><li><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul></li><li><p>HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有任何地方引用，就可以被回收。</p></li><li><p>回收废弃常量与回收 Java 堆中的对象非常类似。</p></li><li><p>判定一个常量是否“废弃”还是相当简单，而判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足以下三个条件：</p></li><li><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li><li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</li><li>该类对应的 java.lang.Class 对象没有任何地方被引用，无法通过任何地方通过反射访问该类的方法。</li></ul></li><li><p>Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然被回收。关于是否要对类型进行回收，HotSpot 虚拟机提供了 -Xnoclassgc 参数进行控制，还可以使用 -verbose:class 以及 -XX:+TraceClass-Loading、-XX:+TraceClassUnLoading 查看类加载和卸载信息。</p></li><li><p>在大量使用反射、动态代理、CGLib 等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</p></li></ul><h4 id="1-22、总结"><a href="#1-22、总结" class="headerlink" title="1.22、总结"></a>1.22、总结</h4><p><img src="/../images/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20220728152759644.png" alt="image-20220728152759644"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考-中级</title>
      <link href="/2021/06/15/ruan-kao-zhong-ji/"/>
      <url>/2021/06/15/ruan-kao-zhong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="软考中级——系统集成项目管理工程师"><a href="#软考中级——系统集成项目管理工程师" class="headerlink" title="软考中级——系统集成项目管理工程师"></a>软考中级——系统集成项目管理工程师</h1><span id="more"></span><h2 id="1-、考试简介"><a href="#1-、考试简介" class="headerlink" title="1)  、考试简介"></a>1)  、考试简介</h2><ol><li>软件设计师考试属于全国计算机技术与软件专业技术资格考试，即软考。</li><li>通过本考试合格的人员能根据软件开发项目管理和软件工程的要求，可聘任工程师职务。</li></ol><h2 id="2）、考试科目"><a href="#2）、考试科目" class="headerlink" title="2）、考试科目"></a>2）、考试科目</h2><table><thead><tr><th>考试科目</th><th>考题形式</th><th>考试时长</th><th>合格标准</th></tr></thead><tbody><tr><td>计算机与软件工程知识</td><td>75道选择题（每题1分，总分75分）</td><td>150分钟，上午9点到11点半</td><td>45分及以上</td></tr><tr><td>软件设计</td><td>6道问答题，其中4道必做，后两道题选做一题（每题15分，总分75分）</td><td>150分钟，下午两点到四点半</td><td>45分及以上</td></tr></tbody></table><table><thead><tr><th>注意：两门考试必须同时通过，才能拿到证书。否则下次重考两门。</th></tr></thead></table><h2 id="3）、考试报名"><a href="#3）、考试报名" class="headerlink" title="3）、考试报名"></a>3）、考试报名</h2><ol><li>报名条件：软件设计师考试不设学历与资历条件，也不论年龄和专业，考生可根据自己的水平选择合适的级别合适的资格，但一次考试只能报考一种资格，考试采用笔试形式，考试实行全国统一大纲、统一试题、统一时间、统一标准、统一证书的考试办法。</li><li>报名时间和地点：基本都是网上报名，一般在考试前3-5个月。各地报名时间不同。请关注：中国计算机技术职业资格网   <a href="http://www.ruankao.org.cn/%EF%BC%9B%E5%90%8C%E6%97%B6%E5%85%B3%E6%B3%A8%E8%80%83%E7%94%9F%E6%89%80%E5%9C%A8%E5%9C%B0%E5%8C%BA%E8%80%83%E8%AF%95%E4%B8%AD%E5%BF%83%E7%BD%91%E7%AB%99%E9%80%9A%E7%9F%A5%E3%80%82">http://www.ruankao.org.cn/；同时关注考生所在地区考试中心网站通知。</a></li><li>考试安排：每年都在5月的第三周周六以及11月的第二周周六安排考试，一年安排两次考试。</li></ol><h2 id="4）、实用网站"><a href="#4）、实用网站" class="headerlink" title="4）、实用网站"></a>4）、实用网站</h2><ol><li>中国计算机技术职业资格网：<a href="http://www.ruankao.org.cn/%EF%BC%9B%E5%8F%AF%E4%BB%A5%E6%9F%A5%E8%AF%A2%E8%80%83%E8%AF%95%E4%BF%A1%E6%81%AF%E3%80%81%E8%80%83%E8%AF%95%E6%88%90%E7%BB%A9%E3%80%82%E5%8F%A6%E5%A4%96%E5%9C%A8%E8%AF%A5%E7%BD%91%E7%AB%99%E7%9A%84%E5%8F%B3%E4%B8%8B%E6%96%B9%E2%80%9C%E5%90%84%E5%9C%B0%E8%80%83%E5%8A%A1%E6%9C%BA%E6%9E%84%E2%80%9D%E6%A0%8F%E7%9B%AE%E4%B8%AD%E6%9F%A5%E8%AF%A2%E5%88%B0%E5%90%84%E5%9C%B0%E8%80%83%E8%AF%95%E5%AE%89%E6%8E%92%E5%8F%8A%E6%8A%A5%E5%90%8D%E9%80%9A%E7%9F%A5%E7%AD%89%E3%80%82%E8%BF%99%E6%98%AF%E8%BD%AF%E8%80%83%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E7%BD%91%E7%AB%99%E3%80%82">http://www.ruankao.org.cn/；可以查询考试信息、考试成绩。另外在该网站的右下方“各地考务机构”栏目中查询到各地考试安排及报名通知等。这是软考最重要的网站。</a></li><li>各地方政务的考务机构网站，在“中国计算机技术职业资格网”中可以查询到，也要收藏，可以查询到各地具体的考试安排及报名。</li></ol><hr><h2 id="第一章、信息化知识"><a href="#第一章、信息化知识" class="headerlink" title="第一章、信息化知识"></a>第一章、信息化知识</h2><table><thead><tr><th>考情分析：        选择题：8-10分            案例题：无</th></tr></thead></table><table><thead><tr><th>章节</th><th>大纲内容</th><th>重要程度</th></tr></thead><tbody><tr><td>1.1</td><td>信息与信息化</td><td>两颗星</td></tr><tr><td>1.2</td><td>国家信息化战略和规划</td><td>三颗星</td></tr><tr><td>1.3</td><td>电子政务</td><td>一颗星</td></tr><tr><td>1.4</td><td>企业信息化和两化深度融合</td><td>三颗星</td></tr><tr><td>1.5</td><td>商业智能</td><td>两颗星</td></tr><tr><td>1.6</td><td>新一代信息技术</td><td>三颗星</td></tr></tbody></table><h3 id="1-1、信息与信息化"><a href="#1-1、信息与信息化" class="headerlink" title="1.1、信息与信息化"></a>1.1、信息与信息化</h3><h4 id="1、信息基本概念（了解"><a href="#1、信息基本概念（了解" class="headerlink" title="1、信息基本概念（了解)"></a>1、信息基本概念（了解)</h4><ul><li>控制论的创始人维纳认为：信息就是信息，既不是物质也不是能量。</li><li>信息论的尊基者香农认为：信息就是能够用来消除不确定性的东西。</li><li>哲学界认为：信息是事物普遍联系的方式。</li><li>普遍流行说法：信息是事先不知道的报导。</li></ul><blockquote><p>信息：是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在、产生和传递着以这些方式表示出来的各种各样的信息。</p></blockquote><h4 id="2、什么是本体论信息，什么是认识论信息？（可能会考，能区分本体论信息和认识论信息的概念）"><a href="#2、什么是本体论信息，什么是认识论信息？（可能会考，能区分本体论信息和认识论信息的概念）" class="headerlink" title="2、什么是本体论信息，什么是认识论信息？（可能会考，能区分本体论信息和认识论信息的概念）"></a>2、什么是本体论信息，什么是认识论信息？（可能会考，能区分本体论信息和认识论信息的概念）</h4><ul><li>本体论信息：就是事物的运动状态和状态变化方式的<strong>自我表述</strong>。</li><li>认识论信息：就是主体对于该事物的运动状态以及状态变化方式的<strong>具体描述</strong>；包括对于它的“状态和方式”的形式、含义和价值的描述。</li></ul><h4 id="3、信息的传输模型（掌握）"><a href="#3、信息的传输模型（掌握）" class="headerlink" title="3、信息的传输模型（掌握）"></a>3、信息的传输模型（掌握）</h4><ul><li>信源：产生信息的实体，信息产生后，由这个实体向外传播。</li><li>新宿：信息的归宿和接收者。</li><li>信道：传送信息的通道，如TCP/IP网络。</li><li>编码器：如<strong>量化器、压缩编码器、调制器</strong>等。在编码阶段，信息被封装为TCP/IP包，加密设备在信息编码阶段实现；为了提高可靠性，在编码时可以增加冗余编码。</li><li>译码器：包括<strong>解调器、译码器、数模转换器</strong>等。</li><li>噪声：<strong>干扰</strong>，包括信道中的噪声及分散在通信系统中的其他噪声集中表示。</li></ul><blockquote><p>考点一：以下选项中译码器不包括哪个？</p><p>考点二：加密设备在哪一个阶段进行？         编码器阶段</p><p>考点三：TCP/IP网络属于信息传输模型的哪一个要素？             信道</p></blockquote><h4 id="4、信息的七大质量特性（掌握）"><a href="#4、信息的七大质量特性（掌握）" class="headerlink" title="4、信息的七大质量特性（掌握）"></a>4、信息的七大质量特性（掌握）</h4><ol><li>精确性：对事物状态描述的<strong>精确</strong>程度。</li><li>经济性：指获取信息带来的<strong>成本</strong>在可接受的范围之内。（<em>与钱有关</em>）</li><li>完整性：对事物状态描述的<strong>全面</strong>程度，完整信息应包括<strong>所有</strong>重要事实。（<em>与精确性容易混淆，精确性是精确程度，完整性是全面程度</em>）</li><li>可验证性：指信息的主要<strong>质量属性</strong>可以被<strong>证实或者证伪</strong>的程度。（<em>这里一定是证实或者证伪的程度，单独证实的程度是错误的</em>）</li><li>可靠性：指信息的来源、采集方法等是<strong>可以信任的，符合预期</strong>。</li><li>安全性：指信息的生命周期中，信息可以被<strong>非授权访问</strong>的可能性，<strong>可能性越小，安全性越高</strong>。（<em>这里注意一定是可能性越低，安全性越高。如果反过来说可能性越高，安全性越低，是错误的</em>）</li><li>及时性：指信息获得的时刻与事件发生的<strong>时刻</strong>的间隔长短。（<em>时间对比</em>）</li></ol><blockquote><p>考点一：给出概念让我们判断是哪个特性。       技巧：根据关键词选择。</p><p>考点二：注意上面括号中描述的可验证性和安全性及完整性处的误导点。</p></blockquote><h4 id="5、信息系统特点（掌握）"><a href="#5、信息系统特点（掌握）" class="headerlink" title="5、信息系统特点（掌握）"></a>5、信息系统特点（掌握）</h4><ol><li>目的性：有明确的目标或者目的，目标性决定了系统的功能。</li><li>稳定性：受规则的约束，系统的内部结构和秩序是可以预见的，可以被预测，也可以预估相关的可能性。</li><li>脆弱性：系统可能存在着丧失结构、功能和秩序的特性，往往是隐藏不易被外界感知的，一旦被入侵，整体性会被破坏。</li><li>可嵌套性：包括若干个子系统，系统之间能够耦合成一个更大的系统，便于对系统分层、分布管理。</li><li>开放性：是指系统的<strong>可访问性</strong>，可以<strong>被外部环境识别</strong>，开放性体现在系统有可以清晰描述并被准确识别、理解的所谓接口层面上。</li><li>健壮性：系统具有能够抵御出现非预期状态的特性。一般采取<strong>冗余技术、容错技术、身份识别技术、可靠性技术</strong>。</li></ol><blockquote><p>考点一：考概念选择是哪个信息系统特点。</p><p>考点二：以下选项不属于信息系统特点的是？</p></blockquote><h4 id="6、信息系统的组成（了解）"><a href="#6、信息系统的组成（了解）" class="headerlink" title="6、信息系统的组成（了解）"></a>6、信息系统的组成（了解）</h4><ul><li>信息系统的组成部分包括：硬件、软件、数据库、网络、存储设备、感知识别、外设、人员以及把数据处理成信息的规范等。<ul><li>硬件：由执行输入、处理和输出行为的计算机设备组成。</li><li>软件：由管理计算机运行的程序构成，包括驱动程序、系统软件、数据库管理系统、中间件、应用软件等。</li><li>数据库：是经过机构化、规范化组织后的事实和信息的集合。<strong>是信息系统中最有价值和最重要的部分之一</strong>。</li><li>人员：<strong>是信息系统中最重要的因素</strong>。信息系统人员包括<strong>所有管理、运行、编写和维护系统的人</strong>。</li></ul></li></ul><blockquote><p>考点一：什么是信息系统中最有价值和最重要的部分之一？            数据库</p><p>考点二：什么是信息系统中最重要的因素？                          人员</p><p>考点三：信息系统人员包括哪几个？                    信息系统人员不包括什么？   </p></blockquote><h4 id="7、信息系统生命周期（掌握）"><a href="#7、信息系统生命周期（掌握）" class="headerlink" title="7、信息系统生命周期（掌握）"></a>7、信息系统生命周期（掌握）</h4><ul><li>软件的生命周期主要包括：可行性分析与项目开发计划、需求分析、概要设计、详细设计、编码、测试、维护等阶段。</li></ul><table><thead><tr><th>生命周期（5个阶段）</th><th>具体内容</th><th>生命周期（四个阶段）</th></tr></thead><tbody><tr><td>系统规划</td><td>可行性分析与项目开发计划、SRS（需求规划说明书）</td><td>立项</td></tr><tr><td>系统分析</td><td>需求分析</td><td>开发（含系统验收）</td></tr><tr><td>系统设计</td><td>概要设计、详细设计</td><td>开发（含系统验收）</td></tr><tr><td>系统实施</td><td>编码、测试</td><td>开发（含系统验收）</td></tr><tr><td>运行维护</td><td>运行维护</td><td>运维、消亡</td></tr></tbody></table><blockquote><p>考点一：例如：测试属于软件哪个生命周期？                               系统实施</p><p>考点二：SRS属于哪个生命周期？                            立项</p><p>考点三：系统分析、系统设计、系统实施都属于开发（含系统验收）阶段。</p></blockquote><h4 id="8、信息化5个层次（掌握）"><a href="#8、信息化5个层次（掌握）" class="headerlink" title="8、信息化5个层次（掌握）"></a>8、信息化5个层次（掌握）</h4><ol><li>产品信息化</li><li>企业信息化</li><li>产业信息化</li><li>国民经济信息化</li><li>社会生活信息化</li></ol><ul><li>产品信息化：是信息化的基础。</li><li>企业信息化：是国民经济信息化的基础，企业信息化结构包括：<strong>产品（服务）层、作业层、管理层、决策层</strong>。</li><li>社会生活信息化：智慧城市、互联网金融等。</li></ul><blockquote><p>考点一：信息化五个层次的顺序：产品信息化、企业信息化、产业信息化、国民经济信息化、社会生活信息化。</p><p>考点二：企业信息化结构包括：   产品、作业、管理、决策</p></blockquote><h4 id="9、信息化的基本内涵（掌握）"><a href="#9、信息化的基本内涵（掌握）" class="headerlink" title="9、信息化的基本内涵（掌握）"></a>9、信息化的基本内涵（掌握）</h4><ol><li>主体：<strong>全体社会成员</strong>，包含政府、企业、事业、团体和个人。（<em>注意，主体一定是全体社会成员</em>）</li><li>时域：是一个<strong>长期</strong>的过程。（<em>注意，时域——&gt;长期</em>）</li><li>空域：是政治、经济、文化、军事和社会的<strong>一切领域</strong>。（<em>注意，空域——&gt;一切领域</em>）</li><li>手段：是基于现代信息技术的先进社会生产<strong>工具</strong>。（<em>注意，手段——&gt;工具</em>）</li><li>途径：是创建信息时代的社会<strong>生产力</strong>。（<em>注意，途径——&gt;生产力</em>）</li><li>目标：是使国家的综合实力、社会的文明素质和人民的生活质量<strong>全面提升</strong>。（注意，目标——&gt;全面提升）</li></ol><blockquote><p>考点：记住概念，可能出现判断对错。</p><blockquote><p>主体——&gt;全体社会成员，包括政府、企业、事业、团体和个人。</p><p>时域——&gt;是一个长期的过程。</p><p>空域——&gt;是政治、经济、文化、军事和社会的一切领域。</p><p>手段——&gt;是基于现代信息技术的先进社会生产工具。</p><p>途径——&gt;是创建信息时代的社会生产力。</p><p>目标——&gt;使国家的综合实力、社会的文明素质和人民的社会质量全面提升。</p></blockquote></blockquote><h4 id="10、国家信息化6要素（掌握）"><a href="#10、国家信息化6要素（掌握）" class="headerlink" title="10、国家信息化6要素（掌握）"></a>10、国家信息化6要素（掌握）</h4><ol><li>信息资源：信息资源的开发和利用是国家信息化的<strong>核心任务</strong>。</li><li>信息网络：是信息资源开发和利用的<strong>基本设施</strong>。（<em>三网融合：电信网、广播电视网、计算机网</em>）</li><li>信息技术应用：是信息化体系六要素中的<strong>龙头、主阵地</strong>。</li><li>信息技术和产业：信息产业是信息化的<strong>物质基础</strong>。</li><li>信息化人才：人才是信息化的<strong>成功之本</strong>。</li><li>信息化政策法规和标准规范：是国家信息化快速、有序、健康和持续发展的<strong>保障</strong>。</li></ol><ul><li>信息资源：<ul><li>能够<strong>重复使用</strong>，其价值在使用中得到体现。</li><li>信息资源的利用具有很强的目标导向，<strong>不同的信息在不同的用户中体现不同的价值</strong>。</li><li>具有<strong>广泛性</strong>：人们对其检索和利用，不受时间、空间、语言、地域和行业的制约。</li><li>是<strong>社会公共财富</strong>，也是商品，可以被交易或者交换。</li><li>具有<strong>流动性</strong>，通过信息网可以快速传输。</li><li><strong>多态性</strong>，信息资源以数字、文字、图像、声音、视频等多种形态存在。</li><li>融合性：整合不同的信息资源并分析、挖掘、可以得到新的知识，取得比分散信息资源更高的价值。</li></ul></li></ul><blockquote><p>考点一：记住每个信息化要素概念的关键字。</p><blockquote><p>信息资源——&gt;核心任务</p><p>信息网络——&gt;基础设施</p><p>信息技术应用——&gt;龙头、主阵地</p><p>信息技术和产业——&gt;物质基础</p><p>信息化人才——&gt;成功之本</p><p>信息化政策法规和标准规范——&gt;保障</p></blockquote><p>考点二：这里注意信息化资源中，不同的信息在不同的用户中体现出不同的价值。</p><blockquote><p>如果给出选项，不同的信息在不同的用户中体现出相同的价值，则是错误的。</p></blockquote></blockquote><h4 id="11、两化融合（熟悉）"><a href="#11、两化融合（熟悉）" class="headerlink" title="11、两化融合（熟悉）"></a>11、两化融合（熟悉）</h4><ul><li>党的十八大报告指出，要坚持”四化同步发展，两化深度融合“，明确了两化深度融合成为我国工业经济转型和发展的重要举措之一。</li><li><strong>四化：工业化、信息化、城镇化、农业现代化</strong>。</li><li><strong>两化：工业化、信息化</strong>。</li><li><strong>两化融合：</strong><ul><li><strong>信息化与工业化发展战略的融合</strong>，即信息化发展战略与工业化发展战略要协调一致，信息化发展模式与工业化发展模式要高度匹配，信息化规划与工业化发展规划、计划要密切配合。</li><li><strong>信息资源与材料、能源等工业资源的融合</strong>，能极大节约材料、能源等不可再生资源。</li><li><strong>虚拟经济与工业实体经济融合</strong>，孕育新一代经济的产生，极大促进信息经济、知识经济的形成与发展。</li><li><strong>信息技术与工业技术、IT设备与工业装备的融合</strong>，产生新的科技成果，形成新的生产力。</li></ul></li></ul><blockquote><p>考点一：熟悉概念</p><p>考点二：注意四化比两化多城镇化和农业现代化。</p><p>考点三：判断下列错误的是：   选项：信息化与自动化发展战略的融合。    是错误的，这里是信息化与工业化发展战略的融合。</p></blockquote><hr><h3 id="1-2、国家信息化战略和规则"><a href="#1-2、国家信息化战略和规则" class="headerlink" title="1.2、国家信息化战略和规则"></a>1.2、国家信息化战略和规则</h3><h4 id="1、国家信息化战略和规则具体目标（了解）"><a href="#1、国家信息化战略和规则具体目标（了解）" class="headerlink" title="1、国家信息化战略和规则具体目标（了解）"></a>1、国家信息化战略和规则具体目标（了解）</h4><ul><li>促进经济增长方式的根本转变。</li><li>实现信息技术自主创新、信息产业发展的跨越。</li><li>增强政府公共服务能力，社会主义先进文化传播能力、中国特色的军事变革能力和国民信息技术应用能力。</li><li>提升网络普及水平、信息资源开发利用水平和信息安全保障水平。</li></ul><blockquote><p>考点：没有什么考点，熟读概念即可</p></blockquote><h4 id="2、信息化基础设施（熟悉）"><a href="#2、信息化基础设施（熟悉）" class="headerlink" title="2、信息化基础设施（熟悉）"></a>2、信息化基础设施（熟悉）</h4><ul><li>构建下一代国家综合信息服务设施：实施宽带中国战略，以宽带普及提速和网络融合为重点，加快构建<strong>宽带、融合、安全、泛在</strong>的下一代国家信息基础设施。<ul><li>加快宽带网络优化升级和区域协调发展。</li><li>促进下一代互联网规模商用和前沿布局（IPv6）.</li><li>建设安全可靠的信息应用基础设施。</li><li>加强统筹管理，逐步形成技术先进、安全可靠的内容分发网络（CDN）。</li><li>加快推进三网融合（<strong>计算机网络、广播电视网、电信网</strong>）。</li><li>优化国际通信网络分布。</li></ul></li></ul><blockquote><p>考点：熟读概念，可能会考。</p></blockquote><h4 id="3、信息化发展基本原则（熟悉）"><a href="#3、信息化发展基本原则（熟悉）" class="headerlink" title="3、信息化发展基本原则（熟悉）"></a>3、信息化发展基本原则（熟悉）</h4><ol><li>统筹发展，有序推进。</li><li>需求牵引，<strong>市场引导</strong>。（<em>注意，只要是信息化相关中，出现市场引导这句话就是正确的。   整个这门课程中，凡是出现政府主导，就是错误的，但是如果是政府引导或者是政府推进就是对的。</em>）</li><li>完善机制，<strong>创新驱动</strong>。（<em>注意，考试中如果出现创新驱动，都是正确的。    如果出现资源驱动，那么都是错误的。</em>）</li><li>加强管理，保障安全。</li></ol><blockquote><p>考点：熟记括号中的内容。</p></blockquote><hr><h3 id="1-3、电子政务"><a href="#1-3、电子政务" class="headerlink" title="1.3、电子政务"></a>1.3、电子政务</h3><h4 id="1、电子政务类型（熟悉）"><a href="#1、电子政务类型（熟悉）" class="headerlink" title="1、电子政务类型（熟悉）"></a>1、电子政务类型（熟悉）</h4><ul><li><p>建立完善电子政务平台：</p><ul><li>完成以<strong>云计算</strong>为基础的电子政务公共平台顶层设计。</li><li>全面提升电子政务技术服务能力。</li><li>制定电子政务云计算标准规则。</li><li>鼓励向云计算模式迁移。</li></ul></li><li><p>云计算包括四个方面：</p><ul><li>G2G：政府——&gt;政府（政府对政府的一种服务）</li><li>G2B：政府——&gt;企业（政府对企业的一种服务）</li><li>G2C：政府——&gt;公众（政府对公众的一种服务）</li><li>G2E：政府——&gt;公务员（政府对公务员的一种服务）</li></ul></li></ul><blockquote><p>考点一：与电子政务有关系的是：云计算。</p></blockquote><hr><h3 id="1-4、企业信息化和两化深度融合"><a href="#1-4、企业信息化和两化深度融合" class="headerlink" title="1.4、企业信息化和两化深度融合"></a>1.4、企业信息化和两化深度融合</h3><h4 id="1、企业信息化（熟悉）"><a href="#1、企业信息化（熟悉）" class="headerlink" title="1、企业信息化（熟悉）"></a>1、企业信息化（熟悉）</h4><ul><li>企业信息化是产品升级转型的重要举措之一，而以<strong>”两化深度融合“、”智能制造“（<em>智能制造是2015年提出的，时间计划，应持续到2025年</em>）、”互联网“</strong>为特点的产业信息化，是未来企业信息化发展的方向。</li><li>企业信息化就是用<strong>现代信息技术</strong>来实现企业经营策略、行为规范和业务流程。</li><li>企业信息化：在企业作业、管理、决策的各个层面，科学计算、过程控制、事务处理、经营管理的各个领域，引进和使用现代信息技术，全面改革管理体制和机制，从而大幅度提高企业工作效率、市场竞争能力和经济效益。</li></ul><blockquote><p>考点一：”两化深度合一“、”智能制造“、”互联网“为特点的产业信息化，是未来企业信息化发展的方向。  智能制造是2015年提出。</p><p>考点二：信息化的五层次：产品——&gt;企业——&gt;产业——&gt;国民经济——&gt;社会生活</p><p>考点三：企业信息化结构：产品（服务）层、作业层、管理层、决策层。     八个字概括：产品作业，管理决策</p></blockquote><h4 id="2、企业信息化战略要点（重点掌握）"><a href="#2、企业信息化战略要点（重点掌握）" class="headerlink" title="2、企业信息化战略要点（重点掌握）"></a>2、企业信息化战略要点（重点掌握）</h4><ol><li><strong>以信息化带动工业化。</strong>（<em>或者以工业化促进信息化。</em>       <em>考试中通常出现，以工业化带动信息化，和以信息化促进工业化都是错的。</em>）</li><li>信息化与企业业务全过程的融合、渗透。</li><li>信息产业发展与企业信息化良性互动。</li><li><strong>充分发挥政府的引导作用。</strong>（<em>注意：这里是充分发挥政府的<strong>引导</strong>作用，如果改成，充分发挥政府的主导作业，那么就是错误的。</em>）</li><li>高度重视信息安全。</li><li>企业信息化与企业的改组改造和形成现代企业制度有机结合。</li><li>”因地制宜“推荐企业信息化。</li></ol><blockquote><p>考点：主要考1和4，牢记，括号中的内容牢记。</p></blockquote><h4 id="3、企业信息化的基本原则（了解）"><a href="#3、企业信息化的基本原则（了解）" class="headerlink" title="3、企业信息化的基本原则（了解）"></a>3、企业信息化的基本原则（了解）</h4><ol><li>效益原则。</li><li>”一把手“原则。</li><li><strong>中长期与短期</strong>建设相结合原则。</li><li>规范化与标准化原则。</li><li>以人为本原则。</li></ol><h4 id="4、企业资源计划——ERP（了解）"><a href="#4、企业资源计划——ERP（了解）" class="headerlink" title="4、企业资源计划——ERP（了解）"></a>4、企业资源计划——ERP（了解）</h4><ul><li><strong>在线分析处理（OLAP）</strong>：强调企业的<strong>事前</strong>控制能力，它可以将设计、制造运输和销售等通过集成来并行地进行各种相关的作业，为企业提供了对质量、应变、客户满意度和绩效等关键问题的实时分析能力。（<em>OLAP:在线分析处理，    OLTP：在线事务处理</em>                <em>注意：在线分析处理：强调企业的事前控制能力，如果是强调企业的事后控制能力，则是错误的。</em>）</li><li>ERP系统采用<strong>客户/服务器（C/S）、浏览器/服务器体系结构（C/S）和分布式数据处理技术</strong>，支持Internet、电子商务和电子数据交换（EDI）。</li><li>ERP是一个<strong>以财务会计为核心的信息系统，</strong>用用来识别和规划企业资源，对采购、生产、成本、库存、销售、运输、财务和人力资源等进行规划和优化，从而达到最佳资源组合，使企业利润最大化。一般的ERP软件的财务部分分为<strong>会计核算与财务管理</strong>两大块。</li><li><strong>ERP软件的四大特点：（重点）</strong><ul><li><strong>ERP是统一的集成系统。</strong></li><li><strong>ERP是面向业务流程的系统。</strong></li><li><strong>ERP是模块化可配置的。</strong></li><li><strong>ERP是开放的系统。</strong></li></ul></li></ul><blockquote><p>考点一：在线分析处理：OLAP。    在线事务处理：OLTP。            在线分析处理：强调企业的事前控制能力。</p><p>考点二：ERP系统的四大特点要牢记。</p><p>考点三：关键词记住。</p></blockquote><h4 id="5、客户关系管理——CRM（掌握）"><a href="#5、客户关系管理——CRM（掌握）" class="headerlink" title="5、客户关系管理——CRM（掌握）"></a>5、客户关系管理——CRM（掌握）</h4><ol><li>CRM（客户关系管理）：是一个<strong>集成化</strong>的信息管理系统。</li><li>CRM以<strong>信息技术</strong>为手段，是一种以<strong>客户为中心</strong>的商业策略，CRM注重的是以客户的交流，<strong>企业的经营是以客户为中心，而不是传统的以产品或以市场为中心。</strong>（<em>注意，这里企业经营是以客户为中心，   如果考试中出现选项，企业经营是以产品为中心或者企业经营是以市场为中心则是错误的。</em>）</li><li>CRM在注重提高客户的满意度的同时，一定要把<strong>帮助企业提高获取利润的能力作为重要指标。</strong></li><li>CRM的实施要求企业对其业务功能进行重新设计，并对工作流程进行重组（BPR），将业务的中心转移到客户，同时要针对不同的客户群体有重点的采取不同的策略。</li></ol><ul><li><strong>CRM的三角模型：</strong><ul><li>信息技术</li><li>CRM应用系统</li><li>CRM经营理念</li></ul></li><li><strong>CRM应用功能设计：（<em>总结一句话：销售服务营销一体化</em>）</strong><ul><li>自动化的销售</li><li>自动化的客户服务</li><li>自动化的市场营销。</li></ul></li></ul><blockquote><p>考点一：关键字熟记</p><p>考点二：企业的经营是以客户为中心，而不是以产品或市场为中心。</p><p>考点三：能够区分CRM的三角模型和CRM应用功能设计。</p></blockquote><h4 id="6、CRM客户关系管理（掌握）"><a href="#6、CRM客户关系管理（掌握）" class="headerlink" title="6、CRM客户关系管理（掌握）"></a>6、CRM客户关系管理（掌握）</h4><ul><li>描述性：<ul><li>客户的基本信息，如果是个人客户，一定要涵盖客户的姓名、年龄ID和联系方式等；如果是企业客户，一定要涵盖企业的名称、规模、联系人和法人代表等。</li></ul></li><li>促销性：<ul><li>体现企业曾经为客户提供的产品和服务的历史数据，主要包括用户产品使用情况调查的数据、<strong>促销活动记录数据、客服人员的建议数据和广告数据</strong>等。</li></ul></li><li>交易性：<ul><li>反应客户对企业做出的回馈数据，包括<strong>历史购买记录数据</strong>、投诉数据、请求提供咨询及其他服务的相关数据、<strong>客户建议数据</strong>等，如何有效的采取客户数据。</li></ul></li></ul><blockquote><p>考点一:能够区分这几个性质。</p><p>考点二：重点是促销性和交易性，促销性是客服人员的建议数据，交易性是客户建议数据。</p></blockquote><h4 id="7、CRM应用的特点（熟悉）"><a href="#7、CRM应用的特点（熟悉）" class="headerlink" title="7、CRM应用的特点（熟悉）"></a>7、CRM应用的特点（熟悉）</h4><ol><li>可伸缩性：<ol><li>可扩展</li><li>可伸缩</li></ol></li><li>可移植性：<ol><li>可复用</li><li>可移植</li></ol></li></ol><blockquote><p>考点：记住CRM应用的特点：可伸缩，可移植。</p></blockquote><h4 id="8、数据挖掘（了解）"><a href="#8、数据挖掘（了解）" class="headerlink" title="8、数据挖掘（了解）"></a>8、数据挖掘（了解）</h4><ol><li>完整的数据挖掘过程包括：<ol><li>数据的清理与集成</li><li>数据的选择与变换</li><li>数据挖掘</li><li>知识评估与表示</li></ol></li><li>数据挖掘的直接对象包括：<ol><li>关系数据库（<em>如果考题中选项改为非关系型数据库，则是错的。</em>）</li><li>数据仓库（<em>如果选项中改为数据库，则是错误的。</em>）</li><li>事务数据库（<em>事物，OLTP，如果这里改为分析数据库，OLAP，则是错误的</em>。）</li><li>新型的高级数据库（<em>如果考题中改为新型的数据库，则为错误的。</em>）</li></ol></li><li>数据挖掘的任务，可以把数据挖掘的任务分为两项：<ol><li>描述</li><li>分类和预测</li></ol></li></ol><blockquote><p>考点：注意数据挖掘直接对象：关系数据库、数据仓库、事务数据库、新型的高级数据库，注意上面括号中的挖坑项。</p></blockquote><h4 id="9、SCM供应链管理（供应链就是采购）（熟悉）"><a href="#9、SCM供应链管理（供应链就是采购）（熟悉）" class="headerlink" title="9、SCM供应链管理（供应链就是采购）（熟悉）"></a>9、SCM供应链管理（<em>供应链就是采购</em>）（熟悉）</h4><ol><li>供应链三个阶段：<ol><li>初级萌芽阶段</li><li>形成阶段</li><li>成熟阶段</li></ol></li><li>供应链管理是<strong>以客户为中心的集成化管理、扩展性管理、合作管理、多层次管理</strong>，具体分类如下：<ol><li>供应链按照管理对象分类：<ol><li>企业供应链</li><li>产品供应链</li><li>基于供应链契约的供应链</li></ol></li><li>供应链按照网络结构特点分类：<ol><li>V型</li><li>A型</li><li>T型</li></ol></li><li>供应链按照产品类别分类：<ol><li>功能型</li><li>创新型</li></ol></li></ol></li><li>敏捷供应链系统：通过<strong>CORBA、Web和代理技术</strong>的结合应用来解决异构平台之间的异地合作问题。</li></ol><ul><li>供应链的5个特点：<ul><li>交叉性</li><li>动态性</li><li>存在核心企业</li><li>复杂性</li><li>面向用户</li></ul></li></ul><blockquote><p>考点：熟记概念，供应链的特点大概意思，如，错乱复杂就是交叉性、实时性就是动态性。</p></blockquote><h4 id="10、供应链系统设计原则（熟悉）"><a href="#10、供应链系统设计原则（熟悉）" class="headerlink" title="10、供应链系统设计原则（熟悉）"></a>10、供应链系统设计原则（熟悉）</h4><ol><li>供应链系统设计原则：<ol><li><strong>自顶向下和自底向上相结合的设计原则。（<em>注意，这里一定是自顶向下和自底向上相结合的原则，单独自顶向下或者是自底向上的原则是错误的。</em>）</strong></li><li>简洁性原则</li><li>取长补短原则</li><li>动态性原则</li><li>合作性原则</li><li>创新性原则</li><li>战略性原则</li></ol></li></ol><blockquote><p>考点：重点记住第一句，自顶向下和自底向上相结合的原则，单独的自底向上或者自顶向下的原则是错误的。</p></blockquote><h4 id="11、电子商务（掌握）"><a href="#11、电子商务（掌握）" class="headerlink" title="11、电子商务（掌握）"></a>11、电子商务（掌握）</h4><ol><li>原始电子商务：使用电子信息技术工具进行商务活动。凡使用了诸如电报、电话、广播、电视、传真以及计算机、计算机网络等手段、工具和技术进行商务活动，都可以称之为电子商务。</li><li>现代电子商务：电子商务通常是指在网络环境下，<strong>买卖双方不需要见面，实现网上（线上）交易、在线支付（或者货到付款）、智能配送以及相关综合服务的一切活动</strong>，是完全创新的或者在一定程度上模拟传统商务流程的一种以信息化手段应用为典型特征的商业运营模式。</li><li><strong>EDI（电子数据交换）</strong>：<strong>是连接原始电子商务和现代电子商务的纽带。</strong></li><li><strong>电子商务的特征：</strong><ol><li>普遍性：可应用于各个行业。</li><li>便利性：不受区域、环境、时间限制。</li><li>整体性：有完整的人工、电子信息处理流程。</li><li>安全性：进行加密、身份认证、数字签名等。</li><li>协调性：企业与企业、企业与客户等方面相互协调。</li></ol></li></ol><blockquote><p>考点：理解记忆，电子商务特点：普遍性、便利性、整体性、安全性、协调性。</p></blockquote><h4 id="12、电子商务（掌握）"><a href="#12、电子商务（掌握）" class="headerlink" title="12、电子商务（掌握）"></a>12、电子商务（掌握）</h4><ul><li>电子商务按照依托网络类型划分：EDI（电子数据交换）商务、Internet（互联网）商务、Intranet（企业内部网）商务、Extranet（企业外部网）商务。</li><li>加快电子商务发展的基本原则：<ul><li><strong>企业主体、政府推进。</strong></li><li>统筹兼顾、虚实结合。</li><li>着力创新、注重时效。</li><li>规范发展、保障安全。</li></ul></li><li>电子商务类型：<ul><li>B2B：企业——企业</li><li>B2C：企业——消费者</li><li>C2C：消费者——消费者</li><li>O2O：线上——线下</li></ul></li><li><strong>商务类型举例：（重点）</strong><ul><li>B2G（企业——政府）：政府采购企业产品。</li><li>C2B（消费者——企业）：IT独立咨询工程师为企业提高咨询服务。</li><li>B2B（企业——企业）：阿里巴巴。</li><li>B2C（企业——消费者）：京东、当当、苏宁、天猫、<strong>抖音</strong>。（<em>天猫和淘宝区别，天猫属于企业认定，淘宝可以个人开淘宝店</em>）</li><li>C2C（消费者——消费者）：淘宝、闲鱼、拼多多、易趣。</li><li>O2O（线上——线下）：外卖餐厅、院线影音。</li></ul></li></ul><blockquote><p>考点一：熟悉概念</p><p>考点二：电子商务类型。B2B：企业——企业、B2C：企业——消费者、C2C：消费者——消费者、O2O：线上——线下。          </p><blockquote><p>如果题目将的是A公司对B公司~，那就是B2B</p><p>如果题目讲的是小明对小强~，那就是C2C</p><p>如果题目说的是公司、对小明~，那就是B2C</p><p>如果题目说的是线上对线下~，那就是O2O</p></blockquote><p>考点三：理解记忆商务类型举例。</p></blockquote><h4 id="13、电子商务结构（掌握）"><a href="#13、电子商务结构（掌握）" class="headerlink" title="13、电子商务结构（掌握）"></a>13、电子商务结构（掌握）</h4><ul><li>网络基础设施<ul><li>远程通信网、有线电视网、无线电通信网和Internet</li></ul></li><li>多媒体内容和网络出版的基础设施<ul><li>HTML、JAVA、全球Web</li></ul></li><li>报文和信息传播的基础设施<ul><li>电子邮件系统、在线交流系统、基于HTTP或HTTPS的信息传输系统、流媒体系统</li></ul></li><li>商业服务的基础设施<ul><li>商品目录和价格目录、电子支付网关、安全认证</li></ul></li></ul><blockquote><p>考点一：考题会给出，比如电子邮件系统属于哪个设施？——&gt; 报文和信息传播的基础设施</p><p>考点二：多媒体内容和网络传播的基础设施不包括哪个？  A：JAVA     B:HTML     C:WEB    D:HTTP             答案选D   HTML 属于报文和信息传播的基础设施。</p><p>类似题目，需要记住</p></blockquote><h3 id="1-5、商业智能"><a href="#1-5、商业智能" class="headerlink" title="1.5、商业智能"></a>1.5、商业智能</h3><h4 id="1、概念及步骤（熟悉）"><a href="#1、概念及步骤（熟悉）" class="headerlink" title="1、概念及步骤（熟悉）"></a>1、概念及步骤（熟悉）</h4><ul><li>商业智能（BI）：通常被理解为将组织中现有的<strong>数据转换为知识，</strong>帮助组织做出明智的<strong>业务经营决策。</strong></li><li>这里所谈的数据包括来自组织业务系统的订单、库存、交易账目、客户和供应商等方面的数据，来自组织所处行业和竞争对手的数据以及来自组织所处的其他外部环境中的各种数据。而商业智能能够辅助组织的业务经营决策，既可以是操作层的，也可以是战术层和战略层的决策。</li><li>为了将数据转换为知识，需要利用<strong>数据仓库、联机分析处理（OLAP）工具和数据挖掘等技术。</strong></li><li>从技术层面上讲，<strong>商业智能不是什么新技术，它只是数据仓库、OLAP和数据挖掘等技术的综合运用。</strong></li><li><strong>商业智能一般由数据仓库、联机分析处理（OLAP）、数据挖掘、数据备份和恢复等部分组成。</strong>（<em>这里注意考题很可能把数据仓库改为数据库，就是错的，或者会把OLAO（系统分析处理）改为OLTP（事务处理），就是错的。      这里一定是商业智能由数据仓库、联机分析处理（OLAP）、数据挖掘、数据备份和恢复等部分组成。</em>）</li><li><strong>商业智能六个步骤：</strong><ul><li><strong>需求分析——&gt;数据仓库建模——&gt;数据抽取——&gt;建立商业智能分析报表——&gt;用户培训和数据模拟测试——&gt;系统改进和完善</strong></li><li>12个字总结商业智能步骤顺序：<strong>分析建模    抽取报表    测试改进</strong></li></ul></li></ul><blockquote><p>考点一：商业智能是由 数据仓库、OLAP、数据挖掘、数据备份和恢复等部分组成，注意上面括号中备注的挖坑点。</p><p>考点二：商业智能的六个步骤：分析建模   抽取报表   测试改进   ，要记住顺序</p></blockquote><h4 id="2、4个功能3个层次（重点掌握）"><a href="#2、4个功能3个层次（重点掌握）" class="headerlink" title="2、4个功能3个层次（重点掌握）"></a>2、4个功能3个层次（重点掌握）</h4><ul><li><strong>商业智能的四个功能：（<em>数据仓库、数据ETL、数据统计输出（报表）、分析功能</em>）</strong><ul><li><strong>数据仓库</strong>：实现高效访问，<strong>提供结构化和非结构化数据存储。</strong></li><li><strong>数据ETL：支持多平台、多种数据存储格式。</strong>（<em>数据ETL：将数据从来源端经过抽取（extract）、转换（transform）、加载（load）至目的端的过程</em>）</li><li><strong>数据统计输出（报表）：包括统计数据表样式和统计图展示。</strong></li><li><strong>分析功能：有一定的交互要求，支持多维度OLAP。</strong></li></ul></li><li><strong>商业智能的三个层次：（<em>分析、报表、挖掘</em>）</strong><ul><li>多维数据<strong>分析</strong></li><li>数据<strong>报表</strong></li><li>数据<strong>挖掘</strong></li></ul></li></ul><blockquote><p>考点一：记住商业智能的四个层次：数据仓库、数据ETL、数据统计输出（报表）、分析功能。         商业智能的三个层次：多维数据分析、数据报表、数据挖掘</p><p>技巧：重点记住商业智能的三个层次：分析、报表、挖掘        就可以区分商业智能的三个层次和四个功能了</p></blockquote><h4 id="3、OLAP（掌握）"><a href="#3、OLAP（掌握）" class="headerlink" title="3、OLAP（掌握）"></a>3、OLAP（掌握）</h4><ul><li><strong>OLAP有多种实现方式，根据存储数据的方式不同可以分为ROLAP、MOLAP、HOLAP。</strong><ul><li><strong>ROLAP：表示基于关系数据库的OLAP实现。</strong>以关系数据库为核心，以关系型结构进行多维数据的表示和存储。</li><li><strong>MOLAP：表示基于多维数据组织的OLAP实现</strong>，以多维数据组织方式为核心，MOLAP使用多维数组方式存储数据。</li><li><strong>HOLAP：表示基于混合数据组织的OLAP实现</strong>，如底层是关系型的，高层是多维矩阵型的，这种方式具有更好的灵活性。</li></ul></li><li>主流的商业智能工具包括BO、COGNOS和BRIO。一些国内软件的工具平台如KCOM也集成了些基本的商业智能工具。</li></ul><blockquote><p>考点一：记住OLAP有多种实现方式，根据存储方式的不同可以分为ROLAP、MOLAP、HOLAP。</p><blockquote><p>ROLAP：基于关系数据库的OLAP实现</p><p>MOLAP：基于多维数据组织的OLAP实现</p><p>HOLAP：基于混合组织的OLAP实现</p></blockquote></blockquote><hr><h2 id="第二章、信息系统集成及服务管理"><a href="#第二章、信息系统集成及服务管理" class="headerlink" title="第二章、信息系统集成及服务管理"></a>第二章、信息系统集成及服务管理</h2><ul><li>主要考点<ul><li>ITSS（信息技术服务标准）</li><li>信息系统审计</li></ul></li><li><strong>ITSM含义：IT服务管理：是一套帮助企业IT系统的规划、研发、实施和运营进行有效管理的方法，是一套方法论。</strong></li></ul><h3 id="1、信息系统集成及服务管理体系（了解）"><a href="#1、信息系统集成及服务管理体系（了解）" class="headerlink" title="1、信息系统集成及服务管理体系（了解）"></a>1、信息系统集成及服务管理体系（了解）</h3><h4 id="1-1、信息系统集成及服务管理体系，主要内容"><a href="#1-1、信息系统集成及服务管理体系，主要内容" class="headerlink" title="1.1、信息系统集成及服务管理体系，主要内容"></a>1.1、信息系统集成及服务管理体系，主要内容</h4><ol><li>信息系统集成、运维服务和信息系统监理<strong>资质管理</strong>。</li><li>信息系统集成、运维服务和信息系统监理相关<strong>人员管理</strong>。</li><li>国家计划（投资）部门对规范的、具备信息系统项目管理能力的企业和人员的<strong>建议性要求</strong>。</li><li>信息系统用户对规范的、具备信息系统项目管理能力的企业和人员<strong>市场性需求</strong>。</li></ol><h4 id="1-2、IT服务管理的核心思想（了解）"><a href="#1-2、IT服务管理的核心思想（了解）" class="headerlink" title="1.2、IT服务管理的核心思想（了解）"></a>1.2、IT服务管理的核心思想（了解）</h4><ul><li>IT服务管理ITSM的核心思想是，IT组织，不管它是企业内部的还是外部的，都是IT服务提供者，<strong>其主要工作就是提供低成本、高质量的IT服务</strong>。ITSM也是一种IT管理。不过与传统的IT管理不同，它是一种<strong>以服务为中心的IT管理。</strong>它结合了<strong>过程、人员和技术三大要素，</strong>通过提成IT服务和业务，帮助企业提高其IT服务提供和支持能力。</li><li><strong>ITSM要把IT部门从成本中心转为服务中心和利益中心，由以职能为中心转为流程为中心。</strong></li><li><strong>实施ITSM</strong>的根本目标有以下三个：<ul><li><strong>以客户为中心提供IT服务。</strong></li><li><strong>提供高质量、低成本的服务。</strong></li><li><strong>提供的服务是可准确计价的。</strong></li></ul></li></ul><h4 id="1-3、ITSM基本原理（了解）"><a href="#1-3、ITSM基本原理（了解）" class="headerlink" title="1.3、ITSM基本原理（了解）"></a>1.3、ITSM基本原理（了解）</h4><ul><li>ITSM的基本原理可以简单地用“<strong>二次转换</strong>”来概括，<strong>技术——&gt;流程——&gt;服务</strong><ul><li><strong>首先技术管理转换为流程管理。</strong>（<em>流程管理包括：服务级别管理、事件管理、问题管理等</em>）</li><li><strong>然后流程管理转换为服务管理。</strong></li></ul></li></ul><h4 id="1-4、IT服务管理补充（了解）"><a href="#1-4、IT服务管理补充（了解）" class="headerlink" title="1.4、IT服务管理补充（了解）"></a>1.4、IT服务管理补充（了解）</h4><ul><li>服务级别协议（SLA）：<strong>是指提供服务的企业与客户之间就服务的品质、水准、性能等方面所达成的双方共同认可的 协议或契约。</strong></li><li>典型的服务级别协议包括下列内容：<ul><li>参与各方对所提供服务及协议<strong>有效期限的规定。</strong></li><li>服务提供期间的<strong>时间规定</strong>，包括测试、维护和升级。</li><li>对<strong>用户数量、地点</strong>以及或提供的相应硬件的服务的规定。</li><li>对故障报告流程的说明，包括故障升级到更高水平支持的条件。应包括<strong>对故障报告期望的应答时间的规定</strong>。</li><li>对<strong>变更请求流程的说明。</strong>可能包括完成例行的变更请求的期望时间。</li><li>对服务<strong>级别目标</strong>的规定，与<strong>服务相关的收费</strong>规定。</li><li>用户责任的规定（用户培训、确保正确的桌面配置、没有不必要的软件、没有妨碍变更管理流程等）。</li><li>对解决与服务相关的不同意见的流程说明。</li></ul></li><li>IT服务管理：<ul><li>服务台：建立统一运维服务的入口。</li><li>事件管理：解决出现的突发事件（报警、通知、通常是故障触发），保证IT系统正常稳定。</li><li>问题管理：分析事件，找到根本原因和最终解决方案，防止事件再次发生；消除及减少事件发生的概率和严重程度。</li><li>变更管理：以受控的方式，确保所有变更得到评估、批准、实施和评审。</li><li>配置管理：定义和控制服务与基础设施的部件，并保持准确的配置信息。</li><li>发布管理：在实际运行环境的发布中，交付、分发并跟踪一个或多个变更。</li></ul></li></ul><hr><h3 id="2、ITSS（信息技术服务标准）"><a href="#2、ITSS（信息技术服务标准）" class="headerlink" title="2、ITSS（信息技术服务标准）"></a>2、ITSS（信息技术服务标准）</h3><h4 id="2-1、ITSS（信息技术服务标准）组成要素（掌握）"><a href="#2-1、ITSS（信息技术服务标准）组成要素（掌握）" class="headerlink" title="2.1、ITSS（信息技术服务标准）组成要素（掌握）"></a>2.1、ITSS（信息技术服务标准）组成要素（掌握）</h4><ul><li>ITSS（信息技术服务标准）组成要素：<strong>IT服务由 人员（People）、流程（Process）、技术（Technology）和资源（Resource）组成，简称PPTR</strong>。并对这些IT服务的组成要素进行标准化。对这四个要素及其关系可以概括为：<strong>正确选择人员遵从过程规范，正确使用技术，并合理利用资源，向客户提供IT服务。</strong></li><li>ITSS（信息技术服务标准）四要素：<ul><li><strong>人员：提供IT服务所需的人员及其知识、经验和技能要求<em>【正确选人】</em></strong></li><li><strong>流程：提供IT服务时，合理利用必要的资源，将输入转化为输出的一组相互关联和结构化的活动<em>【正确做事】</em></strong></li><li><strong>技术：交付满足质量要求的IT服务应使用的技术或应具备的技术能力<em>【高效做事】</em></strong></li><li><strong>资源：提供IT服务所依从和产生的有形及无形资产<em>【保障做事】</em></strong></li></ul></li></ul><blockquote><p>考点一：ITSS（信息技术服务标准）的四个组成要素：人员、流程、技术、资源，要牢记，及每个组成的描述。</p></blockquote><h4 id="2-2、IT服务生命周期（掌握）"><a href="#2-2、IT服务生命周期（掌握）" class="headerlink" title="2.2、IT服务生命周期（掌握）"></a>2.2、IT服务生命周期（掌握）</h4><ol><li><strong>规划设计</strong>：从客户业务战略出发，以<strong>需求为中心</strong>，参照ITSS对IT服务进行全面系统的战略规划和设计，为IT服务的部署实施做好准备，以确保提供满足客户需求的IT服务。</li><li><strong>部署实施</strong>：在规划设计基础上，依据ITSS建立管理 体系、部署专用工具及服务解决方案。</li><li><strong>服务运营</strong>：根据服务部署情况，依据ITSS，采用过程方法，全面管理基础设施、服务流程、人员和业务连续性，<strong>实现业务运营与IT服务运营融合。</strong></li><li><strong>持续改进：</strong>根据服务运营的实际情况，定期评审IT服务满足业务运营的情况，以及<strong>IT服务本身存在的缺陷，提出改进策略和方案，</strong>并对IT服务进行重新规划设计和部署实施，以提供IT服务质量。</li><li><strong>监督管理：</strong>依据ITSS对IT服务服务质量进行评价，并对服务供方的服务过程、交付结果实施<strong>监督和绩效评估。</strong></li></ol><blockquote><p>考点一：IT服务的五个生命周期顺序要牢记。规划设计、部署实施、服务运营、持续改进、监督管理。</p><p>【2018上半年】信息技术服务标准（ITSS）的核心要素由人员、过程、技术、资源组成。（B）要素关注“正确做事”。    A：人员   B：过程      C：技术     D：资源</p><p>【2018下半年】信息技术服务标准（ITSS）是一套成体系和综合配套的标准库，用于指导实施标准化和可信赖的IT服务，ITSS定义的IT服务生命周期不包括（A）。     A：战略部署        B：规划设计       C：部署实施         D：服务运营</p><p>【2019上半年】信息技术服务标准（ITSS）的IT服务生命周期模型中（B）是在规划设计基础上依据ITSS监理管理体系提供服务解决方案。       A：服务战略      B：服务实施      C：服务运营           D：监督管理</p></blockquote><hr><h3 id="3、信息系统审计"><a href="#3、信息系统审计" class="headerlink" title="3、信息系统审计"></a>3、信息系统审计</h3><h4 id="3-1、信息系统审计（掌握）"><a href="#3-1、信息系统审计（掌握）" class="headerlink" title="3.1、信息系统审计（掌握）"></a>3.1、信息系统审计（掌握）</h4><ul><li><p><strong>信息系统审计的目的是评估并提取反馈、保证及建议。</strong></p></li><li><p>其关注之处可被分为如下三类：</p><ul><li><strong>可用性：</strong>商业高度依赖的 信息系统能否在任何需要的时刻提供服务？信息系统是否被完好保护以应对各种损失和灾难？</li><li><strong>保密性：</strong>系统保存的信息是否只对需要这些信息的人员开发，而不对其他任何人开发？</li><li><strong>完整性：</strong>信息系统提供的信息是否始终保持正确、可信、及时？能否防止未授权的对系统数据和软件的修改 ？</li></ul></li></ul><blockquote><p>考点：记住信息系统审计的目的。  评估并提取反馈、保证及建议。    记住信息系统审计的三类性质：可用性、保密性、完整性。</p><p>【2016下半年】信息系统审计的目的是评估并提供反馈、保证和建议。其关注之处可分为三类，分别是什么？</p><blockquote><p>答案：可用性、保密性、完整性</p></blockquote></blockquote><h4 id="3-2、信息系统审计的主要组成（掌握）"><a href="#3-2、信息系统审计的主要组成（掌握）" class="headerlink" title="3.2、信息系统审计的主要组成（掌握）"></a>3.2、信息系统审计的主要组成（掌握）</h4><ol><li>一个信息系统审计的主要组成部分包括6个方面：<ol><li><strong>信息系统的管理、规划与组织：</strong>评价信息系统的管理、计划与组织方面的策略、政策、标准、程序和相关业务。</li><li><strong>信息系统技术基础设施与操作实务：</strong>评价组织在技术与操作基础设施的管理和实施方面的有效性及效率，以确保其充分支持组织的商业目标。</li><li><strong>资产的保护：</strong>对逻辑、环境与信息技术基础设施的安全性进行评价，确保其能进行组织保护信息资产的需要，防止信息资产在未经授权的情况下被 使用、披露、修改、损坏或丢失。</li><li><strong>灾难恢复与业务持续计划：</strong>这些计划是在发生灾难时，能够使组织持续进行业务，对这种计划的建立和维护流程需要进行评价。</li><li><strong>应用系统开发、获得、实施与维护：</strong>对应用系统的开发、获得、实施与维护方面所采用的方法和流程进行评价，以确保其满足组织的业务目标。</li><li><strong>业务流程评价与风险管理：</strong>评价业务系统与处理流程，确保根据组织的业务目标对相应风险实施管理。</li></ol></li></ol><blockquote><p>考点：记住信息系统审计的主要六个组成包括：1.信息系统的管理、规划与组织，2、信息系统技术基础设施与操作实施，3.资产的保护，4.灾难恢复与业务持续计划，5应用系统开发、获得、实施与维护，6.业务流程评价与风险管理。</p></blockquote><h4 id="3-3、信息系统审计的依据（掌握）"><a href="#3-3、信息系统审计的依据（掌握）" class="headerlink" title="3.3、信息系统审计的依据（掌握）"></a>3.3、信息系统审计的依据（掌握）</h4><ol><li>信息系统审计依据包括三方面：<ol><li>一般公认信息系统审计准则。包括<strong>职业准则、ISACA（信息系统审计与控制协会）公告和职业道德规范。</strong></li><li>信息系统的控制目标 。</li><li>其他法律及规定。政府和外部的有关规定和要求。</li></ol></li></ol><blockquote><p>【2018上半年】一般公认信息系统审计原则不包括（D）。     A：ISACA公告                B：ISACA公告职业准则                            C：ISACA职业道德规范                      D：COBIT框架</p></blockquote><h4 id="3-4、基于风险方法审计的步骤（掌握）"><a href="#3-4、基于风险方法审计的步骤（掌握）" class="headerlink" title="3.4、基于风险方法审计的步骤（掌握）"></a>3.4、基于风险方法审计的步骤（掌握）</h4><ul><li>基于风险方法来进行审计的步骤：<strong>编制——&gt;决定——&gt;评估——&gt;分级</strong></li></ul><ol><li><strong>编制</strong>组织使用的信息系统清单并对其进行分类。</li><li><strong>决定</strong>哪些系统影响关键功能和资产。</li><li><strong>评估</strong>那些风险影响这些 系统及对商业运作的冲击。</li><li>在上述评估的基础上对系统<strong>分级</strong>，决定审计优先值、资源、进度和频率。审计者可以制定年度审计计划，开列出一年之中要 进行的审计项目。</li></ol><blockquote><p>考点：牢记基于风险方法进行信息系统审计的步骤：编制——&gt;决定——&gt;评估——&gt;分级</p><p>【2018下半年】针对信息系统审计流程，在了解内部控制结构、评价控制风险、传输 内部控制后，下一步应当进行（C）。      A：有限的实质性 测试                    B：外部控制测试                  C：内部控制测试                   D：扩大的实质性测试</p></blockquote><h4 id="3-5、信息系统工程监理活动（了解）"><a href="#3-5、信息系统工程监理活动（了解）" class="headerlink" title="3.5、信息系统工程监理活动（了解）"></a>3.5、信息系统工程监理活动（了解）</h4><ul><li>信息系统工程监理活动的主要内容：<strong>“四控、三管、一协调”。</strong><ul><li>四控：质量控制、进度控制、投资控制、变更控制。</li><li>三管：合同管理、信息管理、安全管理。</li><li>一协调：在信息系统工程实施过程中协调有关单位及人员间的 工作 关系。</li></ul></li><li>工程管理三方：<strong>建设方、承建方、监理方</strong>。</li></ul><blockquote><p>四控：质量控制、进度控制、投资控制、变更控制。                三管：合同管理、安全管理、信息管理                                        </p></blockquote><hr><h2 id="第三章、信息系统集成专业技术知识"><a href="#第三章、信息系统集成专业技术知识" class="headerlink" title="第三章、信息系统集成专业技术知识"></a>第三章、信息系统集成专业技术知识</h2><ul><li>本章考试分值（15分）</li><li>主要考点：<ul><li>信息系统的生命周期</li><li>信息系统开发方法</li><li>设备、DBMS及技术选型</li><li>软件需求</li><li>软件设计</li><li>软件测试</li><li>软件维护</li><li>软件复用</li><li>软件质量保证及质量评价</li><li>软件配置管理</li></ul></li></ul><h3 id="1、信息系统的生命周期（掌握）"><a href="#1、信息系统的生命周期（掌握）" class="headerlink" title="1、信息系统的生命周期（掌握）"></a>1、信息系统的生命周期（掌握）</h3><ul><li>在第一章讲过。</li></ul><h3 id="2、信息系统开发方法（掌握）"><a href="#2、信息系统开发方法（掌握）" class="headerlink" title="2、信息系统开发方法（掌握）"></a>2、信息系统开发方法（掌握）</h3><ul><li><strong>信息系统常用的开发方法有：结构化方法、原型法、面向对象方法。</strong></li></ul><blockquote><p>考点：给出描述，判断是哪个系统开发方法。</p></blockquote><h4 id="2-1、结构化方法（掌握）"><a href="#2-1、结构化方法（掌握）" class="headerlink" title="2.1、结构化方法（掌握）"></a>2.1、结构化方法（掌握）</h4><ul><li>结构化方法：是应用最为广泛的一种开发方法。应用结构化系统开发方法，<strong>把整个系统的开发过程分为若干阶段，然后依次进行，前一阶段是后一阶段的工作依据，按顺序完成。每个阶段和主要步骤都有明确详尽的文档编制要求，并对其进行有效控制。</strong></li><li>结构 化特点是注重<strong>开发过程的整体性和全局性。但其缺点是开发周期长；文档、设计说明繁琐，工作效率低；要求在开发之初全面认识系统的需求，充分预料各种可能发生的变化，</strong>但这并不十分现实。</li><li><strong>结构化方法特点：</strong><ul><li><strong>1.遵循用户至上原则。</strong></li><li><strong>2.严格区分工作阶段，每个阶段有明确的任务和取得的成功。</strong></li><li><strong>3.强调系统开发过程的整体性和全局性。</strong></li><li><strong>4.系统开发过程工程化，文档资料标准化。</strong></li></ul></li></ul><h4 id="2-2、原型法（掌握）"><a href="#2-2、原型法（掌握）" class="headerlink" title="2.2、原型法（掌握）"></a>2.2、原型法（掌握）</h4><ul><li><strong>原型法</strong>：其认为在无法全面准确地提出用户需求的情况下，并不要求对系统做全面、详细的分析，而是基于对用户需求的初步理解，<strong>先快速开发一个原型系统，然后通过反复修改来实现用户的最终系统需求。</strong></li><li><strong>原型法的特点：对用户的需求是动态响应、逐步纳入的；系统分析、设计与实现都是随着对原型的不断修改而同时完成的，相互之间并无明显界限，也没有明确分工。</strong></li><li><strong>原型法可分为：抛弃式原型和演化式原型。</strong><ul><li>抛弃式原型：抛弃式原型也称为探索式原型，是指达到预期目的后，原型本身被抛弃。抛弃式原型主要用在解决需求不确定性、二义性、不完整性、含糊性等。</li><li>演化式原型为开发增量式产品提供基础，逐步将原型演化成最终系统。主要用在必须易于升级和优化的场合，特别适用于Web项目。</li></ul></li></ul><h4 id="2-3、面向对象方法（掌握）"><a href="#2-3、面向对象方法（掌握）" class="headerlink" title="2.3、面向对象方法（掌握）"></a>2.3、面向对象方法（掌握）</h4><ul><li>面向对象方法：用对象表示客观事物，对象是一个严格模块化的实体，在系统开发中可被共享和重复引用，以达到复用的目的。其关键是能否建立一个全面、合理、统一的模型，既能反映需求对应的问题域，也能被计算机系统对应的求解域所接受。</li><li>面向对象方法主要涉及<strong>分析、涉及和实现</strong>三个阶段。其特点是在整个开发过程中使用的是同一套工具。整个开发过程实际上都是面向对象三种模型的建立、补充和验证。因此，其分析、设计和实现三个阶段的界限并非十分明确。</li></ul><h4 id="2-4、信息系统设计（了解）"><a href="#2-4、信息系统设计（了解）" class="headerlink" title="2.4、信息系统设计（了解）"></a>2.4、信息系统设计（了解）</h4><ul><li>信息系统设计是开发阶段的重要内容，其主要内容是从信息系统的<strong>总体目标出发，</strong>根据系统逻辑功能的要求，并结合经济、技术条件、运行环境和进度等要求，确定系统的总体架构和系统各组成部分的技术方案，合理选择计算机、通信及存储的软、硬件设备，制定系统的实施计划。</li></ul><h4 id="2-5、系统方案设计（重点掌握）"><a href="#2-5、系统方案设计（重点掌握）" class="headerlink" title="2.5、系统方案设计（重点掌握）"></a>2.5、系统方案设计（重点掌握）</h4><ul><li>系统方案设计包括<strong>总体设计和各部分的详细设计（物理设计）</strong>两个方面：<ul><li><strong>系统总体设计：包括系统的总体架构方案设计、软件系统的总体架构设计、数据存储的总体设计、计算机和网络系统的方案设计等。</strong></li><li><strong>系统详细设计：包括代码设计、数据库设计、人/机界面设计、处理过程设计等。</strong></li></ul></li></ul><blockquote><p>考点：需要牢记</p><p>【2018下半年】系统方案设计包括总体设计和详细设计，系统的总体设计内容包括（A）                       A：计算机和网络系统的方案设计                        B：人/机界面设计                       C：处理过程设计                             D：数据库设计</p></blockquote><h4 id="2-6、系统架构（掌握）"><a href="#2-6、系统架构（掌握）" class="headerlink" title="2.6、系统架构（掌握）"></a>2.6、系统架构（掌握）</h4><ul><li><strong>系统架构是将系统整体分解为更小的子系统和组件，从而形成不同的逻辑层或服务。之后，进一步确定各层的接口，层与层之间的相互关系。</strong></li><li><strong>对整个系统的分解，既需要“纵向”分解，也需要对同一逻辑层分块，进行“横向”分解；</strong></li><li><strong>系统的选型主要取决于系统架构。</strong></li></ul><h4 id="2-7、设备、DBMS及技术选型（掌握）"><a href="#2-7、设备、DBMS及技术选型（掌握）" class="headerlink" title="2.7、设备、DBMS及技术选型（掌握）"></a>2.7、设备、DBMS及技术选型（掌握）</h4><ul><li>在系统设计中进行设备、DBMS（数据库管理系统）及技术选型时，<strong>不仅要考虑系统的功能要求，还要考虑到系统实现的内外环境和主客观要求。</strong></li><li>在选型时，需要权衡各种可供选用的计算机硬件技术、软件技术、数据管理技术、数据通信技术和计算机网络技术及相关产品。同时，<strong>必须考虑用户的使用要求、系统运行环境、现行的信息管理和信息技术的标准、规范及有关法律制度等。</strong></li></ul><blockquote><p>考点：</p><p>【2018上半年】关于信息系统设计的描述，正确的是（C）。                   A：人机界面设计是系统概要设计的任务之一。                                B：确定系统架构时，要对整个系统进行“纵向”分解，而不是“横向”分解。                     C：系统架构设计对设备选型起决定作用                                         D：设备选型与法律制度无关</p></blockquote><h4 id="2-8、软件需求（掌握）"><a href="#2-8、软件需求（掌握）" class="headerlink" title="2.8、软件需求（掌握）"></a>2.8、软件需求（掌握）</h4><ul><li>软件需求是针对待解决问题的特征的描述。所定义的需求必须可以被验证。在资源有限时，可以通过优先级对需求进行权衡。</li></ul><ol><li>通过需求分析：<ol><li><strong>可以检测和解决需求之间的冲突。</strong></li><li><strong>发现系统的边界。</strong></li><li><strong>并详细描述出系统的需求。</strong></li></ol></li></ol><h4 id="2-9、软件需求的三个层次（掌握）"><a href="#2-9、软件需求的三个层次（掌握）" class="headerlink" title="2.9、软件需求的三个层次（掌握）"></a>2.9、软件需求的三个层次（掌握）</h4><ul><li>软件需求的三个层次：<ul><li><strong>业务需求：表示组织或客户高层次的目标。</strong>业务需求通常来自<strong>项目投资人、购买产品的客户</strong>、实际用户的管理者、市场营销部门和产品策划部门。业务需求描述了组织为什么要开发一个系统，即组织希望达到的目标。使用前景和范围文档来记录业务需求，这份文档有时也被称作项目轮廓图或市场需求文档。</li><li><strong>用户需求：描述的是用户的目标，</strong>或用户要求系统必须能完成的任务。</li><li><strong>功能需求：规定开发人员必须在产品中实现的软件功能，</strong>用户利用这些功能来完成任务，满足业务需求。</li></ul></li></ul><h4 id="2-10、软件测试的分类（掌握）"><a href="#2-10、软件测试的分类（掌握）" class="headerlink" title="2.10、软件测试的分类（掌握）"></a>2.10、软件测试的分类（掌握）</h4><ol><li><strong>从是否关心软件内部结构和具体实现的角度划分：白盒测试、黑盒测试、灰盒测试。</strong><ol><li><strong>白盒测试 ：</strong>白盒测试是把程序看成装在一个透明的盒子里，测试者完全了解程序的结构和处理过程。它根据程序的内部逻辑来设计测试用例，检查程序中的逻辑是否都按照预定的要求正确地工作。</li><li><strong>黑盒测试：</strong>黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。在测试中，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。</li><li><strong>灰盒测试：</strong>是介于白盒测试与黑盒测试之间的一种测试，灰盒测试多用于集成测试阶段，不仅关注输出、输入的正确性，同时也关注程序内部的情况，灰盒测试不像白盒那样详细、完整，但有比黑盒测试更关注程序的内部逻辑，常常是通过一些表征性的现象、事件、标志来判断内部的运行状态。</li></ol></li></ol><h4 id="2-11、软件测试的分类（掌握）"><a href="#2-11、软件测试的分类（掌握）" class="headerlink" title="2.11、软件测试的分类（掌握）"></a>2.11、软件测试的分类（掌握）</h4><ol><li><strong>从是否执行程序的角度划分：静态测试和动态测试。</strong><ol><li><strong>静态测试：</strong>是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。</li><li><strong>动态测试：</strong>是指通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率、正确性和健壮性等性能。这种方法由三部分组成：构造测试用例、执行程序、分析程序的输出结果。</li></ol></li></ol><h4 id="2-12、软件测试的分类（掌握）"><a href="#2-12、软件测试的分类（掌握）" class="headerlink" title="2.12、软件测试的分类（掌握）"></a>2.12、软件测试的分类（掌握）</h4><ol><li><strong>从软件开发过程按阶段划分：单元测试、集成测试、确认测试、系统测试、验收测试。</strong><ol><li><strong>单元测试：</strong>比如一个系统可以划分为多个模块，每个模块完成后，单独对模块进行测试。</li><li><strong>集成测试：</strong>讲系统的多个模块集成到一起进行测试。</li><li><strong>确认测试：</strong>验收软件功能是否与用户需求一致。<ol><li>确认测试有分为内部测试和外部测试 ，内部测试：内部确认测试主要由软件开发组织内部按照SRS进行测试。<ol><li>外部测试有分为Alpha测试和Beta测试。<ol><li>Alpha测试：用户在开发环境下进行测试。</li><li>Beta测试：用户在实际使用 环境下进行测试。</li></ol></li></ol></li></ol></li><li><strong>系统测试：</strong>系统测试的对象是完整的、集成的计算机系统，系统测试的目的是在真实系统工作环境下，验证完整的软件配置项能否和系统正确连接，并满足要求。系统测试的技术依据是用户需求或开发合同。</li><li><strong>验收测试：</strong>是部署软件之前的最后一个测试操作。在软件产品完成了单元测试、集成测试、系统测试后，产品发布之前所进行的软件测试活动。它是技术测试的最后一个阶段，也称为交付测试。验收测试的目的是确保软件准备就绪，并且可以最终用户讲其用于执行软件的既定功能和任务。</li></ol></li></ol><h4 id="2-13、软件维护（掌握）"><a href="#2-13、软件维护（掌握）" class="headerlink" title="2.13、软件维护（掌握）"></a>2.13、软件维护（掌握）</h4><ul><li>软件维护：讲软件维护定义为需要提供软件支持的全部活动。这些活动包括在交付前完成的活动，以及交付后完成的活动。交付前完成的活动包括交付后的运行计划和维护计划等。交付后的活动包括软件修改、培训、帮助资料等。</li></ul><ol><li>软件维护有如下类型：<ol><li><strong>更正性维护：</strong>更正交付后发现的错误。</li><li><strong>适应性维护：</strong>使软件产品能够在变化后或变化中的环境中继续使用。</li><li><strong>完善性维护：</strong>改进交付后产品的性能和可维护性。</li><li><strong>预防性维护：</strong>在软件产品中的潜在错误成为实际错误前，检测并更正它们。</li></ol></li></ol><blockquote><p>考点：给出问题描述，能够判断出维护类型。</p><p>【2017下半年】某央企的ERP系统已经稳定运行了3年，为了适应新业务发展的需要，运营团队近期接到数据库系统升级服务的任务，它属于信息系统（B）类型的工作。</p><p>A：   更正性维护                  B：适应性维护                 C：完善性维护                     D：预防性维护</p><p>【2019上半年】某业务系统在运行中因应用程序错误导致业务受影响，事后由维护工程师对该应用程序缺陷进行修复，该维护活动属于（A）。</p><p>A：更正性维护                       B：适应性维护                  C：完善性维护                D：预防性维护</p></blockquote><h4 id="2-14、软件质量保证及质量评价（掌握）"><a href="#2-14、软件质量保证及质量评价（掌握）" class="headerlink" title="2.14、软件质量保证及质量评价（掌握）"></a>2.14、软件质量保证及质量评价（掌握）</h4><ul><li>软件质量指的是软件特性的总和，是软件满足用户需求的能力，即遵从用户需求，达到用户满意。</li><li>软件质量包括<strong>“内部质量”、“外部质量”和“使用质量”三部分。</strong>软件需求定义了软件质量特性，即确认这些特性的方法和 原则。<ul><li>内部质量：可以理解为程序员编写的代码规范性、健壮性等。</li><li>外部质量：理解为对代码测试是否存在bug等。</li><li>使用质量：理解 为使用时是否存在漏洞等。</li></ul></li><li>软件质量管理过程由 许多活动组成，一些活动可以直接发现缺陷，另一些活动则检查活动的价值。其中包括<strong>质量保证过程、验证过程、确认过程、评审过程、审计过程等。</strong><ul><li><strong>软件质量过程</strong>：通过制定计划、实施和完成等活动保证项目生命周期中的软件产品和过程符合其规定的要求。</li><li><strong>验证与确认</strong>：确定某一活动的产品是否符合活动的需求，最终的软件产品是否达到其意图并满足用户需求。<ul><li><strong>验证过程：</strong>试图确保活动的输出产品已经被正确构造，即活动的输出产品满足活动的规范说明。</li><li><strong>确认过程：</strong>则试图确保构造了正确的产品，即产品满足其特定的目标。</li></ul></li><li><strong>评审与审计</strong>：包括管理评审、技术评审、检查、走查、审计等。<ul><li><strong>管理评审：</strong>目的是<strong>监控进展，</strong>决定计划和进度的状态，或评价用于达到目标所用管理方法的有效性。</li><li><strong>技术评审：</strong>目的是<strong>评价软件产品，以确定其对使用意图的适合性。</strong></li><li><strong>软件审计：</strong>目的是提供软件产品和过程对于可应用的规则、标准、指南、计划和流程的<strong>遵从性的独立评价。</strong>审计是正式组织的活动，识别违例情况，并要生成审计报告，采取更正性行动。</li></ul></li></ul></li></ul><blockquote><p>考点：</p><p>【2018上半年】软件质量管理过程由许多活动组成，“确保活动的输出产品满足活动的规范说明是”（B）。</p><p>A：软件确认              B：软件验证                       C：软件评审                         D：软件 审计</p></blockquote><h4 id="2-15、软件开发工具（了解）"><a href="#2-15、软件开发工具（了解）" class="headerlink" title="2.15、软件开发工具（了解）"></a>2.15、软件开发工具（了解）</h4><ol><li>软件需求工具包括需求建模工具和需求追踪工具。</li><li>软件设计工具用于创建和检查软件设计，因为软件设计方法的多样性，这类工具的种类很多。</li><li>软件构造工具包括程序编辑器、编译器和代码生成器、解释器、调试器等。</li><li>软件测试工具包括测试生成器、性能分析工具。测试执行框架、测试评价工具、测试管理工具。</li><li>软件维护工具包括理解工具（如可视化工具 ）和再造工具（如重构工具）。</li><li>软件配置管理工具包括<strong>追踪工具、版本管理工具和发布工具。</strong></li><li>软件工程管理工具包括项目计划与追踪工具 、风险管理工具和度量工具。</li><li>软件工程过程工具包括建模工具、管理工具、软件开发 环境。</li><li>软件质量工具包括检查工具和分析工具。</li></ol><blockquote><p>近几年没怎么考</p><p>【2019上半年】追踪工具、版本管理工具发布属于（c）。</p><p>A：软件需求工具             B：软件测试工具               C：软件配置工具                D：软件构造工具</p></blockquote><h4 id="2-16、软件复用（了解）"><a href="#2-16、软件复用（了解）" class="headerlink" title="2.16、软件复用（了解）"></a>2.16、软件复用（了解）</h4><ul><li>软件复用是指利用已有软件的各种有关知识构造新的软件，以缩减软件开发和维护的费用。</li></ul><hr><h2 id="第四章、项目管理一般知识"><a href="#第四章、项目管理一般知识" class="headerlink" title="第四章、项目管理一般知识"></a>第四章、项目管理一般知识</h2><ol><li>主要考点：（3分）<ol><li>项目的特点/目标</li><li>项目的组织结构</li><li>生命周期阶段特征</li><li>生命周期模型</li><li>项目经理能力/PMO</li><li>5大过程组</li></ol></li></ol><h3 id="1、项目"><a href="#1、项目" class="headerlink" title="1、项目"></a>1、项目</h3><h4 id="1-1、项目目标的概念（掌握）"><a href="#1-1、项目目标的概念（掌握）" class="headerlink" title="1.1、项目目标的概念（掌握）"></a>1.1、项目目标的概念（掌握）</h4><ul><li>项目是为了达到特定的目的，使用一定资源，在确定的期间内，为特定发起人提供独特的产品、服务或成果而进行的一系列相互关联的活动的集合。</li><li>项目目标包括<strong>成果性目标</strong>（满足客户要求的产品、系统、服务或者成果）和<strong>约束性目标</strong>（时间、成本、质量）<ul><li>项目成果性目标指通过项目开发出的满足客户要求的产品、系统、服务或成果，例如：<ul><li>建设一个视频监控系统就是一个项目，建成后的<strong>视频监控系统就是该项目的产品。</strong></li></ul></li></ul></li></ul><h4 id="1-2、项目的目标特性（了解）"><a href="#1-2、项目的目标特性（了解）" class="headerlink" title="1.2、项目的目标特性（了解）"></a>1.2、项目的目标特性（了解）</h4><ol><li>项目的目标特性：<ol><li><strong>项目的目标有不同的优先级</strong></li><li><strong>项目目标有层次性</strong></li></ol></li><li>项目特点：<strong>临时性（有明确的起始和结束时间）、独特性（独有的）、渐进明细（逐步完成的）</strong><ol><li><strong>临时性：****每一个项目都有一个明确的开始时间和结束时间</strong>，指项目是一次性的。</li><li><strong>独特性：</strong>项目要提供某一独特产品，提供独特的服务或成果，没有完全一样的项目。</li><li><strong>渐进明细：</strong>指项目的成果性目标是逐步完成的。因为项目的产品、成果或服务事先不可见，在项目前期只能粗略的进行项目定义，随着项目的进行才能逐渐明朗、完善和精确。这意味着在项目逐渐明细的过程中一定会有修改，产生相应的变更。</li></ol></li></ol><blockquote><p>考点</p><p>【2018上半年】应用软件开发项目执行过程中允许对需求进行适当修改，并对这种变更严格控制，充分体现了项目的（C）特点。</p><p>A：临时性              B：独特性                  C：渐进明细                         D：无形性</p></blockquote><h4 id="1-3、信息系统集成项目的特点（了解）"><a href="#1-3、信息系统集成项目的特点（了解）" class="headerlink" title="1.3、信息系统集成项目的特点（了解）"></a>1.3、信息系统集成项目的特点（了解）</h4><ol><li>信息系统集成项目要以<strong>满足客户和用户的需求</strong>为根本出发。</li><li>客户和用户的需求常常<strong>不够明确、复杂多变，</strong>由此<strong>应加强需求变更管理</strong>以控制风险。</li><li>系统集成不是选择最好的产品的简单行为，而是要选择<strong>最适合用户的需求</strong>和投资规模的产品和技术。</li><li>高技术与高技术的集成。系统集成不是简单的设备供货，系统集成是高技术的集成，它体现更多的是设计、调试与开发，是高技术行为。</li><li>系统工程。系统集成包含技术、管理和商务等方面，是一项<strong>综合性的系统工程。</strong></li><li><strong>项目团队年轻，流动率高。</strong></li><li><strong>强调沟通的重要性。</strong></li></ol><h4 id="1-4、项目经理（掌握）"><a href="#1-4、项目经理（掌握）" class="headerlink" title="1.4、项目经理（掌握）"></a>1.4、项目经理（掌握）</h4><ol><li>项目经理的一般要求：<ol><li>足够的知识。</li><li>丰富的项目管理经验。</li><li>良好的协调和沟通能力。</li><li>良好的职业道德。</li><li>一定的领导和管理能力。</li></ol></li><li>怎样当好一个优秀的项目经理？<ol><li>真正理解项目经理的角色。</li><li>领导并管理项目团队。</li><li>依据项目进展的阶段 ，组织制定详细程度适宜的项目计划，监控计划的执行，根据实际情况、客户要求或其他变更要求对计划的变更进行管理。</li><li>真正理解”一把手工程“。</li><li>注重客户和用户参与。</li></ol></li></ol><h4 id="1-5、项目干系人（了解）"><a href="#1-5、项目干系人（了解）" class="headerlink" title="1.5、项目干系人（了解）"></a>1.5、项目干系人（了解）</h4><ol><li>项目干系人：<ol><li>项目干系人指那些积极参与项目，或者是其利益会受到项目执行的影响或项目结果影响的个人和组织，它们也可能对项目及结果施加影响。</li><li>项目干系人包括：客户和用户、项目经理；执行组织；项目团队成员；项目发起人；项目发起人；职能经理；影响者；项目管理办公室（PMO）。</li><li>项目经理必须管理项目干系人的期望，因为项目干系人经常会有相互不同甚至是冲突目标。通常，解决项目干系人之间不同意见应该以使客户满意为主，<strong>但不要忽略其他项目干系人的要求和期望，应找到对分歧的恰当解决方案，是项目经理的主要挑战。</strong></li></ol></li></ol><h4 id="1-6、事业环境因素（掌握）"><a href="#1-6、事业环境因素（掌握）" class="headerlink" title="1.6、事业环境因素（掌握）"></a>1.6、事业环境因素（掌握）</h4><ol><li>事业环境因素：<ol><li>实施单位的企业文化和组织机构。</li><li>国家标准和行业标准。</li><li>现有的设施和固定资产等。</li><li>实施单位现有的人力资源、人员的专业和技能，人力资源政策，如招聘和解聘的指导方针、员工绩效评估和培训记录等。</li><li>当时的市场状况。</li><li>项目干系人对风险的承受力。</li><li>行业数据库。</li><li>项目管理信息系统（可能是工具，也可能是软件，总之能帮助人们管理项目）。</li></ol></li></ol><h4 id="1-7、组织过程资产（掌握）"><a href="#1-7、组织过程资产（掌握）" class="headerlink" title="1.7、组织过程资产（掌握）"></a>1.7、组织过程资产（掌握）</h4><ol><li>组织过程资产一般包括：【我们需要经常更新组织过程资产，是项目经理可控的，可以裁剪的，一般来源于内部】</li><li>过程和程序：<ol><li>组织的标准过程。</li><li>标准指导方针、模板、工作指南。</li><li>用于满足项目特定 需要的标准过程的修正指南。</li><li>组织的沟通要求，汇报制度。</li><li>项目收尾指南或要求。</li><li>财务控制程序。</li><li>问题和缺陷管理程序。</li><li>变更控制程序。</li><li>风险控制程序。</li><li>批准与发布工作授权程序。</li></ol></li><li>组织过程资产包括：<ol><li>项目档案。</li><li>过程测量数据库。</li><li>经验学习系统。</li><li>问题和缺陷管理 数据库。</li><li>配置管理知识库。</li><li>财务数据库。</li></ol></li></ol><h4 id="1-8、事业环境因素和组织过程资产区分（掌握）"><a href="#1-8、事业环境因素和组织过程资产区分（掌握）" class="headerlink" title="1.8、事业环境因素和组织过程资产区分（掌握）"></a>1.8、事业环境因素和组织过程资产区分（掌握）</h4><ol><li>凡是可裁剪的、可选择的均为组织过程资产；凡是不可以选择的、只能适应的均为事业环境因素。</li><li>凡是带系统的一般均为事业环境因素（比如：工作授权系统、项目管理信息系统）。</li><li>凡是带程序的一般均为组织过程资产（比如：财务控制程序、变更控制程序、风险控制程序）。</li></ol><h4 id="1-9、项目组织结构（掌握）"><a href="#1-9、项目组织结构（掌握）" class="headerlink" title="1.9、项目组织结构（掌握）"></a>1.9、项目组织结构（掌握）</h4><ul><li><p>组织机构分类：</p><ul><li>职能型组织（<em>项目经理权力  &lt; 职能经理</em>）</li><li>矩阵型组织（弱矩阵型组织、平衡矩阵型 组织、强矩阵型组织）<ul><li>弱矩阵型组织：（<em>项目经理权力 &lt; 职能经理</em>）</li><li>平衡矩阵型组织：（<em>项目经理权力 = 职能经理</em>）</li><li>强矩阵型组织：（<em>项目经理 权力 &gt; 职能经理</em>）</li></ul></li><li>项目型组织（<em>项目经理权力 &gt; 职能经理</em>）</li></ul></li><li><p>权力大小排序：<strong>职能型组织 &lt; 弱矩阵型组织 &lt; 平衡矩阵型组织 &lt; 强矩阵型组织 &lt; 项目型组织</strong></p></li></ul><blockquote><p>考点</p><p>【2018下半年】在（A）中，项目经理权力最小。</p><p>​A：弱矩阵型组织                 B：平衡矩阵型组织                    C：强矩阵型组织                         D：项目型组织</p><p>【2019上半年】在（D）组织结构中，项目拥有独立的项目团队，项目经理在调用与项目相关的资源时不需要向部门经理汇报。</p><p>A：职能型                    B：平衡矩阵型                C：强矩阵型                  D：项目型</p></blockquote><h4 id="1-10、PMO项目管理办公室（掌握）"><a href="#1-10、PMO项目管理办公室（掌握）" class="headerlink" title="1.10、PMO项目管理办公室（掌握）"></a>1.10、PMO项目管理办公室（掌握）</h4><ul><li>PMO一般称为项目管理办公室、项目管理中心或者项目管理部，是在组织内部将实践、过程、运作形式化和标准化，同时在组织内各机能间，为推动专案前进产生各种工作资源冲突时，负责协调整合的机能，所以是为了提高组织管理成熟度的核心部门。</li><li>根据需要，可以为一个项目设立一个PMO，可以为一个部门设立一个PMO，也可以为一个企业设立一个PMO。这三级PMO可以在一个组织内可以同时存在。</li><li><strong>PMO有支持型、控制型和指令型等三种。</strong></li></ul><hr><h2 id="第五章、项目立项管理"><a href="#第五章、项目立项管理" class="headerlink" title="第五章、项目立项管理"></a>第五章、项目立项管理</h2><ul><li><p>主要考点：</p><ul><li>项目建议</li><li>可行性研究</li><li>项目招投标</li><li>项目立项</li><li>立项管理也可能考案例 分析。如案例2018年下（招投标），2017年上（归一化）等。</li></ul></li><li><p><strong>项目立项一般包括项目建议、项目可行性分析、项目审批、项目招投标、合同谈判与签订  5个阶段。</strong></p></li></ul><h3 id="1、项目立项"><a href="#1、项目立项" class="headerlink" title="1、项目立项"></a>1、项目立项</h3><h4 id="1-1、项目建议（掌握）"><a href="#1-1、项目建议（掌握）" class="headerlink" title="1.1、项目建议（掌握）"></a>1.1、项目建议（掌握）</h4><ul><li><strong>项目建议书（又称 立项申请）是项目建设单位向上级主管部门提交项目申请时所需要的文件，</strong>是对拟建项目提出的框架性的总体设想。</li><li>项目建议书是项目发展周期的初始阶段，是国家或上级主管部门选择项目的依据，也是<strong>可行性研究的依据。</strong></li><li>项目建设单位可以规定对于<strong>规模小的系统集成项目省略项目 建议书环节，而将其 与可行性分析阶段进行合并。</strong></li></ul><h4 id="1-2、项目建议书主要内容（掌握）"><a href="#1-2、项目建议书主要内容（掌握）" class="headerlink" title="1.2、项目建议书主要内容（掌握）"></a>1.2、项目建议书主要内容（掌握）</h4><ol><li>第一章  项目简介<ol><li>项目名称</li><li>项目建设单位和负责人、项目责任人</li><li>项目建议书编制依据</li><li>项目概况</li><li>主要结论和建议</li></ol></li><li>第二章  项目建设单位概况<ol><li>项目建设单位与职能</li><li>项目实施机构与职责</li></ol></li><li>第三章  项目建设的必要性<ol><li>项目提出的背景和依据</li><li>现有信息系统装备和信息化应用状况</li><li>信息系统装备和应用目前存在的主要问题 和差距</li><li>项目建设的意义和必要性</li></ol></li><li>第四章  **业务分析 **<ol><li>业务功能、业务流程和业务<strong>分析</strong></li><li>信息量<strong>分析</strong>与预测</li><li>系统功能 和性能需求<strong>分析</strong></li></ol></li><li>第五章  <strong>总体建设方案</strong><ol><li>建设原则和<strong>策略</strong></li><li><strong>总体</strong>目标与分期目标</li><li><strong>总体</strong>建设任务与分期建设内容</li><li><strong>总体</strong>设计方案</li></ol></li><li>第六章  <strong>本期项目建设方案</strong><ol><li>建设目标与主要<strong>建设</strong>内容</li><li>信息资源规划 和数据库<strong>建设</strong></li><li>应用支撑平台和应用系统<strong>建设</strong></li><li>网络系统<strong>建设</strong></li><li>数据处理和存储系统<strong>建设</strong></li><li>安全系统<strong>建设</strong></li><li>其他（终端、备份、运维等）系统<strong>建设</strong></li><li>主要软硬件选型原则和软硬件<strong>配置清单</strong></li><li>机房及配套工程<strong>建设</strong></li></ol></li><li>第七章  环保、消防、职业安全<ol><li>环境影响和环保措施</li><li>消防措施</li><li>职业安全</li></ol></li><li>第八章  项目实施进度</li><li>第九章   投资估算和资金筹措<ol><li>投资估算的有关说明</li><li>项目总投资估算</li><li>资金来源与落实情况</li></ol></li><li>第十章  效益与风险分析<ol><li>项目的经济效益和社会效益分析</li><li>项目风险与风险对策</li></ol></li></ol><blockquote><p>考点：例如：给出选项，判断哪个不属于总体建设方案，记黑体关键字</p></blockquote><h4 id="1-3、项目可行性研究内容（掌握）"><a href="#1-3、项目可行性研究内容（掌握）" class="headerlink" title="1.3、项目可行性研究内容（掌握）"></a>1.3、项目可行性研究内容（掌握）</h4><ol><li>项目可行性的内容一般包括：<ol><li>投资必要性<ol><li>主要根据市场调查及预测的结构 ，以及有关的产业政策等因素，论证项目投资建设的必要性。</li></ol></li><li>技术可行性<ol><li>从项目实施的技术角度，合理设计技术方案，并进行比较、选择和评价。</li></ol></li><li>财务可行性<ol><li>评价项目的财务盈利能力，进行投资决策，并从融资主体（企业）的角度评价股东投资收益、现金流量计划及债务偿还能力。</li></ol></li><li>组织可行性<ol><li>制定合理的项目实施进度计划、设计合理的组织机构 、选择经验丰富的管理人员、建立良好的协作关系、制定合适的 培训计划等，保证项目顺利执行。</li></ol></li><li><strong>经济可行性</strong><ol><li><strong>主要是从资源的角度衡量项目的价值，</strong>评价项目在实施区域经济发展目标、有效配置经济资源、增加供应、创造就业、改善坏境、提高人民生活等方面的效益。</li></ol></li><li>社会可行性<ol><li>主要分析项目对社会的影响，包括政治体制、方针政策、经济结构、法律道德、宗教民族、妇女儿童及社会稳定性等。</li></ol></li><li>风险因素及对策<ol><li>主要对项目的市场风险、技术风险、财务风险、组织风险、法律风险、经济及社会风险等因素进行评价，制定规避风险的对策，为项目全过程的风险管理提供依据。</li></ol></li></ol></li></ol><blockquote><p>考点：重点是经济 可行性</p><p>【2018上半年】在项目可行性研究内容中，（A）主要是从资源配置的角度衡量项目的价值，评价项目在实现区域经济发展目标、有效配置经济资源、增加供应、创造就业、改善环境、提高人民生活等方面的效益。</p><p>A：经济可行性        B：技术可行性       C：财务可行性              D：组织可行性</p></blockquote><h4 id="1-4、可行性研究报告的内容（了解）"><a href="#1-4、可行性研究报告的内容（了解）" class="headerlink" title="1.4、可行性研究报告的内容（了解）"></a>1.4、可行性研究报告的内容（了解）</h4><ol><li>可行性研究报告的内容：<ol><li>项目概述</li><li>项目建设单位概述</li><li>需求分析和项目建设的必要性</li><li>总体建设方案</li><li>本期项目建设方案</li><li>项目招标方案</li><li>环保、消防、职业安全</li><li>项目组织机构和人员培训</li><li>项目实施进度</li><li>投资估算和资金来源</li><li>效益与评价指标分析</li><li>项目风险与风险管理</li></ol></li></ol><h4 id="1-5、项目可行性研究阶段（掌握）"><a href="#1-5、项目可行性研究阶段（掌握）" class="headerlink" title="1.5、项目可行性研究阶段（掌握）"></a>1.5、项目可行性研究阶段（掌握）</h4><table><thead><tr><th>阶段</th><th>主要内容</th></tr></thead><tbody><tr><td>1.机会研究</td><td>主要任务是<strong>对投资项目或投资方向提出意见</strong>，并对各种设想的项目和投资机会做出鉴定，其目的是激发投资者的兴趣，<strong>寻找最佳的投资机会。</strong></td></tr><tr><td>2.初步可行性研究</td><td>是介于<strong>机会可行性研究和详细可行性研究的一个中间阶段，</strong>是项目意向确定之后，对项目的初步评估。<strong>如果进行了机会研究，本阶段可以省略。</strong>                        初步可行性研究可能出现4种结果：**1、肯定，对于比较小的项目甚至可以直接”上马“；  2、肯定，转入详细可行性研究；  3、展开专题研究，如建立原型系统，演示主要功能模块或者验证关键技术；    4、否定，项目应该”下马“。 **</td></tr><tr><td>3、详细可行性研究</td><td>需要对一个项目的技术、经济、环境及社会影响等进行深入调查研究。</td></tr><tr><td>4、可行性研究报告的 编写、提交和获得批准</td><td>通过招标选定或委托具有相关专业资质的工程咨询机构编制项目 可行性研究报告，报送项目审批部门。</td></tr><tr><td>5、项目评估</td><td>在可行性研究的基础上，由<strong>第三方（国家、银行或有关机构）</strong>根据 政策、法规等，从 项目（或企业）、国民经济、社会角度出发，对拟建项目建设的<strong>必要性、建设条件、生产条件、产品市场需求、经济效益和社会效益等进行评估 、分析和论证，</strong>进而判断 其是否可行的一个评估过程。    项目评估是<strong>项目投资前期进行决策管理的重要环节，其目的是审查项目可行性研究的可靠性、真实性和客观性，为银行的贷款决策或行政主管部门的审批决策提供科学依据。</strong></td></tr></tbody></table><h3 id="2、项目招投标"><a href="#2、项目招投标" class="headerlink" title="2、项目招投标"></a>2、项目招投标</h3><h4 id="2-1、项目招投标-招标（掌握）"><a href="#2-1、项目招投标-招标（掌握）" class="headerlink" title="2.1、项目招投标-招标（掌握）"></a>2.1、项目招投标-招标（掌握）</h4><ul><li>招标有<strong>公开招标、邀请招标</strong>等<ul><li>公开招标：是指招标人以<strong>招标公告</strong>的方式邀请<strong>不特定</strong>的法人或者其他组织投标。</li><li>邀请招标：是指招标人以<strong>投标邀请书</strong>的方式邀请<strong>特定</strong>的法人或者其他组织投标。</li></ul></li><li>国有资金占控股或者主导地位的依法必须进行招标的项目 ，应当<strong>公开招标。</strong></li><li>但有下列情形之一的，可以邀请招标：<ul><li>技术复杂、有特殊要求或者受自然环境限制，只有少量潜在投标人可供选择；</li><li>采用公开招标方式的费用占项目合同金额的比例过大。</li></ul></li><li>下列情形可以不进行招标：<ul><li>需要采用不可替代的<strong>专利或者专有技术</strong></li><li>采购人依法能够<strong>自行建设、生产或者提供</strong></li><li>以通过招标方式选定的<strong>特许经营项目投资人依法能够自行建设、生产或者提供</strong></li><li>需要向原中标人采购项目、货物或者服务，否则将影响施工或者功能配套要求。</li><li>国家规定的其他特殊情形。</li></ul></li></ul><h4 id="2-2、招标相关规定（掌握）"><a href="#2-2、招标相关规定（掌握）" class="headerlink" title="2.2、招标相关规定（掌握）"></a>2.2、招标相关规定（掌握）</h4><ul><li>招标人应当按照资格预审公告、招标公告或者投标邀请书规定的时间、地点发售资格预审文件或者招标文件。资格预审文件或招标文件的发售期<strong>不得少于5日。</strong></li><li>招标人发售资格预审文件、招标文件收取的费用应当限于补偿印刷、邮寄的成本支出，不得以营利为目的。</li><li>通过资格预审的申请人<strong>少于3个的，应当重新招标。</strong></li><li>招标人在招标文件中要求投标人提供投标保证金的，<strong>投标保证金不能超过招标项目估算的2%。投标保证金有效期应当与投标有效期一致。</strong></li><li>招标人可以自行决定是否编制标底。一个标底项目<strong>只能有一个标底。标底必须保密。</strong></li><li>招标人不得以不合理的条件限制、排斥潜在的投标人或者投标人。</li></ul><h4 id="2-3、项目招投标——投标（掌握）"><a href="#2-3、项目招投标——投标（掌握）" class="headerlink" title="2.3、项目招投标——投标（掌握）"></a>2.3、项目招投标——投标（掌握）</h4><ol><li>投标活动流程：<ol><li>编制标书</li><li>递交标书</li><li>标书的签收<ol><li>编制标书。为防止投标人在投标后撤标或在中标后拒不签订合同，招标人通常要求投标人提供一定比例或金额的<strong>投标保证金</strong>。招标人决定中标人后，未中标的投标人已缴纳的保证金给予退让。<ul><li>递交标书应注意的问题：《招标投标法》第二十八条规定，招标人应当在招标文件要求提交投标文件的截至时间前，将投标文件送达投标地点。招标人收到投标文件后，应当签收保存，不得开启。<strong>招标人少于三个的，</strong>扎奥包人应当依照本法重新投标。在招标文件要求提交投标文件的截至 时间后送达的投标文件 ，招标人应当拒收。</li></ul></li><li>递交标书。招标人必须按照招标文件规定的地点、在规定的时间内送达投标文件。投递投标书的方式最好是直接送达或委托代理人送达，以便获得招标机构已收到投标书的回执。如果以邮寄的方式送达的，投标人必须留出邮寄时间，保证投标文件能够在截至日期之前送达招标人指定的地点，<strong>而不是以”邮戳为准。“</strong>在截至时间后送达的投标文件，即已经过了招标有效期的，招标人应当原封退回，不得进入开标阶段。</li><li>标书的签收。招标人收到标书以后应当签收，不得开启。为了保证投标人的合法权益，招标人必须履行完备的签收、登记和备案手续。签收人要记录投标文件递交的日期和地点以及密封状况，签收人签名后应将所有递交的投标文件放置在保密安全的地方，任何人不得开启投标文件。</li></ol></li></ol></li></ol><h4 id="2-4、项目招投标——开标与评标（掌握）"><a href="#2-4、项目招投标——开标与评标（掌握）" class="headerlink" title="2.4、项目招投标——开标与评标（掌握）"></a>2.4、项目招投标——开标与评标（掌握）</h4><ul><li>开标：应当在<strong>招标文件确定的提交投标文件截止时间的同一时间 公开进行。az</strong><ul><li>开标地点应当为招标文件中预先确定的地点。开标由投标人主持 ，<strong>邀请所有投标人参加。标书应当众拆封。</strong></li><li><strong>投标人少于3个的，</strong>不得开标；招标人应当重新招标。</li></ul></li><li><strong>评标由评标委员会负责。</strong><ul><li>评标委员会由具有高级职称或同等专业水平的技术、经济等相关领域专家、招标人和招标机构代表等<strong>5人以上单数组成，</strong>其中技术 、经济等方面专家人数<strong>不得少于成员总数的2/3。</strong>采用竞争性谈判采购方式的，竞争性谈判小组或 不得少于竞争性谈判小组或者询价小组由采购人代表和评审专家共3人以上单数组成，其中谈判专家人数不得少于竞争性谈判小组或者询价小组成员总数的2/3.</li><li>评标委员会完成评标后，应当向招标人提出书面评标报告，并推荐合格的中标候选人，<strong>中标候选人一般不超过3个，并标明排序。</strong>招标人也可以授权评标委员会<strong>直接确定中标人。</strong></li></ul></li></ul><h4 id="2-5、项目招投标——中标（掌握）"><a href="#2-5、项目招投标——中标（掌握）" class="headerlink" title="2.5、项目招投标——中标（掌握）"></a>2.5、项目招投标——中标（掌握）</h4><ul><li>招标人应当自收到评标报告之日起<strong>三日内公式中标候选人，</strong>公示期不得少于三日。</li><li>中标人确定后，招标人应<strong>向中标人发出中标通知书，并同时将中标结果通知所有未中标的投标人。</strong></li><li>中标人应当自中标通知书<strong>发出之日起三十日内，</strong>按照招标文件和中标人的投标文件<strong>订立书面合同。</strong>招标人和中标人<strong>不得再行订立背离合同实质性内容的其他协议。</strong></li><li>招标人最迟应当在书面合同签订后<strong>5日内向中标人和未中标的投标人退还投标保证金</strong>及银行同期存款利息要求中标人提交履约保证金，履约保证金<strong>不得超过中标合同金额的10%。</strong></li></ul><h4 id="2-6、供应商项目立项（掌握）"><a href="#2-6、供应商项目立项（掌握）" class="headerlink" title="2.6、供应商项目立项（掌握）"></a>2.6、供应商项目立项（掌握）</h4><ol><li>系统集成商进行项目内部立项主要有几方面原因：<ol><li>通过项目立项方式，为项目<strong>分配资源</strong>。前期更关注资源与项目的匹配程度。</li><li>通过项目立项方式确定合理的<strong>项目绩效目标，</strong>有助于人员的<strong>积极性。</strong></li><li>以<strong>项目型工作方式</strong>，提升项目<strong>实施效率。</strong></li></ol></li><li>项目内部立项时一般包括的内容：<ol><li><strong>项目资源估算：</strong>估算人员、设备、场地等不同资源。</li><li><strong>项目资源分配：</strong>在不同部门和项目之间协调资源，要保证资源充足同时保证整体资源部署优化。</li><li><strong>准备项目任务书：</strong>针对项目提出明确的任务目标 以及考核要求，作为评价项目 绩效的主要依据。</li><li><strong>任命项目经理：</strong>指派及正式任命项目经理。</li></ol></li></ol><blockquote><p>考点：记住供应商内部立项包括哪些内容。  项目资源估算、项目资源分配、准备项目 任务书、人们项目经理</p><p>【2018下半年】供应商在进行项目内部立项时，立项内容不包括（D）。</p><p>A：项目资源估算                 B：项目资源分配                       C：任命项目经理           D：项目可行性研究</p><p>【2020下半年】某系统集成供应商与客户签署合同后，通过（B）可以将组织对合同的责任转移到项目部。</p><p>A：项目建议书              B：内部项目立项制度                    C：可行性报告                    D：项目投标文件</p></blockquote><hr><h2 id="第六章、项目整体管理"><a href="#第六章、项目整体管理" class="headerlink" title="第六章、项目整体管理"></a>第六章、项目整体管理</h2><h3 id="1、项目管理"><a href="#1、项目管理" class="headerlink" title="1、项目管理"></a>1、项目管理</h3><h4 id="1-1、项目管理中的相关方"><a href="#1-1、项目管理中的相关方" class="headerlink" title="1.1、项目管理中的相关方"></a>1.1、项目管理中的相关方</h4><ul><li>招标：<ul><li>买方</li><li>甲方 </li><li>建设方</li></ul></li><li>投标：<ul><li>卖方</li><li>乙方</li><li>承建方</li></ul></li><li>第三方：<ul><li>供应商</li></ul></li></ul><h4 id="1-2、十大知识领域学习的重点"><a href="#1-2、十大知识领域学习的重点" class="headerlink" title="1.2、十大知识领域学习的重点"></a>1.2、十大知识领域学习的重点</h4><ul><li>What——&gt;每个子过程的定义。</li><li>Why——&gt;每个子过程的作用。</li><li>How——&gt;每个子过程的ITTO。</li><li>什么是ITO？<ul><li>输入（Input）：依据是什么、参考什么、应该审查什么。</li><li>工具和技术（Tool&amp;Technology）：用什么方法、用什么技术。</li><li>输出（Output）：下一步制定什么、是为了做什么、记录在什么文件中。</li></ul></li></ul><h4 id="1-3、10大知识域概述"><a href="#1-3、10大知识域概述" class="headerlink" title="1.3、10大知识域概述"></a>1.3、10大知识域概述</h4><ul><li>考试核心：<strong>10大项目管理，狗（沟通）子（质量）整（整体）范（范围）进（进度），成（成本）人（人力资源、干系人管理）风（风险）采（采购），</strong>这些是我们学习的重点，在学习的时候我们需要注意以下几点：<ul><li>每个管理有哪几个过程？定义？</li><li>每个过程是输入、输出、工具和技术是什么？</li><li>每个管理会遇到哪些问题？怎么解决——案例分析</li><li>各个管理之间有哪些关联？</li><li>充分重视教程中的图 、表，还有一些举例！</li><li>如果出案例，可能会考哪些方面的知识点！</li></ul></li></ul><h4 id="1-4、项目管理三从四得"><a href="#1-4、项目管理三从四得" class="headerlink" title="1.4、项目管理三从四得"></a>1.4、项目管理三从四得</h4><ul><li>三从：<ul><li>从过程想结果（<em>就是说这个过程（47个过程）到底是做什么？是什么定义，<strong>你能把过程理解清楚，那这个过程有什么输出（结果）</strong>，当然，也就知道了；比如项目章程的输出肯定有项目章程，计划的输出肯定有计划。</em>）</li><li>从结果知输入（<em>你既然知道了这个过程的输出，那么反推下，<strong>肯定也可以知道做这个事情需要说明条件了，也就是输入（依据）</strong></em>）</li><li>从输入选工具（<em>就是要根据<strong>完成一个活动的条件来判断这个过程可以采用的工具 和技术（方法）</strong></em>）</li></ul></li><li>四得：（<em>没什么好解释的，全部是输出，而且是比较通用的输出。</em>）<ul><li>一得文件计划（<em>区别计划和文件</em>）</li><li>二得成果数据</li><li>三得变更要求</li><li>四得因素资产</li></ul></li></ul><h3 id="2、项目整体管理概述"><a href="#2、项目整体管理概述" class="headerlink" title="2、项目整体管理概述"></a>2、项目整体管理概述</h3><h4 id="2-1、项目整体管理概念（掌握）"><a href="#2-1、项目整体管理概念（掌握）" class="headerlink" title="2.1、项目整体管理概念（掌握）"></a>2.1、项目整体管理概念（掌握）</h4><ul><li>项目整体管理包括为识别、定义、组合、统一和协调各项目管理过程组的各种过程和活动而开展的工作，是项目管理中一项<strong>综合性和全局性</strong>的管理工作。</li><li>整体管理就是要决定在什么时间 把工作量分配到相应的资源上，有哪些潜在的问题并在其出现问题之前积极处理，以及**协调各项工作使项目整体上取得一个好的结果。 **</li><li>项目整体管理包括选择资源分配方案、平衡相互竞争的目标和方案，以及协调 项目管理各知识领域的依赖关系。</li></ul><h4 id="2-2、项目整体管理-的6个过程（重点掌握）"><a href="#2-2、项目整体管理-的6个过程（重点掌握）" class="headerlink" title="2.2、项目整体管理 的6个过程（重点掌握）"></a>2.2、项目整体管理 的6个过程（重点掌握）</h4><ol><li><strong>制定项目章程：</strong>（<em>启动过程</em>）编写一份<strong>正式文件</strong>的过程。</li><li><strong>制定项目管理计划：</strong>（<em>计划过程</em>）<strong>项目管理计划</strong>包括项目基准和子计划。</li><li><strong>指导与管理项目工作：</strong>（<em>执行过程</em>）为实现项目目标而<strong>领导和执行</strong>项目管理计划中所确定的工作，并实施已批准变更的过程。</li><li><strong>监控项目工作：</strong>（<em>监督和控制过程</em>）<strong>跟踪、审查和报告</strong>项目进展，以实现项目管理计划中确定的绩效目标的过程。</li><li><strong>实施整体变更控制：</strong>（<em>监控和控制过程</em>）审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并**对变更处理结果进行沟通 **的过程。</li><li><strong>结束项目或阶段：</strong>（<em>收尾过程</em>）项目收尾。</li></ol><blockquote><p>考点：项目整体管理的六个过程，必须记忆。</p></blockquote><h4 id="2-2、项目经理是整合者（掌握）"><a href="#2-2、项目经理是整合者（掌握）" class="headerlink" title="2.2、项目经理是整合者（掌握）"></a>2.2、项目经理是整合者（掌握）</h4><ul><li>项目经理作为整合者，项目经理必须：<ul><li>通过与项目干系人主动、全面的沟通，来了解他们对项目的<strong>需求。</strong></li><li>在相互竞争的众多干系人之间寻找<strong>平衡点。</strong></li><li>通过认真、细致的协调工作，来达到各种需求间的平衡，实现<strong>整合</strong>。</li></ul></li></ul><h3 id="3、项目整体管理实现过程"><a href="#3、项目整体管理实现过程" class="headerlink" title="3、项目整体管理实现过程"></a>3、项目整体管理实现过程</h3><h4 id="3-1、制定项目章程（掌握）"><a href="#3-1、制定项目章程（掌握）" class="headerlink" title="3.1、制定项目章程（掌握）"></a>3.1、制定项目章程（掌握）</h4><ul><li><strong>输入——&gt;工具与技术——&gt;输出</strong><ul><li><strong>输入：</strong>（<em>所谓输入就是在做这个事情之前或正在进行这个事情所需要考虑的</em>），输入包括如下：<ul><li>协议</li><li>项目工作说明书</li><li>商业论证</li><li><strong>事业环境因素</strong></li><li><strong>组织过程资产</strong></li></ul></li><li><strong>工具与 技术 ：</strong>（<em>工具和技术就可以理解为用什么方法</em>）<ul><li>专家判断</li><li>引导技术（头脑风暴、冲突处理、问题解决、会议管理）</li></ul></li><li><strong>输出：</strong>（<em>所谓输出就是做完之后得到的</em>）<ul><li>会得到一个文件<strong>项目章程</strong>。</li></ul></li></ul></li></ul><h4 id="3-2、项目章程概述（重点掌握）"><a href="#3-2、项目章程概述（重点掌握）" class="headerlink" title="3.2、项目章程概述（重点掌握）"></a>3.2、项目章程概述（重点掌握）</h4><ol><li>制定项目章程是编写一份<strong>正式批准项目并 授权</strong>项目经理在项目活动中使用组织资源的文件的 过程。<strong>项目章程宣告一个项目的正式启动、项目经理的任命，</strong>并对项目的目标、范围、主要可交付成果、主要制约因素与主要假设条件等进行<strong>总体性描述</strong>。</li><li>通过 由高级管理层签发项目 章程，授权项目经理为实施项目而动用组织资源。<strong>项目章程是项目经理寻求各主要干系人支持的依据。</strong></li><li>项目经理可以参与或起草项目章程，但项目章程是由项目以外的实体来发布的，如<strong>发起人</strong>、项目集或项目管理办公室职员、或项目组合治理委员会主席或授权代表。当项目目标发生变化，需要对项目章程进行修改时，只有管理层和发起人有权进行变更，<strong>项目经理 对项目章程的修改不在其权责范围之内，</strong>遵循<strong>“谁签发，谁有权修改”</strong> 的原则。</li></ol><h4 id="3-3、项目章程的作用（掌握）"><a href="#3-3、项目章程的作用（掌握）" class="headerlink" title="3.3、项目章程的作用（掌握）"></a>3.3、项目章程的作用（掌握）</h4><ol><li>项目章程的作用：<ol><li><strong>确定项目经理，规定项目经理的权力。</strong></li><li>正式确认项目的存在，给项目一个<strong>合法的地位</strong>。</li><li>规定项目的<strong>总体目标</strong>，包括范围、时间、成本和质量等。</li><li>叙述<strong>启动项目的理由</strong>，把项目与执行组织日常经营运作及战略计划等联系起来。</li></ol></li></ol><h4 id="3-4、制定项目章程的输入（掌握）"><a href="#3-4、制定项目章程的输入（掌握）" class="headerlink" title="3.4、制定项目章程的输入（掌握）"></a>3.4、制定项目章程的输入（掌握）</h4><ol><li>项目工作说明书（<em><strong>项目工作说明书 （SOW）</strong>是对项目需交付的产品、服务或输出的 <strong>叙述性说明。</strong>项目工作说明书包括 如下内容：1.业务需要。2.<strong>产品范围描述</strong>。3.战略 计划。</em>）</li><li>商业论证</li><li>协议</li><li>组织过程资产</li><li>事业环境因素（<em>包括：政府标准、行业标准、行业标准或法规，组织 文化和结果，市场 条件。</em>）</li></ol><h4 id="3-5、制订项目章程的工具和技术（掌握）"><a href="#3-5、制订项目章程的工具和技术（掌握）" class="headerlink" title="3.5、制订项目章程的工具和技术（掌握）"></a>3.5、制订项目章程的工具和技术（掌握）</h4><ol><li>专家判断</li><li>引导技术（<em>引导技术广泛应用于各项目管理过程，可用于指导项目章程的制定。<strong>头脑风暴、冲突处理 、问题解决、会议管理</strong>等，都是引导着可以用来帮助团队和个人完成项目活动的关键技术。</em>）（口诀：问头会冲 ）</li></ol><blockquote><p>考点： 四种引导技术要牢记。</p></blockquote><h4 id="3-6、制定项目章程的输出（重点掌握）"><a href="#3-6、制定项目章程的输出（重点掌握）" class="headerlink" title="3.6、制定项目章程的输出（重点掌握）"></a>3.6、制定项目章程的输出（重点掌握）</h4><ol><li>概括性 的项目 描述和项目产品描述。</li><li>项目目的 或批准项目的 理由，即为什么要做这个项目。</li><li>项目的总体 要求，包括项目的总体范围和总体 质量要求。</li><li>可测量的项目目标 和相关的成功标准。</li><li>项目的主要风险，如项目的主要风险类别。</li><li>总体 里程碑进度计划。</li><li>总体预算。</li><li>项目的审批要求。</li><li>委派的项目 经理及其职责和 职权。</li><li>发起人或其他批准项目章程的人员的姓名和职权。</li></ol><h3 id="4、制定项目管理计划"><a href="#4、制定项目管理计划" class="headerlink" title="4、制定项目管理计划"></a>4、制定项目管理计划</h3><h4 id="4-1、制定项目管理计划（掌握）"><a href="#4-1、制定项目管理计划（掌握）" class="headerlink" title="4.1、制定项目管理计划（掌握）"></a>4.1、制定项目管理计划（掌握）</h4><ul><li>输入——&gt; 工具和技术 ——&gt; 输出<ul><li>输入：<ul><li>项目章程</li><li>其他过程的输出结果</li><li>事业环境因素</li><li>组织过程资产</li></ul></li><li>工具与技术：<ul><li>专家判断</li><li>引导技术（头脑风暴、冲突处理、问题解决、会议管理 ）</li></ul></li><li>输出：<ul><li>项目管理计划书</li></ul></li></ul></li></ul><h4 id="4-2、项目管理计划概述-（掌握）"><a href="#4-2、项目管理计划概述-（掌握）" class="headerlink" title="4.2、项目管理计划概述 （掌握）"></a>4.2、项目管理计划概述 （掌握）</h4><ol><li>项目管理计划是<strong>综合性的计划</strong>，是整合一系列分项的管理计划和其他内容的结果用于指导项目的执行、监控和收尾工作。</li><li>项目管理计划是在项目管理其他规划过程的成果（<em>子计划</em>）基础上制订，<strong>所有其他规划过程都是制定 项目管理计划过程的依据（<em>输入</em>）。</strong></li><li>项目管理计划可能<strong>不只要得到管理层的批准</strong>，可能还需要得到<strong>其他主要项目干系人（<em>投资人</em>）的批准。</strong></li><li>项目管理计划<strong>可以是概括的或详细的，</strong>可以包含一个或多个辅助计划 （即其他各规划过程所产生的所有子管理计划）。</li><li>项目管理计划必须是 <strong>自下而上</strong>制定出来的。项目团队成员要对与自己密切相关的部分制订相应计划，并逐层向上报告和汇总，最后由项目经理进行综合，形成综合性的、整体的项目管理计划 。</li><li>项目管理强调项目的特性和项目管理计划的<strong>渐进明细</strong>。</li></ol><h4 id="4-3、项目管理计划制订过程"><a href="#4-3、项目管理计划制订过程" class="headerlink" title="4.3、项目管理计划制订过程"></a>4.3、项目管理计划制订过程</h4><ol><li>制订项目管理计划的输入（了解）<ol><li>项目章程</li><li>其他规范过程的输出（<em>范围管理计划、进度管理计划、成本管理计划、质量管理计划 、干系人管理计划、沟通管理计划等</em>）</li><li>组织过程 资产</li><li>事业环境因素</li></ol></li><li>制订项目管理计划的工具与技术（了解）<ol><li>专家判断</li><li>引导技术</li></ol></li><li>制订项目管理计划的输出<ol><li>项目管理计划</li></ol></li></ol><h4 id="4-4、项目管理计划（掌握）"><a href="#4-4、项目管理计划（掌握）" class="headerlink" title="4.4、项目管理计划（掌握）"></a>4.4、项目管理计划（掌握）</h4><ul><li>制订项目管理计划的输出——&gt;项目管理计划。</li><li>项目管理计划合并与整合了其他各规划过程所产生的<strong>所有子管理计划和基准（<em>基本的标准</em>）</strong>（范围基准、进度基准、成本基准等）。</li><li>还可以包括：</li></ul><ol><li>所使用的<strong>项目管理过程</strong>。</li><li>每个特定项目管理 过程的实施程度。</li><li>完成这些过程的<strong>工具和技术</strong>的描述。</li><li>项目所选用的 <strong>生命周期</strong>及各阶段将采用的过程。</li><li>如何用选定的 过程来管理具体的项目。包括过程之间的依赖 于交互关系和基本的 输入和输出。</li><li>如何执行工作来完成项目目标及 对项目目标的描述。</li><li>如何监督和控制变更，明确如何对变更进行监控。</li><li><strong>配置管理计划</strong>，用来明确如何开展配置管理。</li><li>对维护项目绩效基线的完整性的说明。</li><li>与项目干系人进行沟通的 要求和技术。</li><li>为项目选择的<strong>生命周期模型</strong>。</li><li>为解决某些遗留问题和未定的决策，对于其内容、严重程度和紧迫程度进行的管理 管理评审。</li></ol><h4 id="4-5、项目管理计划与项目文件的区别（掌握）"><a href="#4-5、项目管理计划与项目文件的区别（掌握）" class="headerlink" title="4.5、项目管理计划与项目文件的区别（掌握）"></a>4.5、项目管理计划与项目文件的区别（掌握）</h4><ul><li>典型的<strong>项目管理计划</strong>包括：<strong>各类项目管理子计划、成本基准、进度基准、范围基准（项目范围说明书、WBS（<em>工作分解结构</em>）、WBS词典）等。</strong>（<em>13个子计划+3个基准</em>）</li><li>典型的<strong>项目文件</strong>包括：<strong>变更日志、质量核对单、需求文件、资源日历、风险登记册、干系人登记册和工作 绩效数据等</strong></li><li>特别注意<strong>项目文件不属于项目管理计划。</strong></li></ul><hr><h3 id="5、指导和管理项目（执行过程）工作"><a href="#5、指导和管理项目（执行过程）工作" class="headerlink" title="5、指导和管理项目（执行过程）工作"></a>5、指导和管理项目（执行过程）工作</h3><h4 id="5-1、指导和管理项目执行概念和作用（掌握）"><a href="#5-1、指导和管理项目执行概念和作用（掌握）" class="headerlink" title="5.1、指导和管理项目执行概念和作用（掌握）"></a>5.1、指导和管理项目执行概念和作用（掌握）</h4><ul><li>指导与管理项目工作是为实现项目目标而<strong>领导和执行</strong>项目管理计划中所定的工作，并<strong>实施已批准变更</strong>的过程。（已批准的变更包括：<strong>纠正措施、预防措施、缺陷补救。</strong>）</li><li>指导与管理项目工作通常以<strong>“开题会议”（<em>开工会议</em>）</strong>为开始标志，该会议是项目计划制订工作结束、执行工作开始时由项目的主要干系人联合召开的会议，以便加强他们之间的沟通与协调。</li><li><strong>本过程的主要作用是：对项目工作提供全面指导和管理。</strong></li><li>指导与管理项目工作需要项目经理 和项目团队执行多项行动来执行项目管理计划以完成项目范围说明书中所定义的工作。</li></ul><h4 id="5-2、指导和管理项目工作的过程（掌握）"><a href="#5-2、指导和管理项目工作的过程（掌握）" class="headerlink" title="5.2、指导和管理项目工作的过程（掌握）"></a>5.2、指导和管理项目工作的过程（掌握）</h4><ol><li>指导与管理项目工作的输入（了解）：（<em>可以理解为：依据什么来完成指导与管理项目 工作</em>）<ol><li>项目管理计划</li><li>批准的变更请求</li><li>事业环境因素</li><li>组织过程资产</li></ol></li><li>指导与管理项目 工作的工具与技术（领会）：<ol><li>项目管理信息系统<ul><li>项目管理信息系统提供下列工具：进度计划工具 、<strong>工作授权系统、配置管理系统、信息收集与发布系统</strong>，或其他基于IT技术的工具。</li><li>（<em>注意关键字系统，含有系统的也属于指导与管理项目工作的工具与技术。</em>）</li></ul></li><li>会议</li><li>专家判断（<em>会议和专家判断是双胞胎</em>）</li></ol></li><li>指导与管理 项目工作的输出（熟悉）：（<em>只要含更新的就是 输出</em>）<ol><li>可交付成果</li><li>工作绩效数据</li><li>变更请求</li><li>项目管理计划更新</li><li>项目文件更新</li></ol></li></ol><h4 id="5-4、变更请求与批准的变更请求（掌握）"><a href="#5-4、变更请求与批准的变更请求（掌握）" class="headerlink" title="5.4、变更请求与批准的变更请求（掌握）"></a>5.4、变更请求与批准的变更请求（掌握）</h4><ul><li><strong>变更请求：</strong><ul><li>变更请求是关于修改任何文档、可交付成果或基于基准 的正式提议。</li><li>变更请求可能包括：<strong>纠正措施、预防措施、缺陷措施、更新。</strong></li></ul></li><li><strong>批准的变更请求：</strong><ul><li>批准的变更请求是<strong>实施变更控制的输出，</strong>包括哪些经<strong>变更控制委员会</strong>审查和批准的变更请求。</li><li>批准的变更请求可能是<strong>纠正措施、预防措施、缺陷补救、更新。</strong></li></ul></li></ul><h4 id="5-5、纠正措施、预防措施、缺陷补救、更新"><a href="#5-5、纠正措施、预防措施、缺陷补救、更新" class="headerlink" title="5.5、纠正措施、预防措施、缺陷补救、更新"></a>5.5、纠正措施、预防措施、缺陷补救、更新</h4><ul><li><strong>纠正措施</strong><ul><li>实际上已经产生的错误完成纠正。</li></ul></li><li>预防措施：<ul><li>针对将来可能出现的错误。</li></ul></li><li>缺陷补救<ul><li>只针对质量问题。</li></ul></li><li>更新：<ul><li>对正式受控的项目文件或项目计划等进行的变更，以反映修改或增加的意见或内容。</li></ul></li></ul><hr><h3 id="6、监控项目"><a href="#6、监控项目" class="headerlink" title="6、监控项目"></a>6、监控项目</h3><h4 id="6-1、监控-项目工作的概念和作用（掌握）"><a href="#6-1、监控-项目工作的概念和作用（掌握）" class="headerlink" title="6.1、监控 项目工作的概念和作用（掌握）"></a>6.1、监控 项目工作的概念和作用（掌握）</h4><ul><li>监控项目工作是<strong>跟踪、审查和报告项目进展，</strong>以实现项目管理计划中确定的绩效目标的过程。</li><li>项目的监控工作<strong>贯穿于项目工作的始终，</strong>即不仅要对项目执行进行监控，而且要对项目的启动、规划和收尾进行监控。</li><li><strong>监控项目工程的 主要作用：</strong>让干系人了解项目的当前状态、已采取的步骤，以及对预算、进度和范围的预测。</li></ul><h4 id="6-2、监控项目工作的输入（了解）"><a href="#6-2、监控项目工作的输入（了解）" class="headerlink" title="6.2、监控项目工作的输入（了解）"></a>6.2、监控项目工作的输入（了解）</h4><ol><li>项目管理计划</li><li>进度预测 </li><li>成本预测</li><li>确认的变更（<em>批准的变更</em>）</li><li>工作绩效的信息</li><li>事业环境因素</li><li>组织过程资产</li></ol><h4 id="6-3、监控项目工作的工具与技术（了解）"><a href="#6-3、监控项目工作的工具与技术（了解）" class="headerlink" title="6.3、监控项目工作的工具与技术（了解）"></a>6.3、监控项目工作的工具与技术（了解）</h4><ol><li>分析技术（<em>一共十种</em>），下面是几种常见的分析技术：<ol><li>回归分析：回归分析是确定<strong>两种或者两种以上变数间</strong>相互依赖的定量关系的一种统计分析方法。</li><li>根本原因分析：是一项<strong>结构化的问题处理法</strong>，用以逐步找出问题的根本原因 并加以解决，而不是仅仅只关注问题的表征。常用根本原因分析的工具有：因果图、头脑风暴法、因果分析（鱼骨图）等。</li><li>趋势分析：趋势分析法有称<strong>趋势预测法</strong>，用于检查项目绩效随<strong>时间</strong>的变化情况，以确定绩效是在改变还是在恶化 。主要优点是考虑<strong>时间</strong>序列发展趋势，是预测结果能更好地 符合实际。</li></ol></li><li>项目管理信息系统</li><li>会议</li><li>专家判断</li></ol><h4 id="6-4、监控项目工作的输出（了解）"><a href="#6-4、监控项目工作的输出（了解）" class="headerlink" title="6.4、监控项目工作的输出（了解）"></a>6.4、监控项目工作的输出（了解）</h4><ol><li>变更请求</li><li>工作绩效报告</li><li>项目管理计划更新</li><li>项目文件更新</li></ol><hr><h3 id="7、实施整体变更控制"><a href="#7、实施整体变更控制" class="headerlink" title="7、实施整体变更控制"></a>7、实施整体变更控制</h3><h4 id="7-1、实施整体变更控制-的概述（掌握）"><a href="#7-1、实施整体变更控制-的概述（掌握）" class="headerlink" title="7.1、实施整体变更控制 的概述（掌握）"></a>7.1、实施整体变更控制 的概述（掌握）</h4><ol><li>实施整体变更控制过程 <strong>贯穿项目始终，</strong>并且应用于项目的各个阶段。<strong>项目经理</strong>对此负最终责任。</li><li>项目的<strong>任何干系人</strong>都可用提出变更请求。尽管可以口头提出（<em>合同变更除外</em>），但所有变更请求都必须以<strong>书面形式记录</strong>，并纳入变更管理以及配置管理系统中（<em>有变更，必记录</em>）。</li><li>每项记录在案的变更请求都必须由<strong>一位责任人</strong>批准或否决，这个责任人通常是<strong>项目发起人或项目经理。</strong></li><li><strong>必要时（<em>变更影响很大时</em>），应该由 变更控制委员会（CCB）</strong>来决策是否实施整体变更控制过程。<em>（CCB——&gt;变更委员会，必须记住 ）</em></li><li>CCB是一个正式组成的团体 ，是<strong>决策机构</strong>，负责审查、评价、批准、推迟或否决项目变更，以及记录和传达变更处理决定。</li><li>某些特定的变更请求，在CCB批准之后，还可能需要得到客户或<strong>发起人</strong>的批准，除非他们本来就是CCB的成员。</li><li>整体变更控制可以通过<strong>变更委员会CCB和变更控制系统（<em>变更流程</em>）</strong>来完成，但是，整体变更控制不只是变更控制委员会的事情，也是项目经理和项目团队的事情。</li></ol><ul><li>变更控制委员会是由主要项目干系人的代表所组成的一个小组，<strong>项目经理可以是其中的成员，但通常不是组长。</strong></li></ul><h4 id="7-2、整体变更控制的流程（特别掌握）"><a href="#7-2、整体变更控制的流程（特别掌握）" class="headerlink" title="7.2、整体变更控制的流程（特别掌握）"></a>7.2、整体变更控制的流程（特别掌握）</h4><ul><li>变更控制流程：</li></ul><ol><li><strong>提出变更请求。</strong></li><li><strong>项目经理（PM）和团队评估影响。</strong>(<em>评估影响可分为大和小，大由CCB决定，小由PM决定</em>)</li><li><strong>将评估结果通知项目干系人。</strong></li><li><strong>CCB审批。</strong><ol><li><strong>CCB审批不同意，则取消变更。</strong></li><li><strong>CCB同意，继续向下走，如下：</strong></li></ol></li><li><strong>执行变更。</strong></li><li><strong>记录变更 实施情况 。</strong></li><li><strong>分发新文档。</strong></li></ol><ul><li><strong>两句重要的话，死死记住：</strong><ul><li><strong>有变更，必记录。</strong></li><li><strong>有变更，必走流程 。</strong></li></ul></li></ul><h4 id="7-3、整体变更控制输入、工具与技术、输出"><a href="#7-3、整体变更控制输入、工具与技术、输出" class="headerlink" title="7.3、整体变更控制输入、工具与技术、输出"></a>7.3、整体变更控制输入、工具与技术、输出</h4><ol><li>输入：<ol><li>项目管理计划</li><li>工作绩效报告</li><li><strong>变更请求</strong></li><li>事业环境因素</li><li>组织过程资产</li></ol></li><li>工具与技术<ol><li>专家判断、会议</li><li>变更控制工具</li></ol></li><li>输出：<ol><li><strong>批准的变更请求</strong></li><li>变更日志</li><li>项目管理计划更新</li><li>项目文件 更新</li></ol></li></ol><ul><li><strong>注意：</strong><ul><li><strong>在整体变更控制这里，变更请求是输入，批准的变更请求是输出。在别的过程中，批准的变更请求是输入，变更请求是输出。</strong></li></ul></li></ul><hr><h3 id="8、结束项目或阶段"><a href="#8、结束项目或阶段" class="headerlink" title="8、结束项目或阶段"></a>8、结束项目或阶段</h3><h4 id="8-1、结束项目或阶段（掌握）"><a href="#8-1、结束项目或阶段（掌握）" class="headerlink" title="8.1、结束项目或阶段（掌握）"></a>8.1、结束项目或阶段（掌握）</h4><ol><li>输入：<ol><li>项目管理计划 </li><li><strong>验收的可支付成果</strong></li><li>组织过程资产</li></ol></li><li>工具和技术：<ol><li>专家判断、会议</li><li>分析技术（回归分析、趋势分析）</li></ol></li><li>输出：<ol><li><strong>最终产品、服务或成果移交</strong></li><li><strong>组织过程 资产更新</strong></li></ol></li></ol><h4 id="8-2、结束-项目阶段的概述（掌握）"><a href="#8-2、结束-项目阶段的概述（掌握）" class="headerlink" title="8.2、结束 项目阶段的概述（掌握）"></a>8.2、结束 项目阶段的概述（掌握）</h4><ul><li>本过程主要作用是：总结经验教训，正式结束项目工作，为开展新工作而释放组织资源。</li><li>由于项目范围是依据项目管理计划来考核的，项目经理需要<strong>审查范围基准</strong>，确保项目工作全部完成后才宣布项目结束。</li></ul><h4 id="8-3、行政收尾和合同收尾（掌握）"><a href="#8-3、行政收尾和合同收尾（掌握）" class="headerlink" title="8.3、行政收尾和合同收尾（掌握）"></a>8.3、行政收尾和合同收尾（掌握）</h4><ul><li><strong>行政收尾（管理收尾）：</strong><ul><li>当项目结束或项目提前终止时，又或项目每个阶段结束时，需要开展的行政收尾工作。</li></ul></li><li><strong>行政收尾阶段主要工作包括：</strong><ol><li><strong>产品核实</strong></li><li><strong>财务收尾</strong></li><li>更新项目记录</li><li>总结经验教训</li><li>进行组织过程资产更新</li><li>结束项目干系人在项目上的关系 ，<strong>解散项目团队。</strong></li></ol></li><li><strong>合同收尾：</strong><ul><li>指结束合同工作，进行<strong>采购审计</strong>，结束当事人之间的合同关系，并将有关资料收集归档。</li></ul></li><li><strong>先合同收尾，后行政收尾。</strong></li></ul><h4 id="8-4、行政收尾与合同收尾的联系及区别（掌握）"><a href="#8-4、行政收尾与合同收尾的联系及区别（掌握）" class="headerlink" title="8.4、行政收尾与合同收尾的联系及区别（掌握）"></a>8.4、行政收尾与合同收尾的联系及区别（掌握）</h4><ul><li>行政收尾与合同收尾<strong>既有联系又有区别。</strong>联系在于：**都需要进行产品核实，都需要总结经验教训 ，对相关 资料进行整理和归档，更新组织过程 资产。 **</li><li>区别在于：</li></ul><ol><li>行政收尾是针对项目和项目各阶段的，不仅整个项目要进行一次行政收尾，而且每个 项目阶段结束时都要进行相应的行政收尾；而合同收尾是针对合同的，<strong>每一个合同需要且只需要进行一次合同收尾。</strong></li><li>从整个项目说，<strong>合同收尾发生在行政收尾之前。</strong>如果是以合同形式进行的项目，在收尾阶段，先要进行采购审计和合同收尾，然后进行行政收尾。</li><li>从某一个合同的角度说，合同收尾中又包括行政收尾工作（合同的行政收尾）。</li><li>行政收尾要由<strong>项目发起人或高级管理层给项目经理</strong>签发项目阶段结束或项目整体结束的书面确认，而合同收尾则要由<strong>负责采购管理成员（可能是项目经理）向卖方签发合同结束的书面确认。</strong></li></ol><h4 id="8-5、工作绩效（掌握）"><a href="#8-5、工作绩效（掌握）" class="headerlink" title="8.5、工作绩效（掌握）"></a>8.5、工作绩效（掌握）</h4><table><thead><tr><th>工作绩效</th><th>内容</th><th>输入输出</th></tr></thead><tbody><tr><td>工作绩效数据</td><td>是在执行项目工作的过程中，从每个正在执行的活动中收集到的 <strong>原始观察结果和测量值。</strong></td><td>指导和管理项目工作<strong>输出</strong></td></tr><tr><td>工作绩效报告</td><td>是为制订决策、采取行动或引发关注而汇编工作绩效信息 所<strong>形成的实物或电子项目文件。</strong></td><td>监控项目工作<strong>输出 <strong>、实施整体变更</strong>输入</strong></td></tr><tr><td>工作绩效信息</td><td>工作绩效 信息是从各控制过程中收集并 结合项目的相关背景和跨领域关系，进行<strong>整合分析而达到的绩效数据</strong>。绩效信息可包括<strong>可交付成果的状态、变更请求的落实情况及预测的完工 尚需 估算等信息。</strong></td><td>监控项目工作输入</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2020/11/04/juc/"/>
      <url>/2020/11/04/juc/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><span id="more"></span><h2 id="1、什么是JUC？"><a href="#1、什么是JUC？" class="headerlink" title="1、什么是JUC？"></a>1、什么是JUC？</h2><p>​<strong>业务：普通的线程代码 Thread</strong></p><p>​<strong>Runnable：</strong>没有返回值、效率相比 Callable 较低。</p><h2 id="2、线程和进程"><a href="#2、线程和进程" class="headerlink" title="2、线程和进程"></a>2、线程和进程</h2><blockquote><p>线程、进程，如果不能使用一句话说出来的技术，不扎实！</p></blockquote><p><strong>进程：</strong></p><ul><li>一个程序，QQ.exe、Music.exe等程序的集合。</li><li>一个进程往往可以包含多个线程，至少包含一个。</li><li>java默认有几个线程？  2个，GC和main</li></ul><p><strong>线程：</strong></p><ul><li>开了一个进程，比如Typore，写字，自动保存（线程负责的）。</li><li>对于 Java 而言：Thread、Runnable、Callable（这三种开启线程的方法）。</li><li><strong>Java 真的可以开启线程吗？</strong>   不可以，开不了，只能通过本地方法去调。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span><span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable ignore<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//本地方法，调用底层的 c++，无法直接操作硬件</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>并发、并行</p></blockquote><ul><li>并发编程：并行、并发</li><li>并发（多线程操作同一个资源）<ul><li>CPU 一核，模拟出来多条线程，天下武功，唯快不破，快速交替。</li></ul></li><li>并行（多个人一起行走）<ul><li>CPU多核，多个线程可以同时执行。可以使用线程池提高性能。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取cpu核数</span>        <span class="token comment" spellcheck="true">//cpu 密集型，IO密集型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>并发编程的本质：<strong>充分利用 CPU 的资源。</strong></li></ul><blockquote><p>线程有几个状态：（源码中有6钟状态）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、新生</span>    NEW<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//2、运行</span>    RUNNABLE<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//3、阻塞</span>    BLOCKED<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//4、等待（死死的等）</span>    WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//5、超时等待</span>    TIMED_WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//6、终止</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>wait() / sleep() 区别</p></blockquote><ul><li><p>来自不同的类</p><ul><li>wait() ===&gt; Object类</li><li>sleep() ===&gt; Thread类</li></ul></li><li><p>关于锁的释放</p><ul><li>wait() 会释放锁。</li><li>sleep() 抱着锁睡觉，不会释放锁。</li></ul></li><li><p>使用范围不同</p><ul><li>wait() 必须在同步代码块钟使用。</li><li>sleep() 可以在任何地方睡。</li></ul></li><li><p>是否需要捕获异常</p><ul><li>wait() 不需要捕获异常</li><li>sleep() 必须要捕获异常</li></ul></li></ul><h2 id="3、Lock锁（重点）"><a href="#3、Lock锁（重点）" class="headerlink" title="3、Lock锁（重点）"></a>3、Lock锁（重点）</h2><blockquote><p>Synchronized锁</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//基本的卖票例子</span><span class="token comment" spellcheck="true">/**    真正的多线程开发，公司中的开发，降低耦合性    线程就是一个单独的资源类，没有任何附属的操作。    1、属性、方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//并发：多线程操作同一个资源，把资源丢入资源</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用lambda表达式</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thred</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//资源类 OOP</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性、方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//卖票的方式</span>    <span class="token comment" spellcheck="true">//synchronized: 本质：队列，锁</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖出了"</span><span class="token operator">+</span><span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票，剩余"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Lock （接口）</p></blockquote><ul><li>lock()  加锁</li><li>unlock()  解锁</li><li>实现类：<ul><li>ReadLock :  读锁</li><li>WriteLoce：  写锁</li><li>ReentrantLock：  可重入锁（常用）</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//非公平锁</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公平锁</span>    sync <span class="token operator">=</span> fir <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>公平锁：十分公平，可以先来后到</li><li>非公平锁：十分不公平，可以插队（默认使用非公平锁）</li></ul><blockquote><p>Lock三部曲</p></blockquote><ul><li>Lock lock = new ReentrantLock();</li><li>lock.lock();  //加锁</li><li>lock.unlock();  //解锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//基本的卖票例子</span><span class="token comment" spellcheck="true">/**    真正的多线程开发，公司中的开发，降低耦合性    线程就是一个单独的资源类，没有任何附属的操作。    1、属性、方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//并发：多线程操作同一个资源，把资源丢入资源</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用lambda表达式</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Lock三部曲</span><span class="token comment" spellcheck="true">//1、 Lock lock = new ReentrantLock();</span><span class="token comment" spellcheck="true">//2、 lock.lock();  //加锁</span><span class="token comment" spellcheck="true">//3、 lock.unlock();  //解锁</span><span class="token comment" spellcheck="true">//资源类 OOP</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性、方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//卖票的方式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加锁</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖出了"</span><span class="token operator">+</span><span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票，剩余"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//解锁 </span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><blockquote><p>synchronized 和 Lock 区别</p></blockquote><ul><li>synchronized 是内置的 java 关键字， Lock 是一个 java 类。</li><li>synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁。</li><li>synchronized 可以自动释放锁， Lock 必须手动释放锁，如果不释放，死锁。</li><li>synchronized 线程1（获得锁，阻塞）、线程2（等待，傻傻的等）； Lock 锁就不一定会等下去。</li><li>synchronized 可重入锁，不可以中断的，非公平； Lock ，可重入锁，可以判断锁，非公平（可以自己设置）。</li><li>synchronized 适合锁少量的代码同步问题， Lock 适合锁大量的同步代码。</li></ul><blockquote><p>锁是什么？如何判断锁的是谁？</p></blockquote><h2 id="4、生产者和消费者问题"><a href="#4、生产者和消费者问题" class="headerlink" title="4、生产者和消费者问题"></a>4、生产者和消费者问题</h2><p>面试的：单利模式、排序算法、生产者和消费者、死锁</p><blockquote><p>生产者和消费者问题 synchronized版</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    线程之间的通信问题：生产者与消费者问题!   等待唤醒，通知唤醒    线程交替执行 A B 操作同一个变量 num=0    A num+1    B num-1    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数字 资源类</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// +1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知其他线程，我 +1 完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// -1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，我 -1 完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//A,B两条线程，没有问题，如果增加多条线程出现问题</span></code></pre><blockquote><p>问题存在！ A,B,C,D 四个线程！虚假唤醒</p></blockquote><ul><li>线程也可以唤醒，而不会被通知，即所谓的虚假唤醒</li><li>解决虚假唤醒——&gt; 等待应该总是出现在循环中</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>修改：将 if 改为 while</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    线程之间的通信问题：生产者与消费者问题!   等待唤醒，通知唤醒    线程交替执行 A B 操作同一个变量 num=0    A num+1    B num-1    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数字 资源类</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// +1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知其他线程，我 +1 完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// -1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，我 -1 完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出问题解决</span></code></pre><blockquote><p>JUC 的生产者和消费者问题</p></blockquote><p><strong>通过Lock找到Condition</strong>(接口)</p><table><thead><tr><th>synchronized</th><th>wait();</th><th>nitifyAll();</th></tr></thead><tbody><tr><td>Lock</td><td>await();</td><td>signal();</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    线程之间的通信问题：生产者与消费者问题!   等待唤醒，通知唤醒    线程交替执行 A B 操作同一个变量 num=0    A num+1    B num-1    */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数字 资源类</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//condition.await();  //等待</span>    <span class="token comment" spellcheck="true">//condition.signalAll();  //唤醒全部</span>        <span class="token comment" spellcheck="true">// +1</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">//业务代码</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知其他线程，我 +1 完毕了</span>        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// -1</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务代码</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，我 -1 完毕了</span>        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//问题 输出 A,B,C,D 不连续，随机状态</span><span class="token comment" spellcheck="true">//需要解决 成为有序执行 A,B,C,D</span></code></pre><p><strong>使用一个新的技术，绝对不是仅仅只是覆盖了原来的技术，优势和补充。</strong></p><blockquote><p>Condition 可以精准的通知和唤醒线程 </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Condition 可以精准的通知和唤醒线程 </span><span class="token comment" spellcheck="true">/**    A执行完调用B，B执行完调用C，C执行完调用A*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//资源类 Lock</span>        <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//A  2B  3C</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加锁</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务，判断 -> 执行 -> 通知</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待</span>             <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==> AAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//唤醒指定的人,B</span>            number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务类 判断 -> 执行 -> 通知</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"BBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//唤醒，唤醒指定的人C</span>            number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务类 判断 -> 执行 -> 通知</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"CCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//唤醒，唤醒指定的人A</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//生产线：下单 --> 支付 --> 交易 --> 物流</span>    <span class="token punctuation">}</span></code></pre><h2 id="5、-八锁现象"><a href="#5、-八锁现象" class="headerlink" title="5、 八锁现象"></a>5、 八锁现象</h2><p>如何判断锁的是谁！永远的知道什么锁，锁到底锁的是谁！深刻理解锁。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    8锁，就是关于锁的八个问题    1、标准情况下，两个线程先打印发短信还是打电话呢？        答案是：1.发短信  2，打电话        因为：1、synchronized 锁的对象是方法的调用者，             2、两个方法用的是同一个锁，所以谁先拿到谁先执行。    2、发短信sendSms方法延迟4秒，两个线程 先执行发短信还是打电环？        答案是：1、发短信 2、打电话        因为：1、synchronized 锁的对象是方法的调用者，             2、两个方法用的是同一个锁，所以谁先拿到谁先执行。        */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发消息</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者。</span>    <span class="token comment" spellcheck="true">//两个方法用的是同一个锁，谁先拿到谁执行。</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    3、增加了一个普通方法后，先执行发短信还是hello        答案是：1、hello  2、发短信        因为：新增加的方法没有锁，不是同步方法，不受锁的影响。    4、两个对象，两个同步方法，先执行发短信还是打电话？        答案是：1、打电话  2、发短信        因为：synchronized 锁的是对象的调用者              两个对象，两个方法用的不是同一个锁。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个对象，两个调用者，两把锁。</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发消息</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者。</span>    <span class="token comment" spellcheck="true">//发消息和打电话两个方法用的是同一个锁，谁先拿到谁执行。</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//加一个方法</span>    <span class="token comment" spellcheck="true">//这里没有锁，不是同步方法，不受锁的影响</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    5、增加两个静态的同步方法，只有一个对象，先打印发消息还是先打印打电话。        答案：1、发短信  2、打电话        因为：synchronized 锁的是对象的调用者              static 静态方法              类一加载，锁的是class        */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Phone 唯一的一个 class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发短信</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者</span>    <span class="token comment" spellcheck="true">//static 静态方法</span>    <span class="token comment" spellcheck="true">//类一加载，锁的是class</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    6、两个对象，增加两个静态的同步方法，两个对象，先发短信还是打电话。        答案：1、发短信  2、打电话        原因：两个对象的Class模板只有一个，两个对象在同一个类            static 锁的是 Class*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Phone 唯一的一个 class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发短信</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者</span>    <span class="token comment" spellcheck="true">//static 静态方法</span>    <span class="token comment" spellcheck="true">//类一加载，锁的是class</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    7、一个静态的同步方法，一个普通的同步方法，一个对象，先打印发短信还是打电话。        答案：1、打电话  2、发短信        原因：静态同步方法，static，锁的是类             普通同步方法，锁的是调用者             两个方法用的不是同一个锁             普通同步方法不需要等待静态同步方法锁。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Phone 唯一的一个 class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发短信</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者</span>    <span class="token comment" spellcheck="true">//static 静态方法</span>    <span class="token comment" spellcheck="true">//类一加载，锁的是class</span>    <span class="token comment" spellcheck="true">//静态同步方法锁的是 class 类模板</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token comment" spellcheck="true">//同步方法 锁的是调用者 </span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    8、一个静态同步方法，普通同步方法，两个对象，先打印发短信还是打电话？        答案：1、打电话  2、发短信        原因：静态同步方法锁的是类模板              普通同步方法锁的是调用者              而且还是两个对象*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//休息1秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Phone 唯一的一个 class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//手机发短信</span>    <span class="token comment" spellcheck="true">//synchronized 锁的对象是方法的调用者</span>    <span class="token comment" spellcheck="true">//static 静态方法</span>    <span class="token comment" spellcheck="true">//类一加载，锁的是class</span>    <span class="token comment" spellcheck="true">//静态同步方法锁的是 class 类模板</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发消息"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//手机打电话</span>    <span class="token comment" spellcheck="true">//同步方法 锁的是调用者 </span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>八锁现象小结</p></blockquote><ul><li>new 、 this  ：具体的一个手机。</li><li>class :  唯一的一个模板。</li><li>一个对象有多个synchronized,那么他们拿的肯定是同一把锁。</li><li>两个对象，两个同步方法，两个对象用的不是同一把锁。</li><li>两个对象，两个静态同步方法，static 锁的是类模板，两个对象在一个类中，就是一个模板了。</li></ul><h2 id="6、集合类不安全"><a href="#6、集合类不安全" class="headerlink" title="6、集合类不安全"></a>6、集合类不安全</h2><blockquote><p>List 不安全</p><blockquote><p>CopyOnWriteArrayList</p></blockquote></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    java.util.ConcurrentModificationException 并发修改异常！*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>｛                <span class="token comment" spellcheck="true">/*        List&lt;String> list = Arrayas.asList("1","2","3");        list.forEach(System.out::println);        */</span>                <span class="token comment" spellcheck="true">//并发下 ArrayList 不安全的</span>        <span class="token comment" spellcheck="true">//输出结果会报错</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">rangomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    ｝<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>｛                        <span class="token comment" spellcheck="true">//并发下 ArrayList 不安全的</span>        <span class="token comment" spellcheck="true">//List&lt;String> list = new ArrayList&lt;>();</span>                <span class="token comment" spellcheck="true">/*            解决方案一：(Vector)                List&lt;String> list = new Vector&lt;>();            解决方案二：(集合工具类：Collections)                List&lt;String> list = Collections.synchronizedList(new ArrayList&lt;>());            解决方案三：(JUC下的CopyOnWriteArrayList)                List&lt;String> list = new CopyOnWriteArrayList&lt;>();        */</span>                <span class="token comment" spellcheck="true">//CopyOnWrite  写入时复制 简称COW 计算机程序设计领域的一种优化策略。</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">rangomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    ｝<span class="token punctuation">}</span></code></pre><ul><li><p>并发下 ArrayList 不安全</p><ul><li><p>解决方案一：（Vector线程安全，不推荐）</p><ul><li><pre class=" language-jav"><code class="language-jav">List<String> list = new Vector<>();</code></pre></li></ul></li><li><p>解决方案二：（集合工具类：Collections.synchronizedList(new ArrayList&lt;&gt;());）</p><ul><li><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>解决方案三：（JUC下的 CopynWriteArrayList）</p><ul><li><pre class=" language-jav"><code class="language-jav">List<String> list = new CopyOnWriteArrayList<>();</code></pre></li></ul></li></ul></li><li><p>CopyOnWrite:</p><ul><li>写入时复制，简称COW，计算机领域的一种优化策略。</li><li>多个线程调用的时候，list，读取的时候，固定的，写入时会（覆盖）。</li><li>CopyOnWrite，写入时复制，在写入时避免覆盖，造成数据问题。</li><li>读写分离</li></ul></li><li><p>CopyOnWrite 比 Vector 牛逼在哪里？</p><ul><li>Vector 使用的是 synchronized 锁。</li><li>CopyOnWrite 使用的是 Lock 锁。</li></ul></li></ul><blockquote><p>set 不安全</p><blockquote><p>CopyOnWriteArraySet</p></blockquote></blockquote><ul><li><p>解决方案：</p><ul><li><p>解决方案一：（使用集合工具类Collections）</p><ul><li><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>解决方案二：（使用 JUC 下的 CopyOnWriteArraySet）</p><ul><li><p>写入时复制，保证效率、安全、性能等问题。</p></li><li><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    同理可证：        出现异常： ConcurrentModificationException        并发修改异常*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//并发下，HashSet 不安全</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    解决方案一：(集合工具类：Collections.synchronizedSet)        Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());            解决方案二：（JUC下的 CopyOnWriteArraySet）        写入时复制，保证效率和性能问题。        Set&lt;String> set = new CopyOnWriteArraySet&lt;>();*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//并发下，HashSet 不安全</span>        <span class="token comment" spellcheck="true">//Set&lt;String> set = new HashSet&lt;>();</span>                <span class="token comment" spellcheck="true">//解决方案一：</span>        <span class="token comment" spellcheck="true">//Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span>                <span class="token comment" spellcheck="true">//解决方案二：</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>HashSet 底层</p></blockquote><ul><li>HashSet 底层是 HashMap , HashSet 就是 HashMap 的 key。</li><li>Map 的 key 不能重复，所以 Set 也不能重复。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//add 方法</span><span class="token comment" spellcheck="true">//set 本质就是 map  key 是无法重复 的。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>PRESENT<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object  PRESNT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不变的值。</span></code></pre><blockquote><p>Map 不安全</p><blockquote><p>ConcurrentHashMap </p></blockquote></blockquote><ul><li>HashMap 默认初始化容量 16， HashMap 默认加载因子 0.75。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    输出结果，出现异常        ConcurrentModificationException        并发修改异常*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//map 是这样用的嘛？  不是，工作中不用 HashMap </span>        <span class="token comment" spellcheck="true">// 默认等价于什么？  new HashMap&lt;>(16, 0.75);</span>        <span class="token comment" spellcheck="true">//加载因子 0.75</span>        <span class="token comment" spellcheck="true">//初始化容量 16</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sunString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    Map 不安全    解决方案：        Map&lt;String,String> map = new ConcurrentHashMap&lt;>();*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UUID<span class="token punctuation">.</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7、Callable-简单"><a href="#7、Callable-简单" class="headerlink" title="7、Callable (简单)"></a>7、Callable (简单)</h2><blockquote><p>Callable接口 和 Runnable接口 区别</p></blockquote><ul><li>可以有返回值。</li><li>可以抛出异常。</li><li>方法不同，Runnable是run();   Callable接口 是 call();方法。</li></ul><blockquote><p>代码测试</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//适配类</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//增加一个线程B，会打印几个 call</span>        <span class="token comment" spellcheck="true">//答案是 一个 ，</span>        <span class="token comment" spellcheck="true">//因为结果会被缓存，效率高。</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取 Callable 的返回值结果</span>        Integer o <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这个get方法可能会产生阻塞，把它放到最后，或者使用异步通信。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//重写 call 方法</span>    <span class="token comment" spellcheck="true">//实现的接口 callable&lt;Integer> ,&lt;> 中的类型是什么，方法的返回值就是什么。</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>细节：</strong></p><ul><li>有缓存。</li><li>结果可能需要等待，会阻塞。</li></ul><h2 id="8、常用的辅助类（必会）"><a href="#8、常用的辅助类（必会）" class="headerlink" title="8、常用的辅助类（必会）"></a>8、常用的辅助类（必会）</h2><h3 id="8-1、CountDownLatch"><a href="#8-1、CountDownLatch" class="headerlink" title="8.1、CountDownLatch"></a>8.1、CountDownLatch</h3><ul><li><p>CountDownLatch</p><ul><li><p>减法计数器</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatch</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>允许一个或多个线程等待直到在其他线程中执行的一组操作完成的同步辅助。</p></li><li><p>A CountDownLatch 用给定的计数初始化。</p></li></ul></li><li><p>代码实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    计数器*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throw</span> Exception<span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//总数是 6，必须要执行任务的时候，再使用。</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"Go Out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数量  -1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等待计数器归零，需要在向下执行。</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Close Door (关门)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>原理：</strong></p><p>​<code>countDownLatch.countDown();</code>    //数量 -1.</p><p>​<code>countDownLatch.await();</code>   //等待计数器归零，然后在向下执行。</p><p>​每次有线程调用 countDownLatch()； 数量 -1，假设计数器变为0， countDownLatch.await() 就会被唤醒，继续执行。</p></li></ul><h3 id="8-2、CyclicBarrier"><a href="#8-2、CyclicBarrier" class="headerlink" title="8.2、CyclicBarrier"></a>8.2、CyclicBarrier</h3><ul><li>加法计数器</li></ul><blockquote><p>代码测试</p></blockquote><pre class=" language-JAVA"><code class="language-JAVA">public class CyclicBarrierDemo{    public static void main(String[] args){        /*            集齐七课龙珠召唤神龙        */        //召唤龙珠的线程        CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> {            System.out.println("召唤神龙成功。");        });                 //七颗龙珠，七个线程        for(int i = 0;i <= 7;i++){                        //lambda 能操作到i 嘛？  不能                        //需要用final            final int temp = i;                        new Thread(() -> {                System.out.println(Thread.currentThread().getName()+"收集"+ temp + "个龙珠");                                try{                    cyclicBarrier.await();  //等待                }catch(Exception e){                    e.printStackTrace();                }                            }).start();        }    }}</code></pre><h3 id="8-3、Semaphore"><a href="#8-3、Semaphore" class="headerlink" title="8.3、Semaphore"></a>8.3、Semaphore</h3><ul><li>Semaphore  信号量。</li><li>限流使用多</li><li>Semaphroe 原理：<ul><li>semaphroe.acquire();  获得，假设如果已经满了，等待，等待被释放为止。</li><li>semaphroe.release();  释放，会将当前的信号量 +1，然后唤醒等待的线程 。</li></ul></li><li>作用：<ul><li>多个共享资源互斥的使用。</li><li>并发限流，控制最大的线程数。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    代码案例        抢占车位：            三个车位，六个车            限流*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//线程数量，停车位</span>        <span class="token comment" spellcheck="true">//3个停车位</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//6个车，六个线程</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">// acquire();  得到</span>                <span class="token comment" spellcheck="true">// release();  释放</span>                                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//得到停车位</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢占到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//车在车位停2秒</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//释放</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="9、读写锁"><a href="#9、读写锁" class="headerlink" title="9、读写锁"></a>9、读写锁</h2><blockquote><p><strong>ReadWriteLock</strong></p></blockquote><ul><li><p>读可以被多线程同时读。</p></li><li><p>写的时候只能有一个线程去写。</p></li><li><p>ReadWriteLock 维护一对关联的 lock，一个用于只读操作，一个用于写入操作。读锁可以由多个线程同时读取。写锁只允许一个线程 去写。</p></li><li><p>ReadWriteLock 三种情况</p><ul><li>读——读      可以共存</li><li>读——写      不可以共存</li><li>写——写      不可以共存</li></ul></li><li><p>独占锁（写锁）：一次只能被一个线程占有。</p></li><li><p>共享锁（读锁）：多个线程可以同时占用。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    ReadWriteLock  读写锁*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//自定义的，未加锁</span>        <span class="token comment" spellcheck="true">/*            输出结果：                        1写入1            3写入3            ......        */</span>        MyCache myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//加锁的</span>        <span class="token comment" spellcheck="true">/*            输出结果：                        1写入1            1写入成功            5写入5            5写入成功            ......        */</span>        MyCache2 myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//写入，五个线程</span>        <span class="token comment" spellcheck="true">//写入不安全，乱插的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里的i 不能直接访问，需要使用 final 定义变量转换</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span>temp <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    加锁的*/</span><span class="token keyword">class</span> <span class="token class-name">MyCache2</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new 锁</span>    <span class="token comment" spellcheck="true">//读写锁，更加细粒度的控制</span>    <span class="token comment" spellcheck="true">//写入的时候，只希望同时只有一个线程写。</span>    <span class="token comment" spellcheck="true">//读的时候多个线程都可以读</span>    <span class="token keyword">private</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存，写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>                readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//解锁</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//取，读</span>    <span class="token comment" spellcheck="true">//所有人都可以读取</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//读锁</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//解锁</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    自定义缓存*/</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//存，写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//取，读</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="10、阻塞队列"><a href="#10、阻塞队列" class="headerlink" title="10、阻塞队列"></a>10、阻塞队列</h2><ul><li><p>队列：先进先出（FIFO）</p></li><li><p>阻塞队列：</p><ul><li>FIFO</li><li>写入：如果队列满了，就必须阻塞等待。</li><li>读取：如果队列是空的，必须阻塞等待生产。</li></ul></li><li><p>阻塞队列</p><ul><li>BlockingQueue 接口<ul><li>BlockingQueue 接口的父接口 Collection接口</li><li>主要实现类： ArrayBlockingQueue 数组阻塞队列、 LinkedBlockingQueue 链表阻塞队列 、 SynchronousQueue 同步队列。</li></ul></li></ul></li><li><p>什么情况下我们会使用阻塞队列？</p><ul><li>多线程并发处理  </li><li>线程池</li></ul></li><li><p>学会使用队列</p><ul><li>添加、移除</li></ul></li><li><p>四组API：</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不会抛出异常，有返回值</th><th>阻塞 等待（一直阻塞）</th><th>超时 等待（等待超时）</th></tr></thead><tbody><tr><td>添加</td><td>add();</td><td>offer();</td><td>put();</td><td>offer( , , );</td></tr><tr><td>移除</td><td>remove();</td><td>poll();</td><td>take();</td><td>poll( , );</td></tr><tr><td>检测队首元素</td><td>element();</td><td>peek();</td><td></td><td></td></tr></tbody></table><ul><li>抛出异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">blockingQueueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blockingQueueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里的 3 是队列的大小</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存，写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>                <span class="token comment" spellcheck="true">//这时在添加一个元素</span>        <span class="token comment" spellcheck="true">//会报异常</span>        <span class="token comment" spellcheck="true">//IllegalStateException : Queue full  抛出异常</span>        <span class="token comment" spellcheck="true">//System.out.println(blockingQueue.add("d"));</span>                <span class="token comment" spellcheck="true">//查看队首的元素是谁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// b</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// c</span>                <span class="token comment" spellcheck="true">//已经将队列中的元素删除完了</span>        <span class="token comment" spellcheck="true">//这时在删除一个元素</span>        <span class="token comment" spellcheck="true">//就会报异常</span>        <span class="token comment" spellcheck="true">//java.util.NoSuchElementException  没有元素的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>不会抛出异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    有返回值，没有异常*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里的 3 是队列的大小</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存，写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>                <span class="token comment" spellcheck="true">//队列已经添加满，在添加一个元素</span>        <span class="token comment" spellcheck="true">//不会报异常</span>        <span class="token comment" spellcheck="true">//返回 false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//检查队首的元素是谁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// b</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// c</span>                <span class="token comment" spellcheck="true">//队列中已经取完</span>        <span class="token comment" spellcheck="true">//在取一个元素</span>        <span class="token comment" spellcheck="true">//不会出现异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>阻塞等待</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//3 是队列大小</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一直阻塞</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//队列没有位置了，增加d</span>        <span class="token comment" spellcheck="true">//队列没有位置了，会一直阻塞</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// b</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// c</span>                <span class="token comment" spellcheck="true">//没有这个元素</span>        <span class="token comment" spellcheck="true">//会一直阻塞</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>超时等待</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//等待两秒，如果还没有位置，退出 结束</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//等待超过两秒，退出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>SynchronousQueue  同步队列</p></blockquote><ul><li>没有容量。</li><li>进去一个元素，必须等待取出来之后，才能往里面放一个元素。</li><li>put    take</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    同步队列 SynchronousQueue        SynchronousQueue 同步队列，和其他的 阻塞队列 BlockingQueue 不一样，    SynchronousQueue 同步队列，不存储元素    put 了一个元素，必须从里面先 take 取出来，否则不能再put 进去值。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">pue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStartTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//取</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="11、线程池（重点）"><a href="#11、线程池（重点）" class="headerlink" title="11、线程池（重点）"></a>11、线程池（重点）</h2><p><strong>线程池必会：三大方法、七大参数、四种拒绝策略。</strong></p><blockquote><p>池化技术</p></blockquote><ul><li>程序的运行本质：占用系统的资源！优化资源的使用！ ==》 池化技术。</li><li>线程池、连接池、内存池、对象池、常亮池等………</li><li>池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后还给我。</li></ul><blockquote><p>线程池的好处：</p></blockquote><ul><li>降低资源的消耗。</li><li>提高响应的速度。</li><li>方便管理。</li><li><strong>线程复用，可以控制最大并发数，管理线程</strong></li></ul><blockquote><p>线程池：三大方法</p></blockquote><ul><li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规则资源耗尽的风险。</li><li>说明：Executors 返回的线程池对象的弊端如下：<ul><li>FixedThreadPool 和 SingleThreadPool；<ul><li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</li></ul></li><li>CachedThreadPool  和 ScheduledThreadPool:<ul><li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   Executors 工具类，三大方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorsDemo</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>              Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//单个线程</span>       Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个固定大小的线程，这里是5个线程</span>       Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可伸缩的，遇强则强，遇弱则弱</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    Executors.newSingleThreadExecutor();  //单个线程*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">newSingleThreadExcutorDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//单个线程</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExetor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//使用了线程池之后，使用线程池创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//线程池用完，程序结束，关闭线程池</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历</title>
      <link href="/2020/10/25/jian-li/"/>
      <url>/2020/10/25/jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="简历-需PDF格式"><a href="#简历-需PDF格式" class="headerlink" title="简历    需PDF格式"></a>简历    <font color="blue">需PDF格式</font></h1><span id="more"></span><h1 id="杜倍成-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195"><a href="#杜倍成-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195-amp-8195" class="headerlink" title="杜倍成&amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; "></a><font face="楷体">杜倍成</font>&amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; &amp;#8195; <img src="E:\c-blog\src\main\resources\static\images\wx.jpg" alt="wx" style="zoom:16%;"></h1><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><h2 id="necktie-Java开发-x2F-Development-Engineer"><a href="#necktie-Java开发-x2F-Development-Engineer" class="headerlink" title=":necktie:  Java开发 / Development Engineer "></a><span class="github-emoji"><span>👔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <font face="楷体">Java开发 / <em>Development Engineer</em> </font></h2><ul><li><span class="github-emoji"><span>👦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   男</li><li><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   18694049917</li><li><span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   <a href="mailto:codefish1207@163.com">codefish1207@163.com</a></li><li><span class="github-emoji"><span>📘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   电子信息工程专业（本科）</li><li><span class="github-emoji"><span>⌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   应届生</li><li><span class="github-emoji"><span>🌈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   <a href="https://javacookieboy.github.io/">https://javacookieboy.github.io</a></li></ul><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><h2 id="briefcase-​技能-x2F-Skill"><a href="#briefcase-​技能-x2F-Skill" class="headerlink" title=":briefcase:  ​技能 / Skill  "></a><span class="github-emoji"><span>💼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  ​<font face="楷体">技能 / <em>Skill</em>  </font></h2><ul><li>熟悉Java基础，掌握（OOP）面向对象的编程思想，有良好的编程习惯。</li><li>熟悉Java集合框架、多线程、反射，对集合框架源码、数据结构有一定了解。</li><li>熟悉JVM工作原理、JVM内存分配、JVM垃圾回收机制。</li><li>熟悉MySQL关系型数据库对数据进行CRUD操作，掌握索引原理、事务、三范式等。</li><li>熟悉Redis缓存技术对数据处理，掌握其数据类型、持久化等。</li><li>熟悉Jsp、Servlet、Jdbc，熟练使用Tomcat服务器，发布部署web项目，具备独立开发能力。</li><li>熟悉前端技术HTML、CSS、JavaScript、jQuery、Ajax，Thymeleaf等，了解Vue等前端框架。</li><li>熟悉Spring的IOC、DI、AOP设计思想等；熟悉Mybatis使用以及缓存等；熟悉SpringMVC工作原理和常用注解等；熟悉Spring Boot自动装配以及使用其完成项目开发；使用SpringSecurity授权认证；掌握主流框架的整合开发，熟悉B/S架构开发。</li><li>熟悉JSON、XML，熟悉使用RestFul风格开发规范。</li><li>熟悉Linux常用操作命令，在Linux操作系统中进行项目部署和问题排查。</li><li>熟练使用Eclipse/IDEA、Git、Maven等开发及版本控制工具。</li><li>了解SpringCloud常用组件：Eureka、Ribbon、Config、Hystrix、Gateway、Bus等。</li><li>了解SpringCloud Alibaba的Nacos 服务注册和配置中心、Sentinel 实现熔断与限流、Seata 分布式事务。</li></ul><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><h2 id="tophat-教育-x2F-Education"><a href="#tophat-教育-x2F-Education" class="headerlink" title=":tophat:  教育 / Education "></a><span class="github-emoji"><span>🎩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <font face="楷体">教育 / <em>Education</em> </font></h2><ul><li>学校：武汉工程科技学院<ul><li>专业：电子信息工程（2017.9 ~ 至今）<ul><li>主修课程：Java(课堂与自学)、C语言、计算机应用技术、单片机、嵌入式、通信原理、MySQL、专业 英语等（前30%）。</li></ul></li></ul></li></ul><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><h2 id="file-folder-项目-x2F-Project"><a href="#file-folder-项目-x2F-Project" class="headerlink" title=":file_folder:  项目 / Project"></a><span class="github-emoji"><span>📁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font face="楷体"> 项目 / <em>Project</em></font></h2><p><strong>项目：my-site</strong></p><ul><li>项目描述：<ul><li>该项目是我之前学习的一个项目，一个较为完整的博客系统，具备了常见的博客相关功能，初衷就是为了锻炼自己，体验完成项目的过程。</li></ul></li><li>功能模块：<ul><li>用户的登陆与注册、发表博客、博客查阅、博客删除、博客评论、个人信息页、全文搜索、首页信息显示、所有博客列表、访问量、赞赏、为管理员提供了后台管理系统，如用户管理、博客管理等。</li></ul></li><li>项目技术：<ul><li>前端：Thymeleaf模板引擎、BootStrap以及jQuery。</li><li>后端：SpringBoot做基础框架、SpringSecurity做授权与认证、全文检索Elasticsearch、数据库MySQL。</li></ul></li><li>项目实现：<ol><li>使用Thymeleaf模板引擎做前端页面的渲染；使用BootStrap完成响应式布局；jQuery完成功能控制等。</li><li>后端部分，使用SpringBoot做基础框架。</li><li>数据库使用MySQL，用户表 、博客标签表、博客评论表、博客分类表等。</li><li>首页的热点信息及关键词搜索功能，使用了全文搜索技术(Elasticsearch)。</li><li>权限控制以及用户认证登陆等功能，使用了安全框架SpringSecurity，负责认证与授权。</li><li>注册或者博客内容，在页面及实体上添加了校验，如实体类引入Bean校验注解，保证了后台代码安全。</li><li>博客集成了MarkDown、代码高亮、目录生成、平滑滚动、内容排版等插件。</li></ol></li></ul><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><h2 id="baby-关于我-x2F-About-me"><a href="#baby-关于我-x2F-About-me" class="headerlink" title=":baby:  关于我 / About me"></a><span class="github-emoji"><span>👶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <font face="楷体">关于我 / <em>About me</em></font></h2><ul><li>喜欢运动，在校参加三年运动会，获得13个荣誉证书。在校国旗护卫队担任副队，班级担任体委。</li><li>从大二接触Java后，目标明确，自学Java，习惯用MarkDown、博客、有道云记录学习笔记。</li><li>热爱编程，自学能力强，了解新技术；以目标为导向，对人对己都负责到底。</li><li>工作中：有责任心、时间观念强、注重工作效率、富有开拓意识和心理承受能力、主动和高效沟通。</li><li>缺点：在学校中自主学习缺乏经验，需进一步锻炼。</li></ul><hr><p><font color="#0000FF">******************************************************************************************************************************************************************************************************************************************************</font></p><center>@2020 interview applicants 杜倍成</center><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201027142938160.png" alt="image-20201027142938160"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201027143013001.png" alt="image-20201027143013001"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 简历 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结</title>
      <link href="/2020/10/25/java-chong-yao-zhi-shi-dian-zong-jie/"/>
      <url>/2020/10/25/java-chong-yao-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA重要知识点总结"><a href="#JAVA重要知识点总结" class="headerlink" title="JAVA重要知识点总结"></a>JAVA重要知识点总结</h1><span id="more"></span><h2 id="1、HashMap原理"><a href="#1、HashMap原理" class="headerlink" title="1、HashMap原理"></a>1、HashMap原理</h2><ul><li>HashMap 是集合结构中非常重要的一个类，很多框架的一个底层的缓存呢，都是通过 HashMap 来实现的，HashMap 的底层在 jdk1.7 的时候基于数组+链表的一个方式实现的，但是由于可能出现循环链表以及链表深度过深的一个问题，在 jdk1.8 的时候，底层结构修改为数组+链表+红黑树的方式实现，那么底层主要是通过 key 进行 hash 运算，并与数组的一个最大索引进行运算，得到键值对数组中存放的一个位置，如果说产生 hash 冲突，则可能形成链表，当链表的长度大于等于 8 时，以及数组的长度大于 64 的时候，链表转换为红黑树提高效率。那么在平常使用中，如果没有涉及到线程安全的问题的话，我们通常会使用 HashMap ，如果说有线程安全的问题的话，我们通常会使用 concurrent HashMap 或者 HashTable。</li></ul><h2 id="2、SpringMVC-执行流程"><a href="#2、SpringMVC-执行流程" class="headerlink" title="2、SpringMVC 执行流程"></a>2、SpringMVC 执行流程</h2><ul><li><p>用户向服务器发送请求，请求会被 SpringMVC 前端控制器 DispacterServlet 捕获。</p></li><li><p>DispacterServlet 对请求 URL 进行解析，然后根据该 URL 进行调用 HandlerMapping 将请求映射到处理器。</p></li><li><p>DispacterServlet 根据获得 Handler 选择一个合适的适配器处理。</p></li><li><p>Handler 对数据处理完成以后将返回一个 ModelAndView() 对象给 DispacterServlet。</p></li><li><p>Handler 返回的 ModelAndView() 只是一个逻辑视图，并不是一个正式的视图， DispacterServlet 通过视图解析器将逻辑视图转化为真正的视图。</p></li><li><p>最后，DispacterServlet 通过 model 解析出 ModelAndView() 中的参数进行解析最终展现出完整的视图并返回给客户端。</p></li></ul><h2 id="3、什么是Redis"><a href="#3、什么是Redis" class="headerlink" title="3、什么是Redis"></a>3、什么是Redis</h2><ul><li><p>Redis就是一个数据库，不过与传统的数据库不同的是 Redis 的数据是存储在内存中的，所以存写速度非常快，因此 Redis 被广泛应用于缓存方向。</p></li><li><p>Redis 提供了多种数据类型来支持不同的业务场景，除此之外，Redis 支持事务、持久化、集群，Redis 也经常用来做分布式锁。</p></li><li><p>Redis 默认有 16 个数据库，默认使用的是第 0 个数据库，可以使用 select 进行数据库切换。</p></li><li><p>Redis 端口号是 6379 。 </p></li><li><p>Redis 是单线程的，Redis 是基于内存操作， CPU 不是 Redis 的性能瓶颈， Redis 的性能瓶颈 是根据物理机的内存和网络快带的。一般人们都会认为高性能的服务器都是多线程，因为多线程 CPU 会上下文切换，效率高，但 Redis 是将所有的数据都存在内存中的，对于内存系统来说，如果 CPU 不上下文切换，效率才是最高的。多次读写都是在一个 CPU 的，在内存的情况下，这个就是一个最佳方案。</p></li></ul><h2 id="4、Redis-数据类型"><a href="#4、Redis-数据类型" class="headerlink" title="4、Redis 数据类型"></a>4、Redis 数据类型</h2><blockquote><p>Redis 有五种常见的数据类型和三种特殊数据类型</p></blockquote><blockquote><blockquote><p>五种数据类型</p></blockquote></blockquote><ul><li><p>String:</p><ul><li>常见的命令：set、get、decr、incr、mget、mset</li><li>Spring数据结构是简单的 key–value 类型，value 不仅可以是 String ，还可以是数字。</li><li>String应用场景：常规计数、访客、微博数、粉丝数等。</li></ul></li><li><p>hash:</p><ul><li>常见命令：hset、hget、hgetall</li><li>hash 是一个 String 类型的 field 和 value 的映射表，hash 特别适合于存储对象，后续操作的时候，可以直接仅仅修改这个对象的某个字段的值。</li><li>hash 应用场景：存储用户信息、商品信息、实现购物车等。</li></ul></li><li><p>list:</p><ul><li>常见命令：lpush、rpush、lpop、rpop、lrange</li><li>list 就是一个链表，可实现栈、队列、阻塞队列数据结构，即 list 实现为一个双向链表，可支持反向查找和遍历，更方便操作，不过会带来部分的额外内存开销。另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分页查询，基于 Redis 实现简单的高性能分页，可以做类似博客那种下拉不断分页的东西 ，性能高。</li><li>list 应用场景：比如微博的关注列、粉丝列表、消息列表等。</li></ul></li><li><p>set：</p><ul><li>常用命令：sadd、spop、smembers、sunion等</li><li>set 对外提供的功能与 list 类似是一个列表的功能，特殊之处是 set 可以自动排重的。当你需要存储一个列表数据，又不需要出现重复数据的时候，set 是一个很好的选择，可以基于 set 轻易实现并集、交集、差集。</li><li>set 应用场景：比如在微博应用中，可以将用户的所有关注的人存在一个集合中，将其所有粉丝存在一个集合中，可以非常方便的实现关注模型，比如共同关注、共同粉丝、共同喜好、可能认识的人等。</li></ul></li><li><p>zset:</p><ul><li>常用命令：zadd、zrange、zrem、zcard</li><li>和 set 相比，zset 增加了一个权重参数 score ，使得集合中元素都能按 score 进行有序排列。</li><li>zset 应用场景：各种排行榜。</li></ul></li></ul><blockquote><p>Redis中三种特殊的数据类型：</p></blockquote><ul><li><ol><li>geospatial： 地图，位置<ol><li>常用命令：geoadd、geopos、geodist、georadius、geohash等</li><li>应用场景：定位、两地距离、半径。</li></ol></li></ol></li><li><ol start="2"><li>Hyperloglog：技术统计<ol><li>基数：不重复的元素</li><li>应用场景：网页的UV （一个人访问了一个网页多次，但是还是算作一个人）</li></ol></li></ol></li><li><ol start="3"><li><p>Bitmap：位图</p><ol><li>位存储，只有0和1两个状态。</li><li>应用场景：打卡、统计用户登陆或未登录。</li></ol></li></ol></li></ul><h2 id="5、Redis-持久化"><a href="#5、Redis-持久化" class="headerlink" title="5、Redis 持久化"></a>5、Redis 持久化</h2><ul><li>Redis 是一个内存数据库，数据保存在内存中，内存中的数据会断电即失，因此 Redis 为我们提供了持久化的机制，分别是 rdb 和 aof 。</li><li>RDB<ul><li>rdb 持久化是指在指定的时间间隔内将内存中的数据以快照的形式保存到磁盘的二进制文件中，默认的文件名为 dump.rdb 。rdb 是 Redis 的默认持久化方式。</li><li>我们可以在 Redis.conf 配置文件中修改间隔时间。</li><li>优点： rdb 文件紧凑，全量备份，非常适合于进行备份和灾难恢复。生成 rdb 文件的时候，Redis 的主进程会 fork() 一个子进程来处理所有保存工作，主进程不需要进行任何磁盘 I/O 操作。 rdb 在恢复大数据时的速度比 aof 恢复速度要快。</li><li>缺点：rdb 快照是一次全量备份，存储的内存数据的二进制序列化形式，存储上非常紧凑。当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存，子进程不会反应出来，所以在快照持久化器件修改数据不会 保存，可能丢失数据。</li></ul></li><li>AOF<ul><li>rdb 全量备份总是最耗时的，有的时候我们可能需要提供一种更高效的方式 aof ，aof 工作机制很简单，Redis 会将每当有一个写的命令过来时，就直接保存到我们的 aof 文件中，通俗的理解就是日志记录。</li><li>优点： aof 可以更好的保护数据不丢失。aof 日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。 aof 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写 。</li><li>缺点：对于同一份数据来说， aof 日志文件通常比 rdb 数据快照文件更大。</li></ul></li></ul><h2 id="6、SpringBoot-自动装配"><a href="#6、SpringBoot-自动装配" class="headerlink" title="6、SpringBoot 自动装配"></a>6、SpringBoot 自动装配</h2><ul><li>SpringBoot  的自动装配的源码是在 Spring-boot-AutoConfigure-***.release.jar 包中，在 SpringBoot 主启动类上有 @SpringBootApplication 注解，这个注解是 SpringBoot 项目必不可少的一个注解，所以说自动装配原理和这个注解有很大关系。</li><li>@SpringBootApplication 是一个符号注解，也可以说是派生注解，在这个注解中还包含着一个 @EnableAutoConfiguration 注解，这个注解是开启自动配置。当我们打开这个注解的源码，我们可以看到在这个注解的上面，还标识着 @Import 注解，其中所有的关键功能都是由这个注解 提供的，利用 @Import 注解导入 AutoConfiguratiobImportSelecort 的 selectImports() 方法，通过 SpringFactoriesLoader.LoadFactoryNames() 扫描所有具有 META-INF/Spring.factories 的 jar 包。在Spring-boot-autoConfigure-***.jar 包中有一个 spring.factories 文件。这个 spring.factories 文件中都是一组的 key–value 键值对的形式存储，其中一个 key 就是 EnableAutoConfiguration 类的全类名，而他的 value 是 一个 某某autoConfiguration 的类名列表，这些列表都是以逗号隔开的。</li><li>其实 SpringBoot 装配原理就是：@EnableAutoConfiguration 这个注解通过 @SpringBootApplication  这个注解被间接的标记在了 SpringBoot 的启动类上，在 SpringApplication.run(..) 的内部就会执行 selectImports()  方法，找到所有的 javaConfig 自动配置类的全限定类名对应的 class ，然后将所有的自动配置类加载到 Spring 容器中。</li></ul><h2 id="7、MyBatis-缓存"><a href="#7、MyBatis-缓存" class="headerlink" title="7、MyBatis 缓存"></a>7、MyBatis 缓存</h2><ul><li>MyBatis 的缓存分为一级缓存和二级缓存，一级缓存是 SqlSession 级别的缓存，二级缓存是 mapper 级别的缓存，二级缓存是多个 SqlSession 共享的。 MyBatis 通过缓存机制减轻数据压力，提高数据库性能。</li><li>一级缓存：<ul><li>mybatis 的一级缓存是 SqlSession 级别的缓存，在操作数据库时需要构建 SqlSession 对象，在对象中有一个 HashMap 用于存储缓存数据，不同的 SqlSession 之间缓存数据区域（HashMap）是不影响的。</li><li>一级缓存的作用域是 SqlSession 范围的，当在同一个 SqlSession 中执行两次相同的 sql 语句时，第一次执行完毕会将数据库中查询的数据写到缓存（内存）中，第二次查询会从缓存中读取数据，不会再去底层进行数据库查询，从而提高了查询效率。</li><li>需要注意的是：如果 SqlSession 执行了 DML 操作（insert、update、delete），并执行 commit() 提交事务，mybatis 会清空 SqlSession 中的一级缓存，这样做的目的是为了保证缓存数据中 存储的是最新数据，避免出现脏读现象。</li><li>当一个 SqlSession 结束后该 SqlSession 中的一级缓存也就不存在了， Mybatis 默认开启的是一级缓存，不需要进行任何配置。</li></ul></li><li>二级缓存：<ul><li>二级缓存是 mapper 级别的缓存，使用二级缓存时，多个 SqlSession 使用同一个 mapper 的 sql 语句去操作数据库，得到的数据会存在二级缓存区域，它同样是使用 HashMap 进行数据的存储，相比一级缓存 SqlSession，二级缓存的范围更大，多个 SqlSession 可以共用二级缓存，二级缓存是 SqlSession 共享的，其作用域是 mapper 的同一个 namespace ，不同的 SqlSession 两次执行相同的 namespace 下的sql 语句，且向 sql 中传递的参数也相同，即最终执行相同的 sql 语句，则第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次查询时会从缓存中获取，不在去底层数据库中查询，从而提高查询效率。</li></ul></li><li>Mybatis 是默认开启一级缓存的，需要开启二级缓存，需要在配置 setting 中设置开启二级缓存，并且使用 cache 标签。</li></ul><h2 id="8、谈谈对-Spring-理解"><a href="#8、谈谈对-Spring-理解" class="headerlink" title="8、谈谈对 Spring 理解"></a>8、谈谈对 Spring 理解</h2><ol><li><p>Spring 实现了工厂模式的工厂类，这个类名为BeanFactory（是一个接口），在程序中通常用它的子类 ApplicationContext 。Spring 相当于一个大的工厂类，在其配置文件中通过元素配置用于创建实例对象的类名和实例对象的属性。 工厂模式是一种生产对象型的设计模式，有了工厂模式后，当需要某个类的对象时，就不在需要 new 指定的类，而是调用工厂中的方法即可。也就不需要关心对象的创建过程。甚至有时候也许你需要的对象只要是某种大分类的类型就可以了，也不必是某个指定的类型。不会过度依赖某个类，这些类都是易于被替换的，以提高整个项目的可谓维护性。</p><ol start="2"><li>Spring 提供了对 IOC （控制反转）良好的支持，IOC 是一种编程思想，是一种架构 艺术，利用这种思想可以很好的实现模块之间的解耦。传统的 java 开发模式中，当需要一个对象时，我们都会自己使用 new 或者 getInstance 等直接或间接调用一个构造方法创建对象。 而在Spring 开发模式中，Spring 容器使用了工厂模式为我们创建了所需要的对象，不需要我们自己创建了，直接调用 Spring 提供的对象就可以了，这就是控制反转的思想。 DI（依赖注入）也是 IOC 的重要实现， Spring 使用 javaBean 对象的 set 方法或者带参数的构造方法为我们在创建所需对象时，将其属性自动设置所需要的值的过程，这就是依赖注入的思想。</li><li>Spring 提供了对 AOP 技术的封装，AOP 称为面向切面编程，在面向对象（OOP）思想中，我们将事物纵向抽成一个个对象。而在面向切面编程中，我们将一个个的对象某些类似的 方面横向抽成一个切面，对这个切面进行一些如权限控制、事务管理、记录日志等处理过程就是面向切面的编程思想。 AOP 底层采用的是代理技术，客户端程序不在调用目标，而调用代理类，代理类与目标类对外具有相同的方法声明。有两种方式可以实现相同的方法声明，一是实现相同的接口，二是作为目标的子类。如果是接口采用 JDK 动态代理（因为底层会默认继承 Proxy 代理类，而 java 只支持单继承多实现，所以只能是接口），如果是类，采用 Cglib 方式实现动态代理。</li><li>Spring AOP 还引入了 AspectJ 语法面向切面编程。</li></ol></li></ol><h2 id="9、Spring-Bean-生命周期"><a href="#9、Spring-Bean-生命周期" class="headerlink" title="9、Spring Bean 生命周期"></a>9、Spring Bean 生命周期</h2><ol><li>bean 定义：在配置文件里面用 bean 标签来进行定义。</li><li>bean 初始化：有两种方式初始化：<ol><li>在配置文件中通过指定 init-method 属性来完成。</li><li>实现 initialiaingBean 接口。</li></ol></li><li>bean 调用：有三种方式可以得到 bean 实例，并进行调用。<ol><li>调用构造器创建 bean</li><li>调用静态工厂方法创建 bean</li><li>调用实例工厂：先创建该工厂的 bean 实例，然后引用该实例工厂 Bean 的 id 创建其他 Bean。</li></ol></li><li>bean 销毁：销毁有两种方式：<ol><li>使用配置文件指定的 destroy-method 属性</li><li>实现 DisposeableBean 接口</li></ol></li></ol><h2 id="10、线程的五种状态（生命周期）"><a href="#10、线程的五种状态（生命周期）" class="headerlink" title="10、线程的五种状态（生命周期）"></a>10、线程的五种状态（生命周期）</h2><ol><li>新建（new）: 新创建了一个线程对象。</li><li>可运行（Runable）：线程对象创建后，其他线程（比如main线程）调用了该对象的 start() 方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取 CPU 使用权。</li><li>运行（Running）：可运行状态的线程获得了 CPU 时间片，执行程序代码。</li><li>阻塞（block）：阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU 时间片，暂时停止运行。直到线程进入可运行状态，才有机会再次获得 CPU 时间片转到运行状态。阻塞的情况有三种：<ol><li>等待阻塞：运行的线程执行 o.wait() 方法，JVM 会把该线程放入等待队列中。</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池中。</li><li>其他阻塞：运行的线程执行 Thread.sleep(睡眠时间) 或 t.join() 方法，或者发出了 I/O 请求时， JVM 会把该线程置为阻塞状态。当 sleep() 状态超时、join() 等待线程终止或者超时、或者 I/O 处理完毕时，线程重新转入可运行状态。</li></ol></li><li>死亡（dead）：线程 run() 、main() 方法执行结束，或者因异常退出了 run() 方法，则该线程结束生命周期。死亡的线程不可再次复生。</li></ol><h2 id="11、常见垃圾收集器"><a href="#11、常见垃圾收集器" class="headerlink" title="11、常见垃圾收集器"></a>11、常见垃圾收集器</h2><table><thead><tr><th>垃圾收集器</th><th>分类</th><th>作用位置</th><th>使用算法</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>Serial</td><td>串行运行</td><td>作用于新生代</td><td>复制算法</td><td>响应速度优先</td><td>适用于单CPU环境下的 Client 模式</td></tr><tr><td>ParNew</td><td>并行运行</td><td>作用于新生代</td><td>复制算法</td><td>响应速度优先</td><td>多CPU环境Server模式下与CMS配合使用</td></tr><tr><td>Parallel</td><td>并行运行</td><td>作用于新生代</td><td>复制算法</td><td>吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td>Serial  Old</td><td>串行运行</td><td>作用于老年代</td><td>标记-压缩算法</td><td>响应速度优先</td><td>适用于单CPU环境下Client模式</td></tr><tr><td>Parallel  Old</td><td>并行运行</td><td>作用于老年代</td><td>标记-压缩算法</td><td>吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td>CMS</td><td>并发运行</td><td>作用于老年代</td><td>标记-清除算法</td><td>响应速度优先</td><td>适用于互联网 或 B/S 业务</td></tr><tr><td>G1</td><td>并发、并行</td><td>作用于新生代、老年代</td><td>复制算法标记-压缩算法</td><td>响应速度优先</td><td>面向服务端应用</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java面试 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/06/08/she-ji-mo-shi/"/>
      <url>/2020/06/08/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><span id="more"></span><ul><li>设计模式在软件中哪里使用？<br>  面向对象===&gt;功能模块[设计模式+算法（数据结构）]===&gt;框架[使用到多种设计模式]===&gt;架构[服务器集群]</li><li>设计模式的重要性？<br>  软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。是由埃里希·伽玛等人在1990年代从建筑设计领域引入到计算机科学的。</li><li>设计模式的目的？<br>  编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面挑战，设计模式是为了让程序（软件），具有更好的<br>  (1)、代码重用性（即：相同功能的代码，不用多次编写）<br>  (2)、可读性（即：编程规范性，便于其他程序员阅读和理解）<br>  (3)、可扩展性（即：当需要增加新功能的时候，非常方便，称为可维护性）<br>  (4)、可靠性（当我们增加新的功能后，对原来的功能没有影响）<br>  (5)、使程序呈现高内聚，低耦合的特性。</li></ul><h2 id="1、设计模式七大原则"><a href="#1、设计模式七大原则" class="headerlink" title="1、设计模式七大原则"></a>1、设计模式七大原则</h2><ul><li>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据）。</li><li>设计模式的七大原则有？<br>  (1)、单一职责原则<br>  (2)、接口隔离原则<br>  (3)、依赖倒转（倒置）原则<br>  (4)、里氏替换原则<br>  (5)、开闭原则<br>  (6)、迪米特法原则<br>  (7)、合成复用原则</li><li>设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”。</li></ul><h3 id="1-1、单一职责原则"><a href="#1-1、单一职责原则" class="headerlink" title="1.1、单一职责原则"></a>1.1、单一职责原则</h3><p><strong>1、基本介绍</strong><br>    对类来说的，即一个类只负责一项职责，如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变类A时，可能造成职责2执行错误。所以要将类A的颗粒分解为A1，A2。<br><strong>2、单一职责原则注意事项和细节</strong><br>    (1)降低类的复杂度，一个类只负责一项职责。<br>    (2)提高类的可读性，可维护性。<br>    (3)降低变更引起的风险。<br>    (4)通常情况下，严格遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则：只有类中方法数量足够少，可以在方法级别保持单一职责原则。<br><strong>3、代码实例</strong><br>    (1)方案1 [分析说明]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vehicle vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"摩托车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//交通工具类</span><span class="token comment" spellcheck="true">/** 方式1：* 1、在方式1的run方法中违反了单一职责原则。* 2、解决的方案非常简单，根据交通工具运行方法不同，分解成不同类即可。* */</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在公路上运行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(2)方案2 [分析说明]</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RoadVehicle roadVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoadVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roadVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roadVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"摩托车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AirVehicle airVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WaterVehicle waterVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaterVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        waterVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"轮船"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        waterVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"鱼儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   方案二分析：*   1、遵守单一职责原则*   2、但是这样做的改动很大，即：将类分解，同时修改客户端*   3、改进：直接修改Vehicle类，改动的代码比较少==>方案三* */</span><span class="token comment" spellcheck="true">//在公路运行</span><span class="token keyword">class</span> <span class="token class-name">RoadVehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在公路上运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在天空运行</span><span class="token keyword">class</span> <span class="token class-name">AirVehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在天空中运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在水中运行</span><span class="token keyword">class</span> <span class="token class-name">WaterVehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在水中运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(3)方案3 [分析说明]</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsiblity3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vehicle2 vehicle2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle2<span class="token punctuation">.</span><span class="token function">roadRun</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle2<span class="token punctuation">.</span><span class="token function">airRun</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle2<span class="token punctuation">.</span><span class="token function">waterRun</span><span class="token punctuation">(</span><span class="token string">"轮船"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 方式三分析：* 1、这种修改方法没有对原来的类做大的修改，只是增加方法。* 2、这里虽然没有在类的级别上遵守单一职责原则，但是在方法级别上，任然是遵守单一职责原则。* */</span><span class="token keyword">class</span> <span class="token class-name">Vehicle2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roadRun</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在公路运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">airRun</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在天空中飞行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">waterRun</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">"在水中运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2、接口隔离原则"><a href="#1-2、接口隔离原则" class="headerlink" title="1.2、接口隔离原则"></a>1.2、接口隔离原则</h3><p><strong>1、基本介绍</strong><br>    客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。<br><strong>2、应用传统方法的问题和使用接口隔离原则改进</strong><br>    (1)类A通过interface1接口依赖类B，类C通过Interface1接口依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，南无类B和类D就要去实现他们不需要的方法。<br>    (2)将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。<br>    (3)接口Interface1中出现的方法，根据实际情况拆分为三个接口。<br><strong>3、代码实现</strong></p><ul><li>需求：类A通过接口Interface1依赖类B，类C通过Interface接口依赖类D，请编写代码完成此应用实例。<br>  (1)原始写法：没有使用接口隔离</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Segregation1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Interface1</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//B类</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//D类</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//A类通过接口Interface1依赖（使用）B类，但是只用到1，2，3方法</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//C类通过接口Interface1依赖（使用）D类，但是只会用到1，4，5方法</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(2)改进：使用接口隔离原则将接口Interface1中五个方法，拆分成3个独立接口，类A和类C分别与他们需要的接口建立依赖关系。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Segregation2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A2 a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//A类通过接口去依赖B</span>        a2<span class="token punctuation">.</span><span class="token function">depend2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">depend3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C2 c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//A类通过接口去依赖D</span>        c2<span class="token punctuation">.</span><span class="token function">depend4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">depend5</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        运行结果：        B实现了operation1        B实现了operation2        B实现了operation3        D实现了operation1        D实现了operation4        D实现了operation5*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口隔离原则，改进</span><span class="token comment" spellcheck="true">//接口1</span><span class="token keyword">interface</span> <span class="token class-name">Interface2</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口2</span><span class="token keyword">interface</span> <span class="token class-name">Interface3</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口3</span><span class="token keyword">interface</span>  <span class="token class-name">Interface4</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//B类</span><span class="token keyword">class</span> <span class="token class-name">B2</span> <span class="token keyword">implements</span> <span class="token class-name">Interface2</span><span class="token punctuation">,</span>Interface3<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类D</span><span class="token keyword">class</span> <span class="token class-name">D2</span> <span class="token keyword">implements</span> <span class="token class-name">Interface2</span><span class="token punctuation">,</span>Interface4<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//A类通过接口Interface1依赖（使用）B类，但是只用到1，2，3方法</span><span class="token keyword">class</span> <span class="token class-name">A2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface2 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span>Interface3 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span>Interface3 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//C类通过接口Interface1依赖（使用）D类，但是只会用到1，4，5方法</span><span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface2 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend4</span><span class="token punctuation">(</span>Interface4 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend5</span><span class="token punctuation">(</span>Interface4 i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3、依赖倒转原则"><a href="#1-3、依赖倒转原则" class="headerlink" title="1.3、依赖倒转原则"></a>1.3、依赖倒转原则</h3><p><strong>1、基本介绍</strong></p><ul><li>依赖倒转原则是指：<br>  (1)高层模块不应该依赖底层模块，二者都应该依赖其抽象。<br>  (2)抽象不应该依赖细节，细节应该依赖抽象。<br>  (3)依赖倒转的中心思想是面向接口编程。<br>  (4)依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类。<br>  (5)使用接口或者抽象类的目的是：指定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。<br>  <strong>2、依赖代转原则的注意事项和细节</strong><br>  (1)底层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好。<br>  (2)变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序的扩展和优化。<br>  (3)继承时遵循里氏替换原则。<br>  <strong>3、代码实例</strong></li><li>请编程完成Person接受信息的功能<br>  (1)原始写法：没有使用依赖倒转原则</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependecyInversion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电子邮件类</span><span class="token keyword">class</span> <span class="token class-name">Email</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息：hello,world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//完成Persion接收消息的功能</span><span class="token comment" spellcheck="true">//方式1完成</span><span class="token comment" spellcheck="true">/** 方式1分析：* 1、简单，比较容易想到* 2、如果我们获取的对象是微信、短信等等，则新增类，同时Person也要增加相应的接收方法。* 3、解决思路：引入一个抽象的接口IReceiver，表示接收着，这样Person类与接口IReceiver发生依赖。* 4、因为Email,微信等属于接收的范围，他们各自实现IReceiver接口就ok，这样我们就符合依赖倒转原则。* */</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>Email email<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(2)改进：使用依赖倒转原则</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependecyInversion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeiXin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个接口</span><span class="token keyword">interface</span> <span class="token class-name">IReceiver</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Email类</span><span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息：hello,world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//增加微信</span><span class="token keyword">class</span> <span class="token class-name">WeiXin</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"微信消息：我爱你呀"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种方式：依赖倒转原则</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里我们是对接口的一个依赖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>IReceiver i<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、依赖关系传递的三种方式和应用案例</strong><br>    (1)接口传递<br>    (2)构造方法传递<br>    (3)setter方法传递</p><ul><li>应用案例</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//依赖关系的三种方式</span>    <span class="token comment" spellcheck="true">//接口</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token comment" spellcheck="true">//setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependencyPass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        //通过接口进行依赖传递        ChangHong changHong = new ChangHong();        OpenAndClose openAndClose = new OpenAndClose();        openAndClose.open(changHong);        */</span>        <span class="token comment" spellcheck="true">/*//通过构造器进行依赖传递        ChangHong changHong = new ChangHong();        OpenAndClose openAndClose = new OpenAndClose(changHong);        openAndClose.open();*/</span>        <span class="token comment" spellcheck="true">//通过setter方法进行依赖传递</span>        ChangHong changHong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChangHong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OpenAndClose openAndClose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        openAndClose<span class="token punctuation">.</span><span class="token function">setTv</span><span class="token punctuation">(</span>changHong<span class="token punctuation">)</span><span class="token punctuation">;</span>        openAndClose<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*//方式一：通过接口传递实现依赖//开关的接口interface IOpenAndClose{    public void open(ITV tv);}interface ITV{    public void play();}*/</span><span class="token keyword">class</span> <span class="token class-name">ChangHong</span> <span class="token keyword">implements</span> <span class="token class-name">ITV</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长虹电视机，打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*//实现接口class OpenAndClose implements IOpenAndClose{    @Override    public void open(ITV tv) {        tv.play();    }}*/</span><span class="token comment" spellcheck="true">/*//方式2：通过构造方法依赖传递interface IOpenAndClose{    public void open();}interface ITV{    public void play();}class OpenAndClose implements IOpenAndClose{    public ITV tv;    public OpenAndClose(ITV tv) {        this.tv = tv;    }    @Override    public void open() {        tv.play();    }}*/</span><span class="token comment" spellcheck="true">//方式三：通过setter方法传递</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTv</span><span class="token punctuation">(</span>ITV tv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ITV</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> ITV tv<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTv</span><span class="token punctuation">(</span>ITV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token operator">=</span>tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4、里氏替换原则"><a href="#1-4、里氏替换原则" class="headerlink" title="1.4、里氏替换原则"></a>1.4、里氏替换原则</h3><p><strong>1、OO中的继承性的思考和说明</strong><br>    (1)继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。<br>    (2)继承在给程序实际带来遍历的同时，也带来了弊端。比如，手机用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性。如果一个类被其他的类所继承，则这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有设计到子类的功能都有可能产生故障。<br>    (3)问题提出：在编程中，如何正确的使用继承？==&gt;里氏替换原则。</p><p><strong>2、里氏替换原则基本介绍</strong><br>    (1)里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出来的。<br>    (2)如果对每个类型T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明的使用其子类的对象。<br>    (3)在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。<br>    (4)里氏替换原则告诉我们：继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。</p><p><strong>3、分析以下程序错误并解决</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Liskov</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11-3="</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-8="</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-7</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果错误，子类重写了父类的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11-3="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//14</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-8="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//9</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11+3+9="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//23</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//A类</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">-</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//B继承A类</span><span class="token comment" spellcheck="true">//增加了一个新功能：完成两个数相加，然后和9求和</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里重写了父类的方法，可能是无意识</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>解决方法：<br>  (1)我们发现原来运行正常的相减功能发生了错误。原因就是类B无意间重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。<br>  (2)通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。</li><li>受用里氏替换原则解决如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Liskov</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11-3="</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-8="</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-7</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为B类不在继承A类，因此调用者不会在func1里求减法</span>        <span class="token comment" spellcheck="true">//调用完成的功能就会很明显</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11+3="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//14</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+8="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11+3+9="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//23</span>        <span class="token comment" spellcheck="true">//使用组合任然可以使用到A类相关方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11-3="</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建一个更加基础的基类</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把更加基础的方法和成员写到Base类中</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//A类</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token operator">-</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果B类中需要A类中的方法，使用组合关系</span>    <span class="token keyword">private</span> A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//我们任然要使用A的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5、开闭原则"><a href="#1-5、开闭原则" class="headerlink" title="1.5、开闭原则"></a>1.5、开闭原则</h3><p><strong>1、基本介绍</strong><br>    (1)开闭原则是编程中最基础、最重要的设计原则。<br>    (2)一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。<br>    (3)当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。<br>    (4)编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。<br><strong>2、以下方法1的优缺点</strong><br>    (1)优点是好理解，简单易操作。<br>    (2)缺点是违反了设计模式的OCP原则，即对扩展开放（提供方），对修改关闭（使用方）。即：当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码。<br>    (3)比如我们这时候要增加一个图形种类，绘制三角形，我们需要修改的地方较多。<br><strong>3、代码演示</strong></p><ul><li>没有使用OCP开闭原则：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ocp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用看看存在的问题</span>        GraphicEditor graphicEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用方</span><span class="token comment" spellcheck="true">//这是一个用于绘图的类</span><span class="token keyword">class</span> <span class="token class-name">GraphicEditor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接收shape对象，然后根据type，来回值不同的图形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span>Shape s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">drawRectangle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">drawCircle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">drawTriangle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//绘制矩形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawRectangle</span><span class="token punctuation">(</span>Shape r<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制圆形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span>Shape r<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制圆形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制三角形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawTriangle</span><span class="token punctuation">(</span>Shape t<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Shape类，基类</span><span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//矩形类继承Shape</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//圆形类继承Shape</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新增画三角形</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用ocp开闭原则<ul><li>思路：<br>  把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可，使用方的代码就不需要修改—-&gt;满足了开闭原则。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ocp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用看看存在的问题</span>        GraphicEditor graphicEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OtherGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用方</span><span class="token comment" spellcheck="true">//这是一个用于绘图的类</span><span class="token keyword">class</span> <span class="token class-name">GraphicEditor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接收shape对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span>Shape s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Shape抽象类，基类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//矩形类继承Shape</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//圆形类继承Shape</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制圆形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新增画三角形</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新增一个图形</span><span class="token keyword">class</span> <span class="token class-name">OtherGraphic</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token function">OtherGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制其他图形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6、迪米特法则"><a href="#1-6、迪米特法则" class="headerlink" title="1.6、迪米特法则"></a>1.6、迪米特法则</h3><p><strong>1、基本介绍</strong><br>    (1)一个对象应该对其他对象保持最少的了解。<br>    (2)类与类关系约密切，耦合度越大。<br>    (3)迪米特法则又叫最少知道法则，即一个类对自己依赖的类知道的越少越好。也就是说。对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息。<br>    (4)迪米特法则还有个更简单的定义：只与直接的朋友通信。<br>    (5)直接的朋友：每个对象都与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式有很多，依赖，关联，结合，聚合等。其中，我们称，出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p><p><strong>2、迪米特法则注意事项和细节</strong><br>    (1)迪米特法则的核心是降低类之间的耦合。<br>    (2)但是注意：优于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间（对象间）耦合关系，并不是要求完全没有依赖关系。</p><p><strong>3、应用案例</strong></p><ul><li>有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的id<br>  (1)原始方法:未使用迪米特法则：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demeter1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个SchoolManager对象</span>        SchoolManager schoolManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出学院员工id和学校总部员工信息</span>        schoolManager<span class="token punctuation">.</span><span class="token function">printAllEmployee</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollegeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学校总部员工</span><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学院的员工</span><span class="token keyword">class</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//管理学院员工的管理类</span><span class="token keyword">class</span> <span class="token class-name">CollegeManager</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回学院的所有员工</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里我们增加了10个员工到list</span>            CollegeEmployee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学院员工id="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学校的管理类</span><span class="token comment" spellcheck="true">/** 分析：* 在SchoolManager类中，类的直接朋友有哪些？* Employee    CollegeManager* CollegeEmployee  不是类的直接朋友，而是一个陌生类，这样违背了迪米特法则* */</span><span class="token keyword">class</span> <span class="token class-name">SchoolManager</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回学校总部的员工</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里我们增加了五个员工到list</span>            Employee emp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学校总部员工id="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//该方法完成输出学校总部和学院员工信息(id)</span>    <span class="token keyword">void</span> <span class="token function">printAllEmployee</span><span class="token punctuation">(</span>CollegeManager sub<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到学院的员工输出</span>        <span class="token comment" spellcheck="true">/*        * 分析问题：        * 1、这里的CollegeEmployee不是SchoolManager的直接朋友。        * 2、CollegeEmployee是以局部变量的方式出现在SchoolManager类的printAllEmployee方法中的        * 3、违反了迪米特法则。        * */</span>        List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> list3 <span class="token operator">=</span> sub<span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>CollegeEmployee e <span class="token operator">:</span> list3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取学校总部员工输出</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校总部员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee e <span class="token operator">:</span> list4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(2)改进：使用迪米特法则：</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用迪米特法则改进"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个SchoolManager对象</span>        SchoolManager schoolManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出学院员工id和学校总部员工信息</span>        schoolManager<span class="token punctuation">.</span><span class="token function">printAllEmployee</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollegeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学校总部员工</span><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学院的员工</span><span class="token keyword">class</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//管理学院员工的管理类</span><span class="token keyword">class</span> <span class="token class-name">CollegeManager</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回学院的所有员工</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里我们增加了10个员工到list</span>            CollegeEmployee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学院员工id="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出学院员工的信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取所有员工</span>        List<span class="token operator">&lt;</span>CollegeEmployee<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>CollegeEmployee e <span class="token operator">:</span> list3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//学校的管理类</span><span class="token keyword">class</span> <span class="token class-name">SchoolManager</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回学校总部的员工</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里我们增加了五个员工到list</span>            Employee emp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学校总部员工id="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//该方法完成输出学校总部和学院员工信息(id)</span>    <span class="token keyword">void</span> <span class="token function">printAllEmployee</span><span class="token punctuation">(</span>CollegeManager sub<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * 将输出学院的员工方法，封装到CollegeManager        * */</span>        sub<span class="token punctuation">.</span><span class="token function">printEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取学校总部员工输出</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学校总部员工"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee e <span class="token operator">:</span> list4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-7、合成复用原则"><a href="#1-7、合成复用原则" class="headerlink" title="1.7、合成复用原则"></a>1.7、合成复用原则</h3><p><strong>1、基本介绍</strong><br>    原则是尽量使用合成/聚合的方式，而不是使用继承。</p><p><strong>2、设计原则核心思想</strong><br>    (1)找出应用中可能变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起。<br>    (2)针对接口编程，而不是针对实现编程。<br>    (3)为了交互对象之间的松耦合设计而努力。</p><h2 id="2、UML类图"><a href="#2、UML类图" class="headerlink" title="2、UML类图"></a>2、UML类图</h2><p><strong>1、UML基本介绍</strong><br>    (1)UML（统一建模语言），是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。<br>    (2)UML本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素之间的关系，比如类，接口，实现，泛化，依赖，组合，聚合等。</p><p><img src="E:/javaContant/javaSoftWare/UML/umlphoto/1.png"><br>    (3)使用UML来建模，常用的工具有Rational Rose、StarUML，也可以用一些插件来建模。<br><strong>2、UML图分类</strong></p><ul><li>画UML图就和写文章一样，都是把自己的思想描述给别人看，换件在于思路和条理，UML图分类：<br>  (1)用例图（use case）<br>  (2)静态结构图：类图（类图是描述类与类自己建关系的，是UML中最核心的）、对象图、包图、组件图、部署图。<br>  (3)动态行为图：交互图（时序图与协作图）、状态图、活动图。<br>  <strong>3、UML类图</strong><br>  (1)用于描述梓潼中的类（对象）本身的组成和类（对象）之间的各种静态关系。<br>  (2)类之间的关系：依赖，聚合，泛化（继承），实现，结合，关联。</li></ul><h3 id="2-1、类图–依赖关系（Dependence）"><a href="#2-1、类图–依赖关系（Dependence）" class="headerlink" title="2.1、类图–依赖关系（Dependence）"></a>2.1、类图–依赖关系（Dependence）</h3><ul><li>只要是在类中用到了对方，那么他们之间就存在依赖关系，如果没有对方，连编译都通过不了。</li><li>小结：<br>  (1)类中用到了对方。<br>  (2)如果是类的成员属性<br>  (3)如果是方法的返回值类型<br>  (4)是方法接收的参数类型<br>  (5)方法中使用到</li><li>UML图位置：<br>  E:\javaContant\javaSoftWare\UML\umlphoto\2.uml</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDao</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PersonDao personDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IDCard <span class="token function">getIDCard</span><span class="token punctuation">(</span>Integer personid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Department department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2、类图–泛化关系（generalization）"><a href="#2-2、类图–泛化关系（generalization）" class="headerlink" title="2.2、类图–泛化关系（generalization）"></a>2.2、类图–泛化关系（generalization）</h3><ul><li>泛化关系实际上就是继承关系，他是依赖关系的特例。</li><li>总结：<br>  (1)泛化关系实际上就是继承关系。<br>  (2)如果A类继承了B类，我们就说A和B存在泛化关系。</li><li>对应uml图：<br>  E:\javaContant\javaSoftWare\UML\umlphoto\generalization.uml</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DaoSupport</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Object entity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Object id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token keyword">extends</span> <span class="token class-name">DaoSupport</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="2-3、类图–实现关系（Implementation）"><a href="#2-3、类图–实现关系（Implementation）" class="headerlink" title="2.3、类图–实现关系（Implementation）"></a>2.3、类图–实现关系（Implementation）</h3><ul><li>实现关系实际上就是A类实现B类，他是依赖关系的特例。</li><li>对应uml图：<br>  E:\javaContant\javaSoftWare\UML\umlphoto\implementation.uml</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token keyword">implements</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3、类图–关联关系（Association）"><a href="#2-3、类图–关联关系（Association）" class="headerlink" title="2.3、类图–关联关系（Association）"></a>2.3、类图–关联关系（Association）</h3><ul><li>关联关系实际上就是类与类之间的联系，他是依赖关系的特例。</li><li>关联具有导航性：即双向关联或单向关联。</li><li>关联具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或者多个），“0，1”(表示0个或者1个)，“n…m”(表示n个到m个都可以)，“m…*”(表示至少m个)。</li></ul><h3 id="2-4、类图–聚合关系（Aggregation）"><a href="#2-4、类图–聚合关系（Aggregation）" class="headerlink" title="2.4、类图–聚合关系（Aggregation）"></a>2.4、类图–聚合关系（Aggregation）</h3><ul><li>聚合关系（Aggregation）表示的是整体和部分的关系，整体和部分可以分开。</li><li>聚合关系是关联关系的特例，所以它具有关联的导航性和多重性。<br>如：一台电脑由鼠标（mouse）,显示器(monitor)，键盘等组成，组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实现来表示。</li><li>对应uml图：<br>  E:\javaContant\javaSoftWare\UML\umlphoto\aggregation.uml</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Moniter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Mouse mouse<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//鼠标可以和电脑分离</span>    <span class="token keyword">private</span> Moniter moniter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示屏可以和电脑分离</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span>Mouse mouse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoniter</span><span class="token punctuation">(</span>Moniter moniter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moniter <span class="token operator">=</span> moniter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5、类图–组合关系-Composition"><a href="#2-5、类图–组合关系-Composition" class="headerlink" title="2.5、类图–组合关系(Composition)"></a>2.5、类图–组合关系(Composition)</h3><ul><li>组合关系：也是整体与部分的关系，但是整体与部分不可以分开。</li><li>上面的例子：如果鼠标，显示器和电脑不能分离，则升级为组合关系。</li><li>对应uml图：<br>  E:\javaContant\javaSoftWare\UML\umlphoto\composition.uml</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Moniter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Mouse mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//电脑和鼠标不能分开</span>    <span class="token keyword">private</span> Moniter moniter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Moniter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电脑不能和显示器分开</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span>Mouse mouse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoniter</span><span class="token punctuation">(</span>Moniter moniter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moniter <span class="token operator">=</span> moniter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在看一个例子：在程序中我们定义实体：Person与IDCard,Head，那么Head和Person就是组合，IDCard和Person就是聚合。</li><li>但是如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合关系了。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IDCard idCard<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//人和身份证可以分开，聚合关系</span>    <span class="token keyword">private</span> Head head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//人和头不可分开，组合关系</span><span class="token punctuation">}</span></code></pre><h2 id="3、设计模式"><a href="#3、设计模式" class="headerlink" title="3、设计模式"></a>3、设计模式</h2><p><strong>设计模式介绍</strong><br>    (1)设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的通用解决方案。设计模式代表了最佳的实战。这些解决方案是众多软件软件开发人员经过相当长的一段时间的试验和错误中总结出来的。<br>    (2)设计模式的本质：提高软件的维护性，通用性和扩展性，并降低软件的复杂度。<br>    (3)推荐书籍《设计模式》</p><p><strong>设计模式分类</strong></p><ul><li>设计模式分为三种类型，共23种：<br>  (1)创建型模式：单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式。<br>  (2)结构型模式：装饰模式、代理模式、适配器模式、桥接模式、组合模式、外观模式、亨元模式。<br>  (3)行为型模式：观察者模式、模板方法模式、命令模式、访问者模式、迭代器模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式（责任链模式）。<br>  <strong>源码分析</strong><ul><li>在JDK源码中，java.lang.RunTime类中用到了单例模式的饿汉式。</li></ul></li></ul><h3 id="3-1、单例模式"><a href="#3-1、单例模式" class="headerlink" title="3.1、单例模式"></a>3.1、单例模式</h3><p><strong>1、介绍</strong><br>    (1)所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。<br>    (2)比如：Hibernate的SessionFactory,它充当数据存储源的代理，并负责创建Session对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这时就会使用到单例模式。<br><strong>2、单例模式巴中方式</strong><br>    (1)饿汉式（静态常量）<br>    (2)饿汉式（静态代码块）<br>    (3)懒汉式（线程不安全）<br>    (4)懒汉式（线程安全，同步方法）<br>    (5)懒汉式（线程安全，同步代码块）<br>    (6)双重检查<br>    (7)静态内部类<br>    (8)枚举</p><p><strong>单例模式注意事项和细节说明</strong><br>    (1)单例模式保证了，系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式，可以提高系统性能。<br>    (2)当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new。<br>    (3)单例模式使用场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多（即：重量级对象），但有经常用到的对象、工具类对象、频繁访问数据库或文件的对象（比如：数据源、session工厂等）。</p><h4 id="一、饿汉式（静态常量）"><a href="#一、饿汉式（静态常量）" class="headerlink" title="一、饿汉式（静态常量）"></a>一、饿汉式（静态常量）</h4><p><strong>1、步骤如下：</strong><br>    (1)构造器私有化（防止new）<br>    (2)类的内部创建对象<br>    (3)向外暴露一个静态的公共方法。<br>    (4)代码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//460141958</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//460141958</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饿汉式（静态变量）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、构造器私有化,外部无法new了</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、在本类内部创建对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、对外提供一个公有的静态方法，返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。<br>    (2)缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果，如果从始至终从未使用过这个实例，则会造成内存的浪费。<br>    (3)这种方式基于类装载机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单利模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到Lazy loading的效果。<br>    (4)结论：这种单例模式可用，可能造成内存浪费。</p><h4 id="二、饿汉式（静态代码块）"><a href="#二、饿汉式（静态代码块）" class="headerlink" title="二、饿汉式（静态代码块）"></a>二、饿汉式（静态代码块）</h4><p><strong>1、代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饿汉式（静态代码块）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、构造器私有化，外部不能new</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、本类内部创建对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、在静态代码块中创建单例对象</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4、提供一个公有的静态方法，返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)这种方式和上面的方式类似，只不过将类实例化的过程放在了静态代码块中。也是在类装载的时候就执行静态代码块中的代码，初始化类的实例。优缺点和上边是一样的。<br>    (2)结论：这种单例模式可用，但是可能造成内存浪费。</p><h4 id="三、懒汉式（线程不安全）"><a href="#三、懒汉式（线程不安全）" class="headerlink" title="三、懒汉式（线程不安全）"></a>三、懒汉式（线程不安全）</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式--线程不安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、创建对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、无参数构造</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3、提供一个静态的公有方法，当使用到该方法时，才去创建instance</span>    <span class="token comment" spellcheck="true">//即：懒汉式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)起到了懒加载的效果，但是只能在单线程下使用。<br>    (2)如果在多线程下，一个线程进入if(instance == null)判断语句块，还未来的及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。<br>    (3)结论：在实际开发中不要使用这种方式。</p><h4 id="四、懒汉式（线程安全，同步方法）"><a href="#四、懒汉式（线程安全，同步方法）" class="headerlink" title="四、懒汉式（线程安全，同步方法）"></a>四、懒汉式（线程安全，同步方法）</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//懒汉式（线程安全，同步方法）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式--线程安全：同步方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)解决了线程不安全问题。<br>    (2)效率太低了。每个线程在想获得类的实例时候，执行getInstance()方法，都要同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低。<br>    (3)结论：在实际开发中不推荐使用这种方式。</p><h4 id="五、懒汉式（线程安全，同步代码块）"><a href="#五、懒汉式（线程安全，同步代码块）" class="headerlink" title="五、懒汉式（线程安全，同步代码块）"></a>五、懒汉式（线程安全，同步代码块）</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式（同步代码块），这种方法不靠谱，不能使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)这种方式，本意是想对懒汉式（线程安全，同步方法）进行改进，因为前面同步方法效率太低，改为同步产生实例化的代码块。<br>    (2)但是这种同步并不能起到线程同步的作用。跟懒汉式（线程不安全）实现方式遇到的情形一致，假如一个线程进入了判断语句块，还未来得及往下执行，另一个线程也通过了判断语句，这时便会产生多个实例。<br>    (3)结论：在实际开发中，不能使用这种方式。</p><h4 id="六、双重检查（DoubleCheck）"><a href="#六、双重检查（DoubleCheck）" class="headerlink" title="六、双重检查（DoubleCheck）"></a>六、双重检查（DoubleCheck）</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双重检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加关键字volatile</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供静态的公有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span>    <span class="token comment" spellcheck="true">//同时保证了效率，推荐使用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)双重检查概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if(singleeon == null)检查，这样就可以保证线程安全了。<br>    (2)这样，实例化代码只用执行一次，后面再次访问时，判断if(singleton == null)，直接return实例化对象，也避免了反复进行方法同步。<br>    (3)线程安全，延迟加载，效率较高。<br>    (4)结论：在实际开发中，推荐使用这种单例模式。</p><h4 id="七、静态内部类"><a href="#七、静态内部类" class="headerlink" title="七、静态内部类"></a>七、静态内部类</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用静态内部类实现单例模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类，推荐使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//静态内部类完成</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写一个静态内部类，该类中有一个静态属性Singleton</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供一个静态的公有方法，直接返回SingletonInstance.SINGLETON</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>    (2)静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。<br>    (3)类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。<br>    (4)优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。<br>    (5)结论：推荐使用。</p><h4 id="八、枚举"><a href="#八、枚举" class="headerlink" title="八、枚举"></a>八、枚举</h4><p><strong>1、代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>                instance<span class="token punctuation">.</span><span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//枚举</span><span class="token comment" spellcheck="true">//使用枚举，可以实现单例，推荐使用。</span><span class="token keyword">enum</span> Singleton<span class="token punctuation">{</span>        INSTANCE<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、优缺点说明</strong><br>    (1)这借助jdk1.5添加的枚举来实现单例模式，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。<br>    (2)结论：推荐使用。</p><h3 id="3-2、工厂设计模式"><a href="#3-2、工厂设计模式" class="headerlink" title="3.2、工厂设计模式"></a>3.2、工厂设计模式</h3><p><strong>1、工厂模式小结</strong><br>    (1)工厂模式的意义：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。<br>    (2)三种工厂模式：（简单工厂模式）、（工厂方法模式）、（抽象工厂模式）。<br>    (3)设计模式的依赖抽象原则1：创建对象实例时，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说，变量不要直接持有具体类的引用。<br>    (4)设计模式的依赖抽象原则2：不要让类继承具体类，而是继承抽象类或者实现interface接口。<br>    (5)设计模式的依赖抽象原则3：不要覆盖基类中已经实现的方法。</p><p><strong>2、源码分析</strong><br>    - 在JDK源码中的Calendar类中，使用到了简单工厂模式。<br><strong>3、看一个具体需求</strong></p><ul><li>看一个披萨的项目：要便于披萨种类的扩展，要便于维护。<br>  (1)披萨的种类很多（比如：GreekPizz、CheesePizz等）<br>  (2)披萨的制作有prepare（准备原材料），bake（烘烤）,cut（切割）,box（打包）<br>  (3)完成披萨店订购功能</li><li>未使用工厂设计模式代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把披萨类做成抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//披萨名字</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准备原材料,不同的披萨材料不一样，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//烘烤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"烘烤了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//切割</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"切割了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打包</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"打包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//奶酪披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给制作奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//希腊披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreekPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给制作希腊披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//订购披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        String orderType<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//订购披萨的类型</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"希腊披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//输出pizza制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写一个方法，可以获取客户需要订购披萨的种类</span>    <span class="token keyword">private</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//披萨店</span><span class="token comment" spellcheck="true">//相当于客户端，发出订购</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新增胡椒披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、传统方式优缺点说明</strong><br>    (1)优点是：比较好理解，简单易操作。<br>    (2)缺点是：违反了设计模式的ocp开闭原则，即对扩展开放，对修改关闭，即：我们给类增加新功能的时候，尽量不修改代码，或者尽量少修改代码。<br>    (3)比如：我们新增一个Pizza种类（PepperPizza胡椒披萨），需要修改如上代码。</p><p><strong>3、改进的思路分析</strong><br>    - 分析：修改代码可以接受，但是如果我们在其他的地方也有创建Pizza的代码，就意味着也需要修改，而创建Pizza的代码往往有多种。<br>    - 思路：把创建Pizza对象封装到一个类中，这样我们有新的Pizza种类时，只需要修改该类就可以，其他有创建到Pizza的代码就不需要修改了—–&gt;简单工厂模式。</p><h4 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h4><p><strong>1、基本介绍</strong><br>    (1)简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。<br>    (2)简单工厂模式：定义了一个创建对象的类，用这个类来封装实例化对象的行为（代码）。<br>    (3)在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式。<br><strong>2、使用简单工厂模式对Pizza代码改进</strong></p><ul><li>简单工厂模式设计方案：定义一个可以实例化Pizza对象的类，封装创建对象的代码。</li><li>改进：使用简单工厂模式代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把披萨类做成抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//披萨名字</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准备原材料,不同的披萨材料不一样，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//烘烤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"烘烤了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//切割</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"切割了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打包</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"打包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//奶酪披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给制作奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//希腊披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreekPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给制作希腊披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新增胡椒披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用简单工厂模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//更改orderType返回对应的Pizza对象</span>    <span class="token keyword">public</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用简单工厂设计模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"希腊披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"中国披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简单工厂模式也叫静态工厂模式，也可以把工厂方法设置为静态方法。</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//订购披萨</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个简单工厂对象,聚合关系</span>    SimpleFactory simpleFactory<span class="token punctuation">;</span>    Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span>SimpleFactory simpleFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>simpleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span>SimpleFactory simpleFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//用户输入的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory <span class="token operator">=</span> simpleFactory<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置简单工厂对象</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出pizza</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购披萨失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写一个方法，可以获取客户需要订购披萨的种类</span>    <span class="token keyword">private</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//披萨店</span><span class="token comment" spellcheck="true">//相当于客户端，发出订购</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用简单工厂模式</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新增中国Pizza</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给制作中国披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h4><p><strong>1、工厂方法模式介绍</strong><br>    (1)工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象的抽象方法，在不同的口味点餐子类中具体实现。<br>    (2)工厂方法模式：定义一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</p><p><strong>2、看一个新的需求</strong></p><ul><li>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如北京的奶酪Pizza，北京的胡椒Pizza或者时伦敦的奶酪Pizza、伦敦的胡椒Pizza。<ul><li>思路1：使用简单的工厂模式，创建不同的简单工厂类，比如BJPizzaSimpleFactory、LDPizzaSimpleFactory等等，从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是很好。</li><li>思路2：使用工厂方法模式<br>  <strong>3、方法实现</strong></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//披萨名字</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准备原材料,不同的披萨材料不一样，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//烘烤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"烘烤了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//切割</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"切割了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打包</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"打包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦的胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"伦敦的胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦的奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"伦敦的奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京的胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京的奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个抽象方法，creatPizza，让各个工厂子类自己实现</span>    <span class="token keyword">abstract</span> Pizza <span class="token function">creatPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        String orderType<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//订购披萨的类型</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token function">creatPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抽象方法，由工厂子类完成</span>            <span class="token comment" spellcheck="true">//输出Pizza制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写一个方法，可以获取客户需要订购披萨的种类</span>    <span class="token keyword">private</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza 种类："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//北京OrderPizza</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    Pizza <span class="token function">creatPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//伦敦OrderPizza</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    Pizza <span class="token function">creatPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*//创建北京口味的各种披萨        new BJOrderPizza();        */</span>        <span class="token comment" spellcheck="true">//创建伦敦口味的披萨</span>        <span class="token keyword">new</span> <span class="token class-name">LDOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h4><p><strong>1、基本介绍</strong><br>    (1)抽象工厂模式：定义了一个interface接口用于创建相关或有依赖关系的对象簇，而无需指明具体的类。<br>    (2)抽象工厂模式可以将简单的工厂模式和工厂方法模式进行整合。<br>    (3)从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或者称为进一步的抽象）。<br>    (4)将工厂抽象成两层，AbsFactory(抽象工厂)和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个简单的工厂类变成了工厂簇，更利于代码的维护和扩展。<br><strong>2、代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//披萨名字</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准备原材料,不同的披萨材料不一样，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//烘烤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"烘烤了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//切割</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"切割了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打包</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"打包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"伦敦的胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"伦敦的奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京的胡椒披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京奶酪披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象工厂模式的抽象层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//让下面的工厂子类具体实现</span>    <span class="token keyword">public</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//北京工厂子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出的是抽象工厂模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//伦敦工厂子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用抽象工厂模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//聚合关系</span>    AbsFactory absFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span>AbsFactory absFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>absFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span>AbsFactory absFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        String orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用户输入</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>absFactory <span class="token operator">=</span> absFactory<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//absFactory可能是北京的工厂子类，也可能是伦敦的工厂子类</span>            pizza <span class="token operator">=</span> absFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//订购ok</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写一个方法，获取用户输入</span>    <span class="token keyword">private</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入披萨种类："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*new OrderPizza(new BJFactory());*/</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LDFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3、原型模式"><a href="#3-3、原型模式" class="headerlink" title="3.3、原型模式"></a>3.3、原型模式</h3><p><strong>1、原型模式基本介绍</strong><br>    (1)原型模式（prototype模式）是指：用原型实例创建对象的种类，并且通过拷贝这些原型，创建新的对象。<br>    (2)原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。<br>    (3)工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象，拷贝他们自己来实现创建，即：对象.clone();<br>    (4)形象的理解：孙大圣拔出猴毛，一吹，变成其他孙大圣。<br><strong>2、克隆羊问题</strong></p><ul><li>现在有一只羊tom，姓名为tom，年龄为1，颜色为白色，请编写程序创建和tom羊属性完全相同的10只羊。</li><li>代码：未使用原型模式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sge="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传统的方法解决"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、传统的方式优缺点</strong><br>    (1)优点是比较好理解，简单易操作。<br>    (2)在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低。<br>    (3)总是需要重新初始化对象，而不是动态的获得对象运行时的状态，不够灵活。<br>    (4)改进的思路分析。<br>    - 思路：java中Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个java对象复制一份，但是需要实现clone的java类必须实现一个接口Cloneable，该接口表示该类能够复制，且具有复制的能力。===&gt;原型模式。</p><h4 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h4><p><strong>1、浅拷贝介绍</strong><br>    (1)对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。<br>    (2)对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员的引用值（内存地址）复制一份给新的对象，因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。<br>    (3)浅拷贝是使用默认的clone()方法来实现<br>        Sheep sheep = (Sheep)super.clone();<br><strong>2、使用原型设计模式改进</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重写克隆方法</span>    <span class="token comment" spellcheck="true">//克隆该实例，使用默认的clone方法完成</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Sheep sheep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sheep <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sheep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用原型模式完成对象的创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep2 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep3 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep4 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep5 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep6 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep7 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep8 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep9 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheep sheep10 <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep7<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep9<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheep10<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、源码分析</strong><br>    - 在spring中原型bean创建，就是原型模式的应用。</p><h4 id="二、深拷贝"><a href="#二、深拷贝" class="headerlink" title="二、深拷贝"></a>二、深拷贝</h4><p><strong>1、深拷贝基本介绍</strong><br>    (1)复制对象的所有基本数据类型的成员变量值。<br>    (2)为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝。<br>    (3)深拷贝实现方式1：重写clone方法类实现深拷贝。<br>    (4)深拷贝实现方式2：通过对象序列化实现深拷贝。<br><strong>2、代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepCloneableTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cloneName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cloneClass<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">DeepCloneableTarget</span><span class="token punctuation">(</span>String cloneName<span class="token punctuation">,</span> String cloneClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//因为该类的属性，都是String，因此我们这里使用默认的clone完成即可</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepProtoType</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span>Cloneable <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//String类型属性</span>    <span class="token keyword">public</span> DeepCloneableTarget deepCloneableTarget<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//引用类型属性</span>    <span class="token keyword">public</span> <span class="token function">DeepProtoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//深拷贝--方式1，使用克隆方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Object deep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里完成对基本数据类型（属性）和String的克隆</span>        deep <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对引用类型的属性，单独处理</span>        DeepProtoType deepProtoType <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span> deep<span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token punctuation">(</span>DeepCloneableTarget<span class="token punctuation">)</span> deepCloneableTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deepProtoType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//深拷贝--方式二：通过对象的序列化实现（推荐）</span>    <span class="token comment" spellcheck="true">//以对象流的方式输出去，在以对象流的方式读回来</span>    <span class="token comment" spellcheck="true">//写克隆方法</span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建流对象</span>        <span class="token comment" spellcheck="true">//字节数组输出流</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象输出流</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字节数组输入流</span>        ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象输入流</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//序列流   输出流</span>            <span class="token comment" spellcheck="true">//字节数组输出流换成对象输出流</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前这个对象以对象流的方式输出</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//反序列化</span>            <span class="token comment" spellcheck="true">//输出流输出之后，在反序列化读进来，就完成了对象克隆</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            DeepProtoType copObj <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        DeepProtoType deepProtoType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepProtoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"松江"</span><span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepCloneableTarget</span><span class="token punctuation">(</span><span class="token string">"大牛"</span><span class="token punctuation">,</span><span class="token string">"大牛的类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式1完成深拷贝</span><span class="token comment" spellcheck="true">/*        DeepProtoType deepProtoType2 = (DeepProtoType) deepProtoType.clone();        System.out.println(deepProtoType.name + deepProtoType.deepCloneableTarget.hashCode());        System.out.println(deepProtoType2.name + deepProtoType2.deepCloneableTarget.hashCode());*/</span>        <span class="token comment" spellcheck="true">//方式2完成深拷贝</span>        DeepProtoType deepProtoType2 <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span> deepProtoType<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deepProtoType<span class="token punctuation">.</span>name <span class="token operator">+</span> deepProtoType<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deepProtoType2<span class="token punctuation">.</span>name <span class="token operator">+</span> deepProtoType2<span class="token punctuation">.</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//松江325040804</span>        <span class="token comment" spellcheck="true">//松江2065951873</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、原型模式的注意事项和细节</strong><br>    (1)创建新的对象比较复杂，可以使用原型模式简化对象的创建过程，同时也能够提高效率。<br>    (2)不用重新初始化对象，而是动态的获得对象运行时的状态。<br>    (3)如果原始对象发生变化（增加或者减少属性），其他克隆对象的也会发生相应的变化，无需修改代码。<br>    (4)在实现深克隆的时候可能需要比较复杂的代码。<br>    (5)缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码、违背了ocp原则，这点要注意。</p><h3 id="3-4、建造者模式"><a href="#3-4、建造者模式" class="headerlink" title="3.4、建造者模式"></a>3.4、建造者模式</h3><p><strong>1、基本介绍</strong><br>    (1)建造者模式（Builder Pattern）又叫生成器模式，是一种对象构建模式。它可以将复杂对象的构建过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。<br>    (2)建造者模式使一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建他们，用户不需要知道内部的具体构建细节。</p><p><strong>2、建造者模式的四个角色</strong><br>    (1)Product（产品角色）：一个具体的产品对象。<br>    (2)Builder(抽象建造者)：创建一个Product对象的各个部件指定的接口/抽象类。<br>    (3)ConcreteBuilder(具体建造者)：实现接口或继承抽象类，构建或装配各个部件。<br>    (4)Director(指挥着)：构建一个使用Builder接口/抽象类的对象。它主要使用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程。二是：负责控制产品对象的生产过程。</p><p><strong>3、建造者模式在jdk应用源码分析</strong><br>    - 在java.lang.StringBuilder中用到建造者模式。</p><p><strong>4、建造者模式注意事项和细节</strong><br>    (1)客户端（使用程序）不必知道产品内部组成的细节，将产品的本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。<br>    (2)每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便的替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可达到不同的产品对象。<br>    (3)可以更加精细的控制产品创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。<br>    (4)增加新的具体建造者无需修改原有类库代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。<br>    (5)建造者模式所创建的产品一般较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定限制。<br>    (6)如果产品的内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式。<br>    (7)抽象工厂模式VS建造者模式<br>        抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只需要关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p><strong>5、盖房项目需求</strong><br>    (1)需要建房子：在这一过程为打桩、砌墙、封顶。<br>    (2)房子有各种各样的，比如：普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不相同。<br>    (3)编写程序，完成需求。</p><ul><li>未使用建造者模式：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHose</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打地基</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//砌墙</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封顶</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这三个操作是有顺序的，所以把这三个方法合在一个方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouse</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHose</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子打地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子砌墙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子封顶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CommonHouse commonHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commonHouse<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>6、传统方式解决盖房问题优缺点</strong><br>    (1)优点是比较好理解，简单易操作。<br>    (2)设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好。也就是说，这种设计方案，把产品（即：房子）和创建产品的过程（即：建房子流程）封装在一起了，耦合性增强了。<br>    (3)解决方案：将产品和产品建造过程解耦====&gt;建造者模式。</p><p><strong>7、改进：使用建造者模式</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//房子（产品Product）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//地基</span>    <span class="token keyword">private</span> String baise<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//砌墙</span>    <span class="token keyword">private</span> String wall<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//盖顶</span>    <span class="token keyword">private</span> String roofed<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getBaise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baise<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaise</span><span class="token punctuation">(</span>String baise<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baise <span class="token operator">=</span> baise<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWall</span><span class="token punctuation">(</span>String wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wall <span class="token operator">=</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRoofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roofed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoofed</span><span class="token punctuation">(</span>String roofed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roofed <span class="token operator">=</span> roofed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象的建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//组合关系</span>    <span class="token keyword">protected</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//建造流程，抽象方法</span>    <span class="token comment" spellcheck="true">//打地基</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//砌墙</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//盖顶</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//建造房子好后，将产品（房子）返回</span>    <span class="token keyword">public</span> House <span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//高楼</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighBuilding</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"高楼打地基50米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"高楼砌墙20米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"高楼盖屋顶55米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通房子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouse</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通房子打地基5米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通房子砌墙10cm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通房子盖屋顶6米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指挥者，指定制作流程，返回产品（房子）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token punctuation">{</span>    HouseBuilder houseBuilder <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器传入houseBuilder</span>    <span class="token keyword">public</span> <span class="token function">HouseDirector</span><span class="token punctuation">(</span>HouseBuilder houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过set传入houseBuilder</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHouseBuilder</span><span class="token punctuation">(</span>HouseBuilder houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如何处理建造房子流程交给指挥者</span>    <span class="token keyword">public</span> House <span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先打地基</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//然后砌墙</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后盖顶</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//盖普通房</span>        CommonHouse commonHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备创建房子的指挥者</span>        HouseDirector houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span>commonHouse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成盖房，返回产品（房子）</span>        House house <span class="token operator">=</span> houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//盖高楼</span>        HighBuilding highBuilding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighBuilding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重置建造者</span>        houseDirector<span class="token punctuation">.</span><span class="token function">setHouseBuilder</span><span class="token punctuation">(</span>highBuilding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成盖房，返回房子</span>        houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5、适配器模式"><a href="#3-5、适配器模式" class="headerlink" title="3.5、适配器模式"></a>3.5、适配器模式</h3><p><strong>1、基本介绍</strong><br>    (1)适配器模式（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协调工作。其别名为包装类（Wrapper）<br>    (2)适配器模式属于接口型模式<br>    (3)主要分为三类：类适配器模式、接口适配器模式、对象适配器模式。<br><strong>2、适配器模式工作原理</strong><br>    (1)适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容。<br>    (2)从用户的角度看不到被适配者，是解耦的。<br>    (3)用户调用适配器转化出来的目标接口方法，适配器在调用被适配者的相关接口方法。<br>    (4)用户收到反馈结果，感觉只是和目标接口交互。<br>    被适配者 需要被适配的类、接口、对象，简称src(source)———–&gt; 适配器 称为Adapter———–&gt;目标 最终需要的输出，dst(destination,即Target)</p><p><strong>3、适配器模式在SpringMVC框架应用源码分析</strong><br>    SpringMVC中的HandlerAdapter，使用了适配器模式。</p><p><strong>4、适配器模式的注意事项和细节</strong><br>    (1)三种命令方式，是根据被适配者（src）是以怎样的形式给到适配器（Adapter）（在Adapter里的形式）来命名的。<br>    (2)类适配器：以类给到，在Adapter里，就是将src当作类，继承。对象适配器：以对象给到，在Adapter里，将被适配者作为一个对象，持有。接口适配器：以接口给到，在Adapter里，将被适配者作为一个接口，实现。<br>    (3)Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作。<br>    (4)实际开发中，实现起来不拘泥与这三种经典模式。</p><p><strong>5、泰国插座问题</strong></p><ul><li>现实生活适配器例子：</li><li>泰国插座用的是两孔的（欧标），可以买个多功能转换插头（适配器），这样就可以使用了。</li></ul><h4 id="一、类适配器"><a href="#一、类适配器" class="headerlink" title="一、类适配器"></a>一、类适配器</h4><p><strong>1、类适配器模式介绍</strong><br>    基本介绍：Adapter类，通过继承src类，实现dst类接口，完成src–&gt;dst的适配。（适配器继承被适配者，实现目标）<br><strong>2、类适配器模式应用实例</strong><br>    (1)应用实例说明<br>        以充电器为例来理解适配器，充电器本身相当于Adapter，220V交流电相当于src（即：被适配者），通过充电器转换的dst(即：目标)是5v直流电。<br>    (2)思路分析<br>    (3)代码实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//被适配者220v电压</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220v</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压"</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5v</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220v</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5v</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到220v电压</span>        <span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目标电压，降压</span>        <span class="token keyword">int</span> dstV <span class="token operator">=</span> srcV <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//转成5v</span>        <span class="token keyword">return</span> dstV<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//充电</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span>IVoltage5v iVoltage5v<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5v<span class="token punctuation">.</span><span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为5v，可以充电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>iVoltage5v<span class="token punctuation">.</span><span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压大于5v，不能充电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类适配器模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、类适配器模式注意事项和细节</strong><br>    (1)java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定局限性。<br>    (2)src类的方法在Adapter中都会暴露出来，也增加了使用的成本。<br>    (3)由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了。</p><h4 id="二、对象适配器"><a href="#二、对象适配器" class="headerlink" title="二、对象适配器"></a>二、对象适配器</h4><p><strong>1、对象适配器模式介绍</strong><br>    (1)基本思路和类的适配器模式基本相同，只是将适配器类(Adapter)做修改，不是继承被适配类(src)，而是持有适配类的实例，以解决兼容性的问题。即：持有src类，实现目标(dst)类接口，完成src–&gt;dst的是配。<br>    (2)根据“合成复用原则”，在系统中尽量使用关联关系来代替继承关系。<br>    (3)对象适配器模式是适配器模式常用的一种。<br><strong>2、改进：使用对象适配器模式</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220v</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压="</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5v</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5v</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Voltage220v voltage220v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关联关系--聚合</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token comment" spellcheck="true">//通过构造器，传入一个voltage220v实例</span>    <span class="token keyword">public</span> <span class="token function">VoltageAdapter</span><span class="token punctuation">(</span>Voltage220v voltage220v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voltage220v <span class="token operator">=</span> voltage220v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//目标 dst</span>        <span class="token keyword">int</span> dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> voltage220v<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> src <span class="token operator">=</span> voltage220v<span class="token punctuation">.</span><span class="token function">output220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取220v电压</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用对象适配器，进行适配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dst <span class="token operator">=</span> src <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配完成，输出的电压为"</span><span class="token operator">+</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dst<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//充电</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span>IVoltage5v iVoltage5v<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5v<span class="token punctuation">.</span><span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为5v，可以充电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5v<span class="token punctuation">.</span><span class="token function">output5v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压大于5v，不可以充电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户使用手机充电</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象适配器模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Voltage220v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、对象适配器模式注意事项和细节</strong><br>    (1)对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合/聚合替代继承，所以它解决了适配器必须继承src的局限性问题，也不在要求dst必须是接口。<br>    (2)使用成本更低，更灵活。</p><h4 id="三、接口适配器模式"><a href="#三、接口适配器模式" class="headerlink" title="三、接口适配器模式"></a>三、接口适配器模式</h4><p><strong>1、接口适配器模式介绍</strong><br>    (1)一些书籍称为：适配器模式就是缺省适配器模式。<br>    (2)当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择的覆盖父类的某些方法类实现需求。<br>    (3)适用于一个接口不想使用其他所有的方法的情况。</p><p><strong>2、接口适配器模式代码实例</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口里面有四个方法</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在AbsAdapter抽象类中 我们将Interface4的方法进行默认实现</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cliet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//匿名内部类</span>        AbsAdapter absAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbsAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//我们只需要覆盖我们需要使用的接口方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用了m1方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用m1方法</span>        absAdapter<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-6、桥接模式"><a href="#3-6、桥接模式" class="headerlink" title="3.6、桥接模式"></a>3.6、桥接模式</h3><p><strong>1、手机操作问题</strong><br>    现在对不同手机类型的不同品牌实现操作编程（比如：开机、关机、上网、打电话等）。<br>    手机分为折叠式、直立式、旋转式，折叠式和直立式分别有华为、小米、vivo。<br><strong>2、传统方案解决手机操作问题分析</strong><br>    (1)扩展性问题（类爆炸），如果我们在增加手机的样式（旋转式），就需要增加各个品牌手机的类，同样，如果我们增加一个手机品牌，也要在各个手机样式类下增加。<br>    (2)违反了单一职责原则，当我们增加手机样式使，要同时增加所有品牌的手机，这样增加了代码维护成本。<br>    (3)解决方案—–&gt;使用桥接模式。<br><strong>3、桥接模式基本介绍</strong><br>    (1)桥接模式（Bridge模式）是指：将抽象与实现放在两个不同的类层次中，使两个层次可以独立改变。<br>    (2)桥接模式是一种结构型设计模式<br>    (3)桥接模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是：把抽象(Abstraction)与行为实现(Implementation)分离开，从而可以保持各部分的独立性以及应对他们的功能扩展。</p><p><strong>4、桥接模式在JDBC的源码解析</strong><br>    jdbc的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有mysql的Driver，可以有Oracle的Driver,这些就可以当作实现接口类。</p><p><strong>5、桥接模式的注意事项和字节</strong><br>    (1)实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分分离开来，有助于系统进行分层设计，从而产生更好的结构化系统。<br>    (2)对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他的部分由具体业务来完成。<br>    (3)桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护功能。<br>    (4)桥接模式的引入增加了系统的理解和设计难度，由于聚合、关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。<br>    (5)桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景。</p><p><strong>6、桥接模式应用场景</strong><br>    (1)对于那些不希望使用继承或因为多层次继承导致梓潼类的个数极具增加的系统，桥接模式尤为适用。<br>    (2)常见得瑟应用场景：<br>        - jdbc驱动<br>        - 银行转账系统<br>            转账分类：网上银行，柜台转账，AMT转账（实现层）<br>            转账用户类型：普通用户，银卡用户，金卡用户（抽象层）<br>        - 消息管理<br>            消息类型：即时消息，延时消息(实现层)<br>            消息分类：手机短息，邮件信息，QQ消息（抽象层）</p><p><strong>7、使用桥接模式解决手机问题</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//手机品牌接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开机</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//关机</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打电话</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//vivo手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vivo</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//小米手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMi</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//手机 抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//组合品牌</span>    <span class="token keyword">private</span> Brand brand<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token comment" spellcheck="true">//创建phone的时候就把品牌放进去了</span>    <span class="token keyword">public</span> <span class="token function">Phone</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        brand<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//折叠式手机类继承抽象类Phone</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoldedPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">FoldedPhone</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用父类的open</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠样式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠样式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠样式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//直立样式手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpRightPhone</span>  <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">UpRightPhone</span><span class="token punctuation">(</span>Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取折叠式手机（样式+品牌）</span>        <span class="token comment" spellcheck="true">//折叠样式</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FoldedPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vivo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FoldedPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直立样式</span>        Phone phone3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpRightPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vivo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone3<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-7、装饰者模式"><a href="#3-7、装饰者模式" class="headerlink" title="3.7、装饰者模式"></a>3.7、装饰者模式</h3><p><strong>1、星巴克咖啡项目</strong><br>    (1)咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)<br>    (2)调料：Milk、Soy(豆浆)、Chocolate<br>    (3)要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便。<br>    (4)使用OO对象方法来计算不同种类咖啡的费用：客户可以点单品咖啡，也可以单品咖啡+调料组合。</p><p><strong>2、装饰者模式定义</strong><br>    - 装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则（ocp）。</p><p><strong>3、装饰者模式在jdk应用源码分析</strong><br>    - java的IO结构，FilterInputStream就是一个装饰者。<br>    - 说明：<br>        (1)InputStream是抽象类，类似Drink。<br>        (2)FileInputStream是InputStream子类，类似单品咖啡。<br>        (3)FilterInputStream是InputStream子类，类似Decorator装饰者。<br>        (4)DateInputStream是FilterInputStream的子类，类似调味品Milk等。<br>        (5)FilterInputStream类有protected volatile InputStream in; 即：含装饰者。<br>        (6)在JDK的IO体系中就使用了装饰者模式。 </p><p><strong>4、装饰者模式原理</strong></p><ul><li>装饰者模式就像打包一个快递。<ul><li>主体：比如，陶瓷、衣服//被装饰者（Component）</li><li>包装：比如，报纸填充、塑料泡沫、纸板//装饰者(Decorator)</li></ul></li></ul><p><strong>5、使用装饰者模式解决星巴咖啡项目</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Drink就相当于单品咖啡</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//描述</span>    <span class="token keyword">public</span> String des<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//价格</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算费用的抽象方法</span>    <span class="token comment" spellcheck="true">//子类来实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span>String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//缓存层，咖啡单体继承</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ShortBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"shortBlack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//美式咖啡</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"美式咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//意大利咖啡</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"意大利咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">6.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新增无因咖啡</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decaf</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Decaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"无因咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">8.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//装饰者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//组合单品咖啡</span>    <span class="token keyword">private</span> Drink obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//组合关系</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//getPrice 自己的价格</span>        <span class="token comment" spellcheck="true">//obj.cost(); 咖啡单体的价格</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出描述</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//obj.getDes() 描述了被装饰者的信息</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>des <span class="token operator">+</span> <span class="token string">"  /*8"</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  &amp;&amp;  "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//豆浆调味品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Soy</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//牛奶调味品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Milk</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体的Decorator  这里就是调味品巧克力</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Chocolate</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//描述信息</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前调味品巧克力价格</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//咖啡店</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//装饰者模式下的订单：2个巧克力 + 1份牛奶的LongBlack美式咖啡</span>        <span class="token comment" spellcheck="true">//1、点一份LongBlack</span>        <span class="token comment" spellcheck="true">//单品咖啡就是一个Drink</span>        Drink order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"费用1= "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"描述信息: "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、加入一份牛奶</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入一份牛奶费用= "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入一份牛奶描述信息: "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继续加一个巧克力价格= "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继续加一个巧克力描述信息: "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、再加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继续加一个巧克力价格= "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继续加一个巧克力描述信息: "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一共</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2个巧克力 + 1份牛奶的LongBlack美式咖啡价格="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2个巧克力 + 1份牛奶的LongBlack美式咖啡描述="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出信息</span>        <span class="token comment" spellcheck="true">/*费用1= 5.0        描述信息: 美式咖啡                加入一份牛奶费用= 7.0        加入一份牛奶描述信息: 牛奶  2.0  &amp;&amp;  美式咖啡        继续加一个巧克力价格= 10.0        继续加一个巧克力描述信息: 巧克力  3.0  &amp;&amp;  牛奶  2.0  &amp;&amp;  美式咖啡        继续加一个巧克力价格= 13.0        继续加一个巧克力描述信息: 巧克力  3.0  &amp;&amp;  巧克力  3.0  &amp;&amp;  牛奶  2.0  &amp;&amp;  美式咖啡        2个巧克力 + 1份牛奶的LongBlack美式咖啡价格=13.0        2个巧克力 + 1份牛奶的LongBlack美式咖啡描述=13.0*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-8、组合模式"><a href="#3-8、组合模式" class="headerlink" title="3.8、组合模式"></a>3.8、组合模式</h3><p><strong>1、学校院系展示需求</strong><br>    编写一个程序展示一个学校院系结构：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p><p><strong>2、传统方案解决分析</strong><br>    (1)将院系看作是学校的子类，系是学院的子类，这样实际是站在组织大小来进行分层次的。<br>    (2)实际上我们的要求是：在一个页面中展示学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案不能很好的管理操作，比如对学院、系的添加、删除、遍历。<br>    (3)解决方案：把学校、院、系都肯做是组成结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作。====&gt;组合模式。</p><p><strong>3、组合模式介绍</strong><br>    (1)组合模式(Composite Pattern)，有叫部分整体模式，它创建了对象的树形结构，将对象组合成树状结构以表示“整体–部分”的层次关系。<br>    (2)组合模式依据树形结构来组合对象，用来表示部分与整体层次。<br>    (3)这种类型的设计模式属于结构型模式。<br>    (4)组合，喔屎使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象。</p><p><strong>4、组合模式的角色及职责</strong><br>    (1)Component:这是组合中对象声明接口，在适当情况下，实现所有的类共有的接口默认行为，用于访问和管理Component子部件，Component可以是接口或者抽象类。<br>    (2)Leaf:在组合中表示叶子节点，叶子节点没有子节点。<br>    (3)Composite：非叶子节点，用于存储子部件，在Component接口中实现子部件的相关操作，比如增加（add）,删除(remove)。</p><p><strong>5、组合模式解决问题</strong><br>    组合模式解决这样的问题，当我们的要处理的对象可以生成一颗树形结构，而我们要对书上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑他是节点还是叶子。</p><p><strong>6、组合模式在jdk集合的源码分析</strong><br>    - java的集合类–HashMap就使用了组合模式。<br>    - 说明：<br>        (1)Map就是一个抽象的构建（类似Component）<br>        (2)HashMap是一个中间的构建（Composite），实现/继承了相关方法。put,putall<br>        (3)Node是HashMap的静态内部类，类似Leaf叶子节点，这里就没有put,putall。</p><p><strong>7、组合模式的注意事项和使用细节</strong><br>    (1)简化客户端操作。客户端只需要面对一致的对象，而不需要考虑整体部分或者节点叶子的问题。<br>    (2)具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。<br>    (3)方便创建出复杂的层次结构。客户端不用理会组合里边的组成细节，容易添加节点或者叶子，从而创建出复杂的叶子结构。<br>    (4)需要遍历组织机构，或者处理的对象具有树形结构时，非常适合组合模式。<br>    (5)要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式。</p><p><strong>8、使用组合模式解决学校院系展示需求</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象类 子类：学校、学院、专业</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//名字</span>    <span class="token keyword">private</span> String des<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//说明</span>    <span class="token comment" spellcheck="true">//添加的方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认实现</span>        <span class="token comment" spellcheck="true">//抛出不支持操作的异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认实现</span>        <span class="token comment" spellcheck="true">//抛出不支持操作的异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印方法,这个方法子类都需要实现</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrganizationComponent</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span>String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//大学</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//list存放的是College学院</span>    List<span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">University</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写add方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写remove方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印,输出University包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//大学名字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历organizationComponents</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrganizationComponent organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学院</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">College</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里存放的是Department 系</span>    List<span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">College</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将来实际业务中。College的add方法和University的add方法不一定完全一样。</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//学院名字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历OrganizationComponent</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrganizationComponent organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//系 专业</span><span class="token comment" spellcheck="true">//add和remove方法就不需要写了，因为它是叶子节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//没有集合</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"``````````"</span><span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"```````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从大到小创建对昂</span>        <span class="token comment" spellcheck="true">//学校</span>        OrganizationComponent university <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> <span class="token string">"中国顶级大学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//学院1</span>        OrganizationComponent college1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"计算机学院"</span><span class="token punctuation">,</span><span class="token string">"电子计算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//学院2</span>        OrganizationComponent college2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"会计学院"</span><span class="token punctuation">,</span> <span class="token string">"为钱而生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//学院计算机的系 专业</span>        college1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"电子信息工程"</span><span class="token punctuation">,</span><span class="token string">"计算机专业"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        college1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">,</span><span class="token string">"我的最爱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        college1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"软件工程"</span><span class="token punctuation">,</span><span class="token string">"java开发"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//学院会计的系</span>        college2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"金融"</span><span class="token punctuation">,</span><span class="token string">"数钱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        college2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"算法"</span><span class="token punctuation">,</span><span class="token string">"计算"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        college2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"数据"</span><span class="token punctuation">,</span><span class="token string">"整理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将两个学院加入到大学</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>college1<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>college2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出大学、学院、专业</span>        university<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出信息</span>        <span class="token comment" spellcheck="true">/*===========清华大学===========        ----------计算机学院----------        ``````````电子信息工程```````````        ``````````计算机科学与技术```````````        ``````````软件工程```````````        ----------会计学院----------        ``````````金融```````````        ``````````算法```````````        ``````````数据```````````*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-9、外观模式"><a href="#3-9、外观模式" class="headerlink" title="3.9、外观模式"></a>3.9、外观模式</h3><p><strong>1、影院管理项目</strong></p><ul><li>组建一个家庭影院<ul><li>DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机，要求完成使用家庭影院的功能，其过程：<ul><li>直接用遥控器：统筹各设备开关</li><li>开爆米花机</li><li>放下屏幕</li><li>开投影仪</li><li>开音响</li><li>开DVD，选dvd</li><li>去拿爆米花</li><li>调暗灯光</li><li>播放</li><li>观影结束后，关闭各种设备</li></ul></li></ul></li></ul><p><strong>2、传统解决方式分析</strong><br>    (1)在Client的main方法中，创建各个子系统的对象，并直接调用子系统（对象）相关方法，会造成调用过程混乱，没有清晰的过程。<br>    (2)不利于在客户端（Client）中维护子系统的操作。<br>    (3)解决思路：定义一个高级接口，给子系统中的一组接口提供一个一致的界面（比如在高层接口提供四个方法ready,play,pause,end），用来访问子系统中的一群接口。<br>    (4)也就是说，就是通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节。=====&gt;外观模式</p><p><strong>3、外观模式基本介绍</strong><br>    (1)外观模式（Facade），也叫“过程模式”：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>    (2)外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关系这个子系统的内部细节。<br>    (3)外观类（Facade）:为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统的对象。<br>    (4)调用者（Client）:外观接口的调用者。<br>    (5)子系统的集合：指模块或者子系统，处理外观类(Facade)对象指派的任务，他是功能的实际提供者。<br>    (6)外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。</p><p><strong>外观模式注意事项和细节</strong><br>    (1)外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性。<br>    (2)外观模式对客户端与子系统的耦合关系，解耦，让子系统内部的模块更易维护和扩展。<br>    (3)通过合理的使用外观模式，可以帮我们更好的划分访问的层次。<br>    (4)当系统需要进行分层设计的时候，可以考虑使用Facade（外观）模式。<br>    (5)在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性。<br>    (6)不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要以让系统有层次，利于维护为目的。</p><p><strong>外观模式在mybatis框架应用源码分析</strong><br>    Mybatis中的Configuration去创建MetaObject对象使用到外观模式。</p><p><strong>使用外观模式解决影院管理项目</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DVDPlayer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用单例模式，饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DVDPlayer instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DVDPlayer <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打开</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//播放</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD播放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//暂停</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD暂停"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//爆米花机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Popcorn</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Popcorn instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Popcorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供一个公开的静态的方法,返回爆米花机</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Popcorn <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爆米花机打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爆米花机关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在出爆米花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//投影仪</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Projector instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Projector <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪聚焦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//屏幕</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Screen instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Screen <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪上升"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪下降"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//立体声</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stereo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Stereo instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stereo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Stereo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"立体声打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"立体声关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"立体声音量大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//影院灯光</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheaterLight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> TheaterLight instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheaterLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> TheaterLight <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"影院灯光打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"影院灯光关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"影院灯光调暗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"影院灯光调亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//外观类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheaterFacade</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义各个子系统对象</span>    <span class="token comment" spellcheck="true">//影院灯光</span>    <span class="token keyword">private</span> TheaterLight theaterLight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//立体声</span>    <span class="token keyword">private</span> Stereo stereo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//屏幕</span>    <span class="token keyword">private</span> Screen screen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//投影仪</span>    <span class="token keyword">private</span>  Projector projector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//爆米花机</span>    <span class="token keyword">private</span> Popcorn popcorn<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//DVD</span>    <span class="token keyword">private</span> DVDPlayer dvdPlayer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>theaterLight <span class="token operator">=</span> theaterLight<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stereo <span class="token operator">=</span> stereo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>projector <span class="token operator">=</span> projector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>popcorn <span class="token operator">=</span> popcorn<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dvdPlayer <span class="token operator">=</span> dvdPlayer<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//操作分成四步</span>    <span class="token comment" spellcheck="true">//准备工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//爆米花机</span>        popcorn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        popcorn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//屏幕</span>        screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//投影仪</span>        projector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//立体声</span>        stereo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//DVD</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//灯光调暗</span>        theaterLight<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//dvd播放</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//暂停</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//看完关闭</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        popcorn<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stereo<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theaterLight<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端调用外观类即可</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HomeTheaterFacade homeTheaterFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*爆米花机打开        正在出爆米花        投影仪下降        投影仪打开        立体声打开        DVD打开        影院灯光调暗        DVD播放        爆米花机关闭        投影仪上升        投影仪关闭        立体声关闭        DVD关闭        影院灯光关闭*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-10、享元模式"><a href="#3-10、享元模式" class="headerlink" title="3.10、享元模式"></a>3.10、享元模式</h3><p><strong>1、小型的外包网站</strong><br>    - 给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同：<br>        - 有的客户要求以新闻的形式发布。<br>        - 有的客户要求以博客的形式发布。<br>        - 有的客户要求以微信公众号形式发布。</p><p><strong>2、传统方案分析</strong><br>    (1)需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器资源浪费。<br>    (2)解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达到共享，减少服务器资源。<br>    (3)对于代码来说，由于是一份实例，维护和扩展都更加容易。<br>    (4)上面的解决思路就可以使用享元模式来解决。</p><p><strong>3、享元模式基本介绍</strong><br>    (1)享元模式（Flyweight Pattern）也叫蝇量模式：运用共享技术有效的支持大量细粒度的对象。<br>    (2)享元模式常用于系统底层开发，解决系统的性能问题。像数据库连接池，里边都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个。<br>    (3)享元模式能够解决重复对象的内存浪费问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样就可以降低系统内存，同时提高效率。<br>    (4)享元模式经典的应用场景就是池技术了，String常量池，数据库连接池，缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式。</p><p><strong>4、享元模式原理</strong><br>    (1)FlyWeight；抽象的享元角色，是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现类。<br>    (2)ContreteFlyWeight：是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。<br>    (3)UnShareContreteFlyWeight：是不可共享的角色，一般不会出现在享元工厂。<br>    (4)FlyWeightFactory：享元工厂类，用于创建一个池容器（集合），同时提供从池中获取对象方法。<br>    (5)Client：客户端，用我们的工厂去获取相关享元角色。</p><p><strong>5、内部状态和外部状态</strong><br>    - 比如围棋、五子棋、跳棋，他们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子的颜色就是棋子的内部状态。而各个棋子的差别就是位置的不同，当我们落子后，颜色是定的，位置是变化的，所以棋子的位置坐标就是棋子的外部状态。<br>    (1)享元模式提出了两个请求：细粒度和共享对象。这里就涉及到内部状态和外部状态了，即：将对象分为两个部分：内部状态和外部状态。<br>    (3)外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。<br>    (4)总结：能共享的就是内部状态，不能共享的就是内部状态。</p><p><strong>6、享元模式在jdk源码分析</strong><br>    享元模式在JDK—Interger中使用到<br>    如果使用 valueOf() 方法得到一个Integer实例，范围在-128到127之间的数字,执行比new快。<br>    在[-128-127]之间，true。</p><p><strong>7、享元模式的注意事项和细节</strong><br>    (1)享元模式这样理解：“享”就表示共享，“元”就表示对象。<br>    (2)系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式。<br>    (3)用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用HashMap/HashTable存储。<br>    (4)享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率。<br>    (5)享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式要注意的地方。<br>    (6)使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制。<br>    (7)享元模式经典的应用场景是需要缓冲池的场景，比如String常量池、数据库连接池。</p><p><strong>8、享元模式解决网站展示项目</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//网站</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//抽象方法，使用哪个网站发布</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String type <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//网站发布的形式（类型）</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ConcreteWebSite</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站的发布形式为"</span><span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"在使用，使用者是： "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//网站工厂，根据需求，返回具体网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//集合，充当池</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>ConcreteWebSite<span class="token operator">></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据网站类型，返回一个网站，如果没有就创建一个网站，并放到池中并返回</span>    <span class="token keyword">public</span> WebSite <span class="token function">getWebSite</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果没有</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//就创建一个网站，并放到池中</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>WebSite<span class="token punctuation">)</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取网站分类的总数（池总有多少个网站类型）</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//享元模式中的外部状态</span>    <span class="token comment" spellcheck="true">//用户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个工厂</span>        WebSiteFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户要一个以新闻形式发布的网站</span>        WebSite webSite <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSite</span><span class="token punctuation">(</span><span class="token string">"新闻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布</span>        webSite<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户要一个以博客形式发布的网站</span>        WebSite webSite2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSite</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布</span>        webSite2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>        <span class="token comment" spellcheck="true">//输出</span>        <span class="token comment" spellcheck="true">/*网站的发布形式为新闻在使用，使用者是： tom        网站的发布形式为博客在使用，使用者是： jack        2*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-11、代理模式-Proxy"><a href="#3-11、代理模式-Proxy" class="headerlink" title="3.11、代理模式(Proxy)"></a>3.11、代理模式(Proxy)</h3><p><strong>1、基本介绍</strong><br>    (1)代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实际的基础上，增强额外的功能操作，即扩展目标对象的功能。<br>    (2)被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。<br>    (3)代理模式有不同的形式，主要有三种：静态代理、动态代理（JDK代理、接口代理）和Cglib代理（可以在内存动态的创建对象，而不需要实现接口，他是属于动态代理的范畴。）</p><h4 id="一、静态代理"><a href="#一、静态代理" class="headerlink" title="一、静态代理"></a>一、静态代理</h4><p><strong>1、静态代理介绍</strong><br>    - 静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同的父类。</p><p><strong>2、应用实例</strong><br>    (1)定义一个接口：ITeacherDao<br>    (2)目标对象TeacherDao实现接口ITeacherDao<br>    (3)使用静态代理方式，就需要在代理对象TeacherDaoProxy中实现实现ITeacherDao。<br>    (4)调用的时候通过代理对象的方法来调用目标对象。<br>    (5)特别提醒：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口 代理对象和目标对象都要实现这个接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//授课方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//目标对象  被代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代理对象 代理TeacherDao这个对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//聚合，通过接口</span>    <span class="token comment" spellcheck="true">//目标对象</span>    <span class="token keyword">private</span> ITeacherDao target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">TeacherDaoProxy</span><span class="token punctuation">(</span>ITeacherDao target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理开始，完成某些操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建目标对象</span>        TeacherDao teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象,同时把被代理对象传给代理对象</span>        TeacherDaoProxy teacherDaoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理对象调用到被代理的对象方法</span>        <span class="token comment" spellcheck="true">//即执行的是代理对象的方法，代理对象在调用被代理对象（目标对象）的方法</span>        teacherDaoProxy<span class="token punctuation">.</span><span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        <span class="token comment" spellcheck="true">/*代理开始，完成某些操作        老师授课中        代理结束*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、静态代理优缺点</strong><br>    (1)优点：在不修改目标对象前提的功能下，能通过代理对象对目标对象功能扩展。<br>    (2)缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类。<br>    (3)一旦接口增加方法，目标对象与代理对象都要维护。</p><h4 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h4><p><strong>1、动态代理基本介绍</strong><br>    (1)代理对象不需要实现接口，但是目标对象需要实现接口，否则不能用动态代理。<br>    (2)代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象。<br>    (3)动态代理也叫做：JDK代理、接口代理。</p><p><strong>2、JDK中生成动态代理对象的API</strong><br>    (1)代理类所在包:java.lang.reflect.Proxy<br>    (2)JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数，完整写法是：<br>        static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</p><p><strong>3、动态代理案例</strong><br>    - 将前面静态代理改进成动态代理模式（即：JDK代理模式）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//授课方法</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//目标对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师正在授课中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代理工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护一个目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器，对target进行初始化</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给目标对象生成一个代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * public static Object newProxyInstance(ClassLoader loader,        *                                       Class&lt;?>[] interfaces,*                                               InvocationHandler h);        * 说明：        * 1、ClassLoader loader:指定当前目标对象使用的类加载器，获取加载器的方法固定。        * 2、Class&lt;?>[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型。        * 3、InvocationHandler h : 事情处理，执行目标对象的方法时，会出发事情处理器方法，会把当前执行的目标对象作为参数        * */</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK代理开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//反射机制调用目标对象的方法</span>                        Object returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个目标对象</span>        TeacherDao target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给目标对象创建代理对象</span>        ITeacherDao proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>ITeacherDao<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从这里看以看出内存中动态生成了代理对象</span>        <span class="token comment" spellcheck="true">//class com.sun.proxy.$Proxy0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理对象调用目标对象的方法</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*class com.sun.proxy.$Proxy0        JDK代理开始        老师正在授课中        JDK代理提交*/</span>        <span class="token comment" spellcheck="true">//调用sayHello</span>       <span class="token comment" spellcheck="true">/* proxyInstance.sayHello("tom");*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="三、Cglib代理"><a href="#三、Cglib代理" class="headerlink" title="三、Cglib代理"></a>三、Cglib代理</h4><p><strong>1、Cglib代理基本介绍</strong><br>    (1)静态代理和JDK代理模式都要求目标对象是实现一个接口，但有时候目标对象只是一个单独的对象，并没有实现任何的接口，这时候目标对象子类来实现代理—这就是Cglib代理。<br>    (2)Cglib代理也叫子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有的书也将Cglib代理归属到动态代理。<br>    (3)Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展java类与实现java接口。它广泛的被许多AOP的框架使用，例如：Spring AOP ,实现方拦截。<br>    (4)在AOP编程如何选择代理模式：<br>        目标对象需要实现接口，用JDK代理。<br>        目标对象不需要实现接口，用Cglib代理。<br>    (5)Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。</p><p><strong>2、Cglib代理模式实现步骤</strong><br>    (1)需要Cglib的jar包<br>        - asm.jar<br>        - asm-commons.jar<br>        - asm-tree.jar<br>        - cglib-2.2.jar<br>    (2)在内存中动态构建子类，注意代理的类不能为final，否则报错：java.lang.IllegalArgumentException;<br>    (3)目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法。</p><p><strong>3、Cglib代理模式解决上边案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//被代理对象 目标对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中，我是Cglib代理，不需要实现接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代理工厂</span><span class="token comment" spellcheck="true">//Cglib代理模式继承MethodInterceptor接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护一个目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器，传入一个被代理的对象</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回一个代理对象，是target对象的代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、创建一个工具类</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、创建子类对象，即代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写的MethodInterceptor接口的方法</span>    <span class="token comment" spellcheck="true">//拦截方法，会调用目标对象的相关方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理模式开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建目标对象</span>        TeacherDao target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理对象，并将目标对象传递给代理对象</span>        TeacherDao proxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span>TeacherDao<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行代理对象的方法，触发intecept方法，从而实现对目标对象的调用</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行结果</span>        <span class="token comment" spellcheck="true">/*Cglib代理模式开始        老师授课中，我是Cglib代理，不需要实现接口        Cglib代理提交*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、代理模式（Proxy）的变体</strong></p><ul><li>几种常见的代理模式介绍–几种变体<br>  (1)防火墙代理：内网通过代理穿透防火墙，实现对公网的访问。<br>  (2)缓存代理：比如，当请求图片文件等资源时，先到缓存代理取，如果取到资源则ok，如果取不到资源，再到公网或者数据库取，然后缓存。<br>  (3)远程代理：远程对象的本地代表，通过他可以把远程对象当作本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。<br>  (4)同步代理：主要使用在多线程编程中，完成多线程间同步工作。</li></ul><h3 id="3-12、模板方法模式"><a href="#3-12、模板方法模式" class="headerlink" title="3.12、模板方法模式"></a>3.12、模板方法模式</h3><p><strong>1、豆浆制作项目</strong><br>    (1)制作豆浆的流程：选材—&gt;添加配料—&gt;侵泡—&gt;放到豆浆机打碎。<br>    (2)通过添加不同的配料，可以制作出不同口味的豆浆。<br>    (3)选材、侵泡、放到豆浆机打碎，这几个步骤对于制作每种口味的豆浆都是一样的。<br>    (4)请使用模板方法模式完成。</p><p><strong>2、模板方法模式基本介绍</strong><br>    (1)模板方法模式（Template Method Pattern），又叫模板模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。他的子类可以按需要重写方法实现，但调用将以抽象类中定义的方法进行。<br>    (2)简单的说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类不改变一个算法的结构，就可以重定义该算法的某些特定步骤。<br>    (3)这种类型的设计型模式属于行为型模式。</p><p><strong>3、spring IOC容器初始化的时候用到模板方法模式</strong>  </p><p><strong>4、模板方法模式注意事项和细节</strong><br>    (1)基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改。<br>    (2)实现了最大化代码复用。父类的模板方法和已经实现的某些步骤会被子类继承而直接使用。<br>    (3)既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构爆出不变，同时由子类提供部分步骤的实现。<br>    (4)该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大。<br>    (5)一般模板方法都加上final关键字，防止子类重写模板方法。<br>    (6)模板方法模式使用场景：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤基本相同，但其各别步骤在现实时可能不同，通常考虑用模板方法模式来考虑。</p><h4 id="一、模板方法"><a href="#一、模板方法" class="headerlink" title="一、模板方法"></a>一、模板方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象类 表示豆浆</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模板方法，make,模板方法可作为final，不让子类去覆盖</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//步骤</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步，选择好的新鲜的黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加不同的配料,子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打碎</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四部，黄豆和配料放到豆浆机去打碎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//红豆豆浆</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步，配料是加入上好的红豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//花生豆浆</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步，配料是加入上号的花生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//制作红豆豆浆</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作红豆豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoyaMilk redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作花生豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoyaMilk peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*制作红豆豆浆        第一步，选择好的新鲜的黄豆        第二步，配料是加入上好的红豆        第三步，黄豆和配料开始浸泡3小时        第四部，黄豆和配料放到豆浆机去打碎        制作花生豆浆        第一步，选择好的新鲜的黄豆        第二步，配料是加入上号的花生        第三步，黄豆和配料开始浸泡3小时        第四部，黄豆和配料放到豆浆机去打碎*/</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="二、钩子方法"><a href="#二、钩子方法" class="headerlink" title="二、钩子方法"></a>二、钩子方法</h4><p><strong>1、模板方法模式的钩子方法</strong><br>    (1)在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事情，子类可以视情况要不要覆盖它，该方法称为“钩子”。<br>    (2)还是用做豆浆的例子，比如，我们还希望做纯豆浆，不添加任何配料，使用钩子方法对模板方法进行改造。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模板 make,模板方法可作为final，不让子类去覆盖</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//步骤</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果返回真，就添加配料</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步为空，不添加任何配料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加钩子方法 ，决定是否要添加配料</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认情况加配料</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步，选择好的新鲜的黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加不同的配料,子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打碎</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四部，黄豆和配料放到豆浆机去打碎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//红豆豆浆</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步，配料是加入上好的红豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//花生豆浆</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步，配料是加入上号的花生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//纯豆浆</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PureSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//空实现</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写父类钩子方法，是否添加配料</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回false，不添加</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//制作红豆豆浆</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作红豆豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       SoyaMilk redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作花生豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoyaMilk peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作纯豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoyaMilk pureSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PureSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pureSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*制作红豆豆浆        第一步，选择好的新鲜的黄豆        第二步，配料是加入上好的红豆        第三步，黄豆和配料开始浸泡3小时        第四部，黄豆和配料放到豆浆机去打碎        制作花生豆浆        第一步，选择好的新鲜的黄豆        第二步，配料是加入上号的花生        第三步，黄豆和配料开始浸泡3小时        第四部，黄豆和配料放到豆浆机去打碎        制作纯豆浆        第一步，选择好的新鲜的黄豆        第二步为空，不添加任何配料        第三步，黄豆和配料开始浸泡3小时        第四部，黄豆和配料放到豆浆机去打碎        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-13、命令模式"><a href="#3-13、命令模式" class="headerlink" title="3.13、命令模式"></a>3.13、命令模式</h3><p><strong>1、智能生活项目需求</strong><br>    (1)我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app，就可以控制对这些家电工作。<br>    (2)这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个app，分别控制，我们希望只要一个app就可以控制全部智能家电。<br>    (3)要实现一个app控制所有智能家电的需求，则每个智能家电的厂家都要提供一个统一的接口给app调用，这时就可以考虑使用命令模式。<br>    (4)命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来。<br>    (5)在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品。</p><p><strong>2、命令模式基本介绍</strong><br>    (1)命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求操作者是谁。我们只需要在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计。<br>    (2)命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。<br>    (3)在命令模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命令），同时命令模式也支持撤销的操作。<br>    (4)通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者），士兵（命令的具体执行者），命令（连接将军和士兵）。<br>        Invoker是调用者（将军），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象。</p><p><strong>4、命令模式源码</strong><br>    命令模式在Spring框架jdbcTemplate应用源码中使用。、</p><p><strong>5、命令模式的注意事项和细节</strong><br>    (1)将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的excute()方法就可以让接收者工作，而不需要知道具体的接收者是谁，是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了命令桥梁的作用。<br>    (2)容易设计一个命令队列，只要把命令对象放到队列，就可以多线程的执行命令。<br>    (3)容易实现对请求的撤销和重做。<br>    (4)命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候要注意。<br>    (5)空命令也是一种设计模式，它为我们省去了判断空的操作。在下面的实例中，如果没有空命令，我们每按下一个按键都要判空，这给我们编码带来一定麻烦。<br>    (6)命令模式经典的应用场景：界面的一个按钮都是一条命令、模拟CMD（DOS命令）、订单的撤销/恢复、触发-反馈机制。</p><p><strong>6、命令模式解决智能生活项目</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建命令接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行某个操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//撤销某个动作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//被执行者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//电灯打开命令</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//聚合LightReceiver</span>    LightReceiver light<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>LightReceiver light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用接收者方法</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//关闭电灯</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    LightReceiver light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>LightReceiver light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里撤销是on</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//没有任何命令，即空执行，用于初始化每个按钮，当调用空命令时，对象什么都不做，</span><span class="token comment" spellcheck="true">// 这也是一种设计模式，可以省掉对空判断。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遥控器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//开按钮命令数组</span>    Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关按钮数组命令</span>    Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行撤销命令</span>    Command undoCommand<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器，完成对按钮初始化</span>    <span class="token keyword">public</span> <span class="token function">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//5个开始按钮</span>        <span class="token comment" spellcheck="true">//5个关闭按钮</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置初始化</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给我们的按钮设置你需要的命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> Command onCommand<span class="token punctuation">,</span> Command offCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按下开的按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找到你按下的开的按钮，并调用对应的方法</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录这次操作，用于撤销</span>        undoCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按下关的按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找到你按下管的按钮，并调用对应的方法</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录这次操作，用于撤销</span>        undoCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按下撤销按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//聚合TVReceiver</span>    TVReceiver tv<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">TVOnCommand</span><span class="token punctuation">(</span>TVReceiver tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//聚合TVReceiver</span>    TVReceiver tv<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">TVOffCommand</span><span class="token punctuation">(</span>TVReceiver tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用命令设计模式完成通过遥控器对电灯大操作</span>        <span class="token comment" spellcheck="true">//创建电灯的对象（接受者）</span>        LightReceiver lightReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建电灯相关的开关命令</span>        LightOnCommand lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建电灯关闭的命令</span>        LightOffCommand lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要一个遥控器</span>        RemoteController remoteController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给我们的遥控器设置相关命令</span>        <span class="token comment" spellcheck="true">//比如no=0的是电灯的开和关</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lightOnCommand<span class="token punctuation">,</span>lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----按下灯开按钮----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----按下电灯关按钮------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------按下撤销按钮-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用遥控器操作电视机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建TVReceiver</span>        TVReceiver tvReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TVOnCommand tvOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOnCommand</span><span class="token punctuation">(</span>tvReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        TVOffCommand tvOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOffCommand</span><span class="token punctuation">(</span>tvReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给我们的遥控器设置相关命令</span>        <span class="token comment" spellcheck="true">//比如no=1的是电灯的开和关</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>tvOnCommand<span class="token punctuation">,</span>tvOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----按下电视开按钮----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----按下电视关按钮------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------按下撤销按钮-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果</span>        <span class="token comment" spellcheck="true">/*----按下灯开按钮----        电灯打开了        ----按下电灯关按钮------        电灯关闭了        ------按下撤销按钮-------        电灯打开了        使用遥控器操作电视机        ----按下电视开按钮----        电视打开了        ----按下电视关按钮------        电视关闭了        ------按下撤销按钮-------        电视打开了*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-14、访问者模式"><a href="#3-14、访问者模式" class="headerlink" title="3.14、访问者模式"></a>3.14、访问者模式</h3><p><strong>1、测评系统需求</strong><br>    将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价有不同的种类，比如：成功、失败等）。</p><p><strong>2、传统方式问题分析</strong><br>    (1)如果系统比较小，还是ok，但是考虑系统增加越来越多的功能时，对代码改动较大，违反了ocp原则，不利于维护。<br>    (2)扩展性不好，比如增加了新的人员类型，或者管理方法，都不好做。<br>    (3)引出我们会使用新的设计模式—-访问者模式。</p><p><strong>3、访问者模式基本介绍</strong><br>    (1)访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，他可以在不改变数据结构的前提下定义作用于这些元素的新的操作。<br>    (2)主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题。<br>    (3)访问者模式基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口。<br>    (4)访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作“污染”这些对象的类型，可以选用访问者模式解决。</p><p><strong>4、双分派</strong><br>    (1)双分派是指不管类怎么变化，我们都能找到期望的方法运行。<br>    (2)双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型。<br>    (3)假设我们要添加一个wait(待定)的状态，考察Man和Woman的反应，由于使用了双分派，只需要增加一个Action子类即可在客户端调用即可，不需要改动任何其他类的代码。</p><p><strong>5、访问者模式注意事项和细节</strong></p><ul><li>优点<br>  (1)访问者模式符合单一职责原则，让程序具有优秀的扩展性、灵活性非常高。<br>  (2)访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统。</li><li>缺点<br>  (1)具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难。<br>  (2)违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素。<br>  (3)因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式是比较适合的。</li></ul><p><strong>6、使用访问者模式解决测评系统需求</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//访问者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//得到男性的测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到女性测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提供一个方法让访问者可以访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//说明：</span>    <span class="token comment" spellcheck="true">/*    * 1、这里我们使用到了双分派，即首先在客户端程序中，将具体的状态作为参数传递Man中（第一次分派）    * 2、然后Man类调用作为参数的“具体方法”中方法getManResult，同时将自己（this）作为参数传入（完成第二次分派）    * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Success</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手很成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是该歌手很成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//失败</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fail</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该歌手失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是该歌手失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wait</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价，该歌手待定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价，该歌手待定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数据结构，管理了很多人，有man还有woman</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护了一个集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加到list</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示测评情况</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person p <span class="token operator">:</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建数据结构</span>        ObjectStructure objectStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向数据结构中加人</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成功</span>        Success success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//失败</span>        Fail fail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//待定</span>        Wait wait <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-15、迭代器模式"><a href="#3-15、迭代器模式" class="headerlink" title="3.15、迭代器模式"></a>3.15、迭代器模式</h3><p><strong>1、展示学校院系需求</strong><br>    编写程序展示一个学校院系结构：需求是：要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p><p><strong>2、传统方式问题分析</strong><br>    (1)将学院看作是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层的。<br>    (2)实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此，这种方案不能很好的实现遍历的操作。<br>    (3)解决方案=======&gt;迭代器模式</p><p><strong>3、迭代器模式的基本介绍</strong><br>    (1)迭代器模式（Iterator Pattern）是常用的设计模式，属于行为型模式。<br>    (2)如果我们的集合元素是用不同的方式实现的，有数组，还有java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。<br>    (3)迭代器模式，提供一种遍历元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构。</p><p><strong>4、迭代器模式源码</strong><br>    迭代器在JDK的ArrayList集合中使用到。</p><p><strong>5、迭代器模式注意事项和细节</strong></p><ul><li>优点：<br>  (1)提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。<br>  (2)隐藏了聚合内部的结构，客户端要遍历聚合的时候，只能取到迭代器，而不会知道聚合的具体组成。<br>  (3)提供了一种设计思想，就是一个类应该只有一个引起变化的原因（单一职责原则）。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来，集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器。<br>  (4)当要展示一组相似对象，或者遍历一组相同对象时使用，适合使用迭代器模式。</li><li>缺点：<br>  (1)每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类。</li></ul><p><strong>6、用迭代器模式解决学校院系需求</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//系</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//名字</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//描述</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算机学院迭代器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollegeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里我们需要知道Department ,是以怎样的方式存放==>数组</span>    Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//遍历的位置</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ComputerCollegeIterator</span><span class="token punctuation">(</span>Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断数组中是否还有下一个元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">>=</span> departments<span class="token punctuation">.</span>length <span class="token operator">||</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//取元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Department department <span class="token operator">=</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>        position <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后移1位</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除的方法默认空实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//信息工程学院迭代器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollegeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//信息工程学院是以list方式存放系</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//索引，表示遍历到list第几个</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">InfoCollegeIterator</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departmentList <span class="token operator">=</span> departmentList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断list中是否还有下一个元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> departmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//取元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//空实现remove</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学院</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">College</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//学院名字</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加系的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个迭代器，遍历</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算机学院</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token punctuation">{</span>    Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> numOfDepartment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存当前数组的对象个数</span>    <span class="token keyword">public</span> <span class="token function">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最多存放五个专业</span>        departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"java专业"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"php专业"</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"spring框架"</span><span class="token punctuation">,</span><span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"mysql数据库"</span><span class="token punctuation">,</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"计算机学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Department department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">[</span>numOfDepartment<span class="token punctuation">]</span> <span class="token operator">=</span> department<span class="token punctuation">;</span>        numOfDepartment <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回迭代器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollegeIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//信息工程学院</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        departmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Department<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息安全专业"</span><span class="token punctuation">,</span><span class="token string">"电子科技"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"网路安全"</span><span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"微服务安全"</span><span class="token punctuation">,</span><span class="token string">"springCloud"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"信息工程学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Department department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        departmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollegeIterator</span><span class="token punctuation">(</span>departmentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//完成对所有学院的输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputImpl</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//学院集合拿到</span>    List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OutputImpl</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collegeList <span class="token operator">=</span> collegeList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历所有学院，然后调用printDepartment 输出各个学院的系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从collegeList取出所有学院，java中的list已经实现了iterator这个接口</span>        Iterator<span class="token operator">&lt;</span>College<span class="token operator">></span> iterator <span class="token operator">=</span> collegeList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取出学院</span>            College college <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//学院名字</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token operator">+</span> college<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到对应的迭代器遍历</span>            <span class="token function">printDepartment</span><span class="token punctuation">(</span>college<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出  学院输出系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDepartment</span><span class="token punctuation">(</span>Iterator iterator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Department d <span class="token operator">=</span> <span class="token punctuation">(</span>Department<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建学院</span>        List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ComputerCollege computerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InfoCollege infoCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputImpl output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputImpl</span><span class="token punctuation">(</span>collegeList<span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">printCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出：</span>        <span class="token comment" spellcheck="true">/*=====计算机学院======        java专业        php专业        spring框架        mysql数据库        =====信息工程学院======        信息安全专业        网路安全        微服务安全*/</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">76</span>``` </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模式 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2020/06/06/spring/"/>
      <url>/2020/06/06/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><span id="more"></span><h2 id="Spring-框架概述"><a href="#Spring-框架概述" class="headerlink" title="Spring 框架概述"></a>Spring 框架概述</h2><p>1、spring是轻量级的开源的JAVAEE框架。<br>2、spring可以解决企业应用开发的复杂性。<br>3、spring有两个核心部分：IOC和AOP<br>    (1)、IOC：控制反转，把创建对象过程交给spring进行管理。<br>    (2)、AOP：面向切面，不修改源代码进行功能增强。<br>4、spring特点：<br>    (1)、方便解耦，简化开发。<br>    (2)、AOP编程支持。<br>    (3)、方便程序测试。<br>    (4)、方便和其他框架进行整合。<br>    (5)、方便进行事务操作。<br>    (6)、降低API开发难度。</p><p>5、下载位置<br><a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p><p>6、入门案例<br>    (1)、导入相关jar包<br>        commons-logging-1.1.1.jar<br>        spring-beans-5.2.6.RELEASE.jar<br>        spring-context-5.2.6.RELEASE.jar<br>        spring-core-5.2.6.RELEASE.jar<br>        spring-expression-5.2.6.RELEASE.jar<br>    或在maven项目中导包：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>core <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>context <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>beans <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>beans<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>expression <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>expression<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>commons<span class="token operator">-</span>logging<span class="token operator">/</span>commons<span class="token operator">-</span>logging <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><pre><code>(2)、创建user.class</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(3)、创建配置文件 bean1.xml</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置user对象创建<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span>  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.User"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>(4)、测试类</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring5</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        *   1、加载spring配置文件        * */</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、获取配置创建的对象</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//com.boy.spring5.User@436e852b</span>        user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//add...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="1、什么是IOC？"><a href="#1、什么是IOC？" class="headerlink" title="1、什么是IOC？"></a>1、什么是IOC？</h3><pre><code>1、控制反转，把对象创建和对象之间的调用过程，交给spring进行管理。2、使用IOC目的，为了耦合度降低。3、入门案例就是用了IOC实现。</code></pre><h3 id="2、IOC底层原理"><a href="#2、IOC底层原理" class="headerlink" title="2、IOC底层原理"></a>2、IOC底层原理</h3><pre><code>**1、xml解析、工厂模式、反射**&gt; IOC过程：    第一步： xml配置文件，配置创建的对象。            &lt;bean id="user"  class="com.boy.spring5.User"&gt;&lt;/bean&gt;    第二步： 有两个类 service类和dao类，创建工厂            class UserFactory(){                    public static UserDao getDao(){                    String classValue = class属性值;//1 xml解析                    Class clazz = Class.forName(classValue);//2 通过反射创建对象                    return (UserDao) clazz.newInstance();                }            }**2、IOC（接口）**    2.1、IOC思想基于IOC容器完成，IOC底层就是都爱像工厂。    2.2、Spring提供IOC容器实现两种方式：（两个接口）        (1)、BeanFactory:IOC容器基本实现，是spring内部的实现接口，不提供开发人员进行使用。            加载配置文件的时候不会创建对象，在获取对象（使用），才会创建对象。        (2)、ApplicationContext: ApplicationContext接口是BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。        加载配置文件的时候就会把在配置文件的对象进行创建。**3、ApplicationContext接口实现类**    (1)、FileSystemXmlApplicationContext:        电脑磁盘下的配置文件（文件路径）    (2)、ClassPathXmlApplicationContext:        配置文件在src下（类路径）</code></pre><h3 id="3、IOC操作-Bean管理"><a href="#3、IOC操作-Bean管理" class="headerlink" title="3、IOC操作 Bean管理"></a>3、IOC操作 Bean管理</h3><pre><code>**1、什么是Bean管理**    - Bean管理指的是两个操作：        (1)、创建对象。        (2)、spring注入属性    - Bean管理操作有两种方式：        (1)、基于xml配置文件方式实现。        (2)、基于注解方式实现。</code></pre><h3 id="4、IOC操作Bean注入属性（基于xml方式）"><a href="#4、IOC操作Bean注入属性（基于xml方式）" class="headerlink" title="4、IOC操作Bean注入属性（基于xml方式）**"></a>4、IOC操作Bean注入属性（基于xml方式）**</h3><pre><code>**1、基于xml方式创建对象：**</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span>  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.User"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>    (1)、在spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建。    (2)、在bean标签有很多属性，介绍常用属性：        id属性： 唯一标识        class属性： 类全路径（包类路径）    (3)、创建对象的时候，默认也是执行无参数构造方法完成对象创建。**2、基于xml方式注入属性：**    DI依赖注入，就是注入属性。**3、属性注入第一种方式：使用set方法进行注入**    (1)、创建类，定义属性和对应的set方法</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String bname<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//set方法注入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span>String bname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造注入</span>    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span>String bname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/* Book book = new Book();        book.setBname("java编程思想");*/</span>        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"sql优化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在spring配置文件配置对象创建，配置属性注入 bean.xml</code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>set方式注入属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.Book"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            使用properties完成属性的注入：            name<span class="token operator">:</span> 类里边的属性名称            value<span class="token operator">:</span> 向属性注入的值        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bname"</span> value<span class="token operator">=</span><span class="token string">"java编程思想"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bauthor"</span> value<span class="token operator">=</span><span class="token string">"成成"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>    (3)、测试：</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String bname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bauthor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//set方法注入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span>String bname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBauthor</span><span class="token punctuation">(</span>String bauthor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bauthor <span class="token operator">=</span> bauthor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Book book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>bname<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>bauthor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>**4、属性注入第二种方式：使用有参构造进行注入**    (1)、创建类，定义属性，创建属性对应</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有参数构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>String oname<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Orders orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token string">"鱼鱼"</span><span class="token punctuation">,</span> <span class="token string">"甘肃庆阳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span>oname<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在spring配置文件中进行配置 bean1.xml</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用有参数构造注入属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orders"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.Orders"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            有参注入使用constructor<span class="token operator">-</span>arg 进行注入            name<span class="token operator">:</span> 类里边的属性名称            value<span class="token operator">:</span> 属性注入的值        <span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"oname"</span> value<span class="token operator">=</span><span class="token string">"spring源码深度解析"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"address"</span> value<span class="token operator">=</span><span class="token string">"人名邮电"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>    (3)测试</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有参数构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>String oname<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Orders{"</span> <span class="token operator">+</span>                <span class="token string">"oname='"</span> <span class="token operator">+</span> oname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Orders orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    orders<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>**5、p名称空间注入**    (1)、使用p名称空间注入，可以简化基于xml配置方式。    第一步：添加p名称空间在配置文件中。</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd"<span class="token operator">></span></code></pre><pre><code>    第二步：进行属性注入，在bean标签里边进行操作。            p名称底层用到的是set方法注入。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//set方法注入</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.Book"</span> p<span class="token operator">:</span>bname<span class="token operator">=</span><span class="token string">"java编程思想"</span> p<span class="token operator">:</span>bauthor<span class="token operator">=</span><span class="token string">"成成"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h3 id="5、IOC操作Bean注入null值和特殊符号（xml方式）"><a href="#5、IOC操作Bean注入null值和特殊符号（xml方式）" class="headerlink" title="5、IOC操作Bean注入null值和特殊符号（xml方式）"></a>5、IOC操作Bean注入null值和特殊符号（xml方式）</h3><pre><code>**字面量**    (1)、null值</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.Book"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bname"</span> value<span class="token operator">=</span><span class="token string">"java编程"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bauthor"</span> value<span class="token operator">=</span><span class="token string">"成成"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        向属性中设置空值    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"baddress"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>null<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>    (2)、属性值包含特殊符号</code></pre><pre class=" language-java"><code class="language-java">   <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.Book"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bname"</span> value<span class="token operator">=</span><span class="token string">"java编程"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bauthor"</span> value<span class="token operator">=</span><span class="token string">"成成"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            属性值包含特殊符号<span class="token punctuation">;</span> <span class="token operator">&lt;&lt;</span>南京<span class="token operator">>></span>                <span class="token number">1</span>、把<span class="token operator">&lt;&lt;</span> <span class="token operator">>></span> 进行转义 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>                <span class="token number">2</span>、把带特殊符号内容写到CDATA        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"baddress"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;&lt;</span>南京<span class="token operator">>></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Book book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Book{bname='java编程', bauthor='成成', baddress='&lt;&lt;南京>>'}</span><span class="token punctuation">}</span></code></pre><h3 id="6、IOC操作bean内外部bean和级联赋值注入（xml）"><a href="#6、IOC操作bean内外部bean和级联赋值注入（xml）" class="headerlink" title="6、IOC操作bean内外部bean和级联赋值注入（xml）"></a>6、IOC操作bean内外部bean和级联赋值注入（xml）</h3><pre><code>**1、注入属性--外部bean**    例如：从service层调用dao层，就叫做引入外部bean。    (1)、创建两个类service类和dao类    (2)、在service层调用dao层里边的方法    (3)、在spring配置文件中进行配置</code></pre><p>dao层</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dao userDao..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service层</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建UserDao类型属性，生成set方法</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1</span>、service和dao对象创建<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.service.UserService"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入UserDao对象            name<span class="token operator">:</span> 属性            ref<span class="token operator">:</span> 创建userDao对象bean标签id        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDaoImpl"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDaoImpl"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.dao.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>**2、注入属性--内部bean注入**    (1)、一对多关系：        一个部门有多个员工，一个员工属于一个部门，部门是一，员工是多。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//部门表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String dname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span>String dname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dept{"</span> <span class="token operator">+</span>                <span class="token string">"dname='"</span> <span class="token operator">+</span> dname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//员工表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//员工数以某一个部门，使用对象形式表示</span>    <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span>String ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ename<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在实体类之间表示一对多关系。员工表示所属部门，使用对象类型属性进行表示。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//员工数以某一个部门，使用对象形式表示</span>    <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span></code></pre><pre><code>    (3)、在spring配置文件中进行配置。</code></pre><p>bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内部bean<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Emp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"女"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>对象类型属性<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Dept"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dname"</span> value<span class="token operator">=</span><span class="token string">"安保部"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (4)、测试</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">,</span> Emp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    emp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>**3、注入属性--级联赋值（其他部分和上边一样，只修改xml配置文件）**    (1)、第一种写法：</code></pre><p>bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Emp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置两个普通属性<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"女"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Dept"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dname"</span> value<span class="token operator">=</span><span class="token string">"财务部"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (2)、第二种写法（其他部分和上边一样，需要在员工表中生成private Dept dept这个对象的get方法，和修改xml配置文件）：</code></pre><p>Emp:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//员工表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//员工数以某一个部门，使用对象形式表示</span>    <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生成get方法</span>    <span class="token keyword">public</span> Dept <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span>String ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ename<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值第二中写法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Emp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"女"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept.dname"</span> value<span class="token operator">=</span><span class="token string">"后勤部"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.bean.Dept"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Emp emp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">,</span> Emp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="7、IOC操作bean注入集合属性（xml）"><a href="#7、IOC操作bean注入集合属性（xml）" class="headerlink" title="7、IOC操作bean注入集合属性（xml）"></a>7、IOC操作bean注入集合属性（xml）</h3><pre><code>**1、注入数组类型属性。****2、注入List集合类型属性。****3、注入Map集合类型属性。****4、注入Set集合类型属性。**    (1)、创建类，定义数组、List、Map、Set类型属性，生成对应的set方法。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、数组类型属性</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、list集合类型属性</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、map集合类型属性</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4、Set集合类型属性</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaps</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSets</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sets <span class="token operator">=</span> sets<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在spring配置文件中进行配置</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.collectiontype.Stu"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1</span>、数组类型属性注入<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"courses"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>array<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>java课程<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>sql数据库<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">2</span>、list集合属性注入<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>list<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>唱歌<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>绘画<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>舞蹈<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">3</span>、map集合属性注入<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maps"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>map<span class="token operator">></span>                <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"JAVA"</span> value<span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"PHP"</span> value<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">4</span>、set集合注入<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sets"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>set<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>Redis<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (3)、测试</code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stu stu <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">,</span> Stu<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code>**5、在集合里边设置对象类型值**    (1)、创建类</code></pre><p>Course</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//课程类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCname</span><span class="token punctuation">(</span>String cname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cname <span class="token operator">=</span> cname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Course{"</span> <span class="token operator">+</span>                <span class="token string">"cname='"</span> <span class="token operator">+</span> cname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Stu2</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//学生学习多门课程</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> coursesList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCoursesList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Course<span class="token operator">></span> coursesList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coursesList <span class="token operator">=</span> coursesList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coursesList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在spring配置文件中进行配置</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入list集合类型，值是对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.collectiontype.Stu2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"coursesList"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>list<span class="token operator">></span>                <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course1"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course2"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建多个course对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.collectiontype.Course"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"spring源码"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.collectiontype.Course"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"springBoot自动装配"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (3)、测试</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stu2 stu <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">,</span> Stu2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//[Course{cname='spring源码'}, Course{cname='springBoot自动装配'}]</span><span class="token punctuation">}</span></code></pre><pre><code>**6、把集合注入部分提取出来**    (1)、创建类</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、在spring配置文件中引入名称空间util</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>              xmlns<span class="token operator">:</span>util<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/util"</span>              xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd               http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>util         http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>util<span class="token operator">/</span>spring<span class="token operator">-</span>util<span class="token punctuation">.</span>xsd"<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (3)、使用util标签完成list注入提取</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>util<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/util"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>util        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>util<span class="token operator">/</span>spring<span class="token operator">-</span>util<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>提取list集合类型属性注入<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>util<span class="token operator">:</span>list id<span class="token operator">=</span><span class="token string">"bookList"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>spring源码<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>九阴真经<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>九阳神功<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>util<span class="token operator">:</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">2</span>、提取list集合类型属性注入使用<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.collectiontype.Book"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span> ref<span class="token operator">=</span><span class="token string">"bookList"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (4)、测试</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Book book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">showBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//[spring源码, 九阴真经, 九阳神功]</span><span class="token punctuation">}</span></code></pre><h3 id="8、IOC操作bean管理（FactoryBean）"><a href="#8、IOC操作bean管理（FactoryBean）" class="headerlink" title="8、IOC操作bean管理（FactoryBean）"></a>8、IOC操作bean管理（FactoryBean）</h3><pre><code>**spring有两种类型bean，一种普通bean，另一种工厂bean(FactoryBean)****1、普通bean**    在spring配置文件中定义bean类型就是返回类型。**2、工厂bean(FactoryBean)**    在配置文件定义bean类型可以和返回类型不一样。    (1)、第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean。    (2)、第二步：实现接口里边的方法，在实现的方法中定义返回的bean类型。</code></pre><p>Book类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String bname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span>String bname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Book{"</span> <span class="token operator">+</span>                <span class="token string">"bname='"</span> <span class="token operator">+</span> bname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyBean类，实现FactoryBean接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义返回bean</span>    <span class="token keyword">public</span> Book <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setBname</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> book<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.factorybean.MyBean"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Book myBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBean<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Book{bname='成成'}</span><span class="token punctuation">}</span></code></pre><h3 id="9、IOC操作bean管理（bean作用域）"><a href="#9、IOC操作bean管理（bean作用域）" class="headerlink" title="9、IOC操作bean管理（bean作用域）"></a>9、IOC操作bean管理（bean作用域）</h3><pre><code>**1、在spring里面，设置创建bean实例是单实例还是多实例。****2、在spring里，默认情况下，bean是单实例对象**    单实例：两个bean对象内存地址相同，多实例对阿星，两个bean对象内存地址不相同。**3、如何设置是单实例还是多实例**    (1)、在spring配置文件bean标签里边有属性（scope）用于设置单实例还是多实例。    (2)、scope属性值：        第一个值：默认值，singleton,表示是单实例对象。        第二个值：prototype,表示是多实例对象。</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>多实例对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.factorybean.MyBean"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>不同:</p><pre class=" language-java"><code class="language-java">    com<span class="token punctuation">.</span>boy<span class="token punctuation">.</span>spring5<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Book<span class="token annotation punctuation">@26a7b76d</span>    com<span class="token punctuation">.</span>boy<span class="token punctuation">.</span>spring5<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Book<span class="token annotation punctuation">@4abdb505</span></code></pre><pre><code>    (3)、singleton和prototype区别：        第一：singleton单实例，prototype多实例        第二：设置scope值是：singleton的时候，加载spring配置文件的时候就会创建单实例对象。        第三：设置scope值是：prototype的时候，不是在加载spring配置文件的时候创建对象，在调用getBean()方法的时候，创建多实例对象。</code></pre><h3 id="10、IOC操作Bean管理（bean生命周期）"><a href="#10、IOC操作Bean管理（bean生命周期）" class="headerlink" title="10、IOC操作Bean管理（bean生命周期）"></a>10、IOC操作Bean管理（bean生命周期）</h3><pre><code>**1、生命周期**从对象创建到对象销毁的过程。**2、bean生命周期**    (1)、通过构造器创建bean实例。（无参数构造）    (2)、为bean的属性设置值，和对其他bean引用。（调用set方法）    (3)、调用bean的初始化的方法。（需要进行配置初始化的方法）    (4)、bean可以使用了。（对象获取到了）    (5)、当容器关闭的时候，调用bean的销毁的方法。（需要进行配置销毁的方法）**3、演示bean生命周期**    （1）、创建Orders类</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参数构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：执行无参数构造创建bean实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOname</span><span class="token punctuation">(</span>String oname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步：调用set方法设置属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建一个执行的初始化方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步：执行初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建销毁的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第五步：执行销毁的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    （2）bean2.xml</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orders"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.testbean.Orders"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"init"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"destory"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"oname"</span> value<span class="token operator">=</span><span class="token string">"手机"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (3)、测试类</code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Orders orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步：获取创建bean实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手动让bean实例销毁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用close方法完成bean实例对象销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (4)、输出结果：</code></pre><pre class=" language-java"><code class="language-java">第一步：执行无参数构造创建bean实例第二步：调用set方法设置属性值第三步：执行初始化方法第四步：获取创建bean实例对象com<span class="token punctuation">.</span>boy<span class="token punctuation">.</span>spring5<span class="token punctuation">.</span>testbean<span class="token punctuation">.</span>Orders<span class="token annotation punctuation">@569cfc36</span>调用close方法完成bean实例对象销毁第五步：执行销毁的方法</code></pre><pre><code>**4、bean的后置处理器**    (1)、通过构造器创建bean实例。（无参数构造）    (2)、为bean的属性设置值，和对其他bean引用。（调用set方法）    (3)、把bean实例传递bean后置处理器的方法。        （会执行postProcessBeforeInitialization()方法）    (4)、调用bean的初始化的方法。（需要进行配置初始化的方法）    (5)、把bean实例传递bean后置处理器的方法。        （会执行postProcessAfterInitialization()方法）    (6)、bean可以使用了。（对象获取到了）    (7)、当容器关闭的时候，调用bean的销毁的方法。（需要进行配置销毁的方法）**5、演示添加后置处理器的效果**    （其他步骤和上边相同）    （1）、创建一个类，实现接口BeanPostProcessor，创建后置处理器。</code></pre><p>创建类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之前执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之后执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (2)、配置文件bean.xml</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orders"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.testbean.Orders"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"init"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"destory"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"oname"</span> value<span class="token operator">=</span><span class="token string">"手机"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置后置处理器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBeanPost"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.testbean.MyBeanPost"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (3)、测试输出结果</code></pre><pre class=" language-java"><code class="language-java">第一步：执行无参数构造创建bean实例第二步：调用set方法设置属性值在初始化之前执行的方法第三步：执行初始化方法在初始化之后执行的方法第四步：获取创建bean实例对象com<span class="token punctuation">.</span>boy<span class="token punctuation">.</span>spring5<span class="token punctuation">.</span>testbean<span class="token punctuation">.</span>Orders<span class="token annotation punctuation">@64f6106c</span>调用close方法完成bean实例对象销毁第五步：执行销毁的方法</code></pre><h3 id="11、IOC操作Bean-xml自动装配"><a href="#11、IOC操作Bean-xml自动装配" class="headerlink" title="11、IOC操作Bean(xml自动装配)"></a>11、IOC操作Bean(xml自动装配)</h3><pre><code>**1、什么是自动装配？**    根据指定装配规则（属性名或者属性类型），Spring自动将匹配的属性值进行注入。**2、演示自动装配过程**    （1）、根据属性名称自动注入</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>实现自动装配        bean标签属性autowire<span class="token punctuation">,</span>配置自动装配        autowire属性常用两个值：        byName<span class="token operator">:</span>根据属性名注入<span class="token punctuation">,</span>要求注入值bean的id值和类属性名称一样。        byType<span class="token operator">:</span>根据属性类型注入，要求注入值bean的id值只能有一个，不能有多个。    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.autowire.Emp"</span> autowire<span class="token operator">=</span><span class="token string">"byName"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.autowire.Dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    (2)、根据属性类型自动注入</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>实现自动装配        bean标签属性autowire<span class="token punctuation">,</span>配置自动装配        autowire属性常用两个值：        byName<span class="token operator">:</span>根据属性名注入<span class="token punctuation">,</span>要求注入值bean的id值和类属性名称一样。        byType<span class="token operator">:</span>根据属性类型注入<span class="token punctuation">,</span>要求注入值bean的id值只能有一个，不能有多个。    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.autowire.Emp"</span> autowire<span class="token operator">=</span><span class="token string">"byType"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.autowire.Dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h3 id="12、IOC操作bean管理（外部属性文件）"><a href="#12、IOC操作bean管理（外部属性文件）" class="headerlink" title="12、IOC操作bean管理（外部属性文件）"></a>12、IOC操作bean管理（外部属性文件）</h3><pre><code>**1、直接配置数据库信息**    （1）、配置连接池（Druid）    （2）、引入德鲁伊连接池依赖jar包</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>直接配置连接池<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1207"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>beans</code></pre><pre><code>**2、通过引入外部属性文件配置数据库连接池**    (1)、创建外部属性文件，properties格式文件，写数据库信息</code></pre><p>jdbc.properties</p><pre class=" language-java"><code class="language-java">jdbc<span class="token punctuation">.</span>driverClass<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>userjdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">1207</span></code></pre><pre><code>    (2)、把外部properties属性文件引入到spring配置文件中        第一步：引入context名称空间</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>        第二步：在spring配置文件使用标签引入外部属性文件</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入外部属性文件<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:jdbc.properties"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置连接池<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driverClass}"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h3 id="13、IOC操作bean-基于注解方式"><a href="#13、IOC操作bean-基于注解方式" class="headerlink" title="13、IOC操作bean(基于注解方式)"></a>13、IOC操作bean(基于注解方式)</h3><pre><code>**1、什么是注解**    （1）注解是代码特殊标记。    （2）格式：@注解名称（属性名称=属性值，属性名称=属性值....）    （3）使用注解，注解作用在类上，方法上，属性上。    （4）使用注解的目的：简化xml配置。**2、spring针对Bean管理中创建对象提供注解**    （1）@Component    （2）@Service    （3）@Controller    （4）@Repository    上面的四个注解功能是一样的，都可以用来创建bean实例。**3、基于注解方式实现对象创建**    （1）引入依赖：spring-aop</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>aop <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aop<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>core <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>context <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>beans <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>beans<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>expression <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>expression<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>commons<span class="token operator">-</span>logging<span class="token operator">/</span>commons<span class="token operator">-</span>logging <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><pre><code>    (2)开启组件扫描(需要引入context名称空间)</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>              xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>              xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd               http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启组件的扫描        <span class="token number">1</span>、如果要扫描多个包，多个包之间使用逗号隔开        <span class="token number">2</span>、写扫描包的上层目录    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.boy.spring5.dao,com.boy.spring5.service"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>        <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.boy.spring5"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre><code>    （3）创建类，在类上添加创建爱你对象注解</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在注解里边value属性值可以省略不写</span><span class="token comment" spellcheck="true">//默认值是类名称，首字母小写</span><span class="token comment" spellcheck="true">//UserService---->userService</span>    <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>    (4)测试</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、基于注解方式实现属性注入</strong><br>    (1) @AutoWired</p><ul><li>@Autowired: 根据属性类型进行自动装配。<br> - 第一步：把service和dao对象创建，在service和dao类添加创建对象注解。<br> - 第二步：在service注入dao对象。在service类添加dao类型属性，在属性上边使用注解。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao add...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//service调用dao</span>    <span class="token comment" spellcheck="true">//定义类型属性，不需要添加set方法，添加注入属性注解</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>（2）@Qualifier- @Qualifier : 根据属性名称进行注入。这个注解和上边的@Autowired一起使用。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//service调用dao</span>    <span class="token comment" spellcheck="true">//定义类型属性，不需要添加set方法，添加注入属性注解</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userDaoImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(3) @Resource- @Resource : 既可以根据类型注入，也可以根据名称注入。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*//service调用dao    //定义类型属性，不需要添加set方法，添加注入属性注解    @Autowired    @Qualifier(value = "userDaoImpl")    private UserDao userDao;*/</span>    <span class="token annotation punctuation">@Resource</span>   <span class="token comment" spellcheck="true">//根据类型注入</span>    <span class="token comment" spellcheck="true">//@Resource(name = "userDaoImpl")   //名称注入</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>(4) @Value- @Value : 注入普通类型属性。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao add...."</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>6、纯注解开发</strong><br>    (1)创建配置类，替代xml配置文件。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//作为配置类，替代xml文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.cheng.spring5"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre><code>(2)编写测试类</code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加载配置文件</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="1、AOP基本概念"><a href="#1、AOP基本概念" class="headerlink" title="1、AOP基本概念"></a>1、AOP基本概念</h3><p><strong>1、什么是AOP？</strong><br>    (1)面向切面编程，面向方面编程。<br>    (2)利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>    (3)通俗描述：不通过修改源代码的方式，在主干功能里添加新的功能。</p><h3 id="2、AOP底层原理"><a href="#2、AOP底层原理" class="headerlink" title="2、AOP底层原理"></a>2、AOP底层原理</h3><p><strong>1、有两种情况动态代理：</strong><br>    第一种：有接口情况，JDK动态代理。</p><pre><code>第二种：没有接口情况，Cglib动态代理。</code></pre><p><strong>2、JDK动态代理</strong><br>(1)调用java.lang.Proxy包下的newProxyInstance方法。</p><ul><li>static Object  newProxyInstance(Classloader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h );</li><li>方法三个参数：<ul><li>第一个参数：类加载器，</li><li>第二个参数：增强方法所在的类，这个类可以实现多个接口，支持多个接口。</li><li>第三个参数：实现这个接口InvocationHandler，创建代理对象，写增强的方法。</li></ul></li></ul><p>(2)编写JDK动态代理代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建接口实现类的代理对象</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">{</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        UserDaoImpl user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao dao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>JDKProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*方法之前执行。。add传递的参数[1, 2]        方法之后执行com.cheng.spring5.proxy.UserDaoImpl@4dc63996        3        方法之前执行。。update传递的参数[成成]        方法之后执行com.cheng.spring5.proxy.UserDaoImpl@4dc63996        成成*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建代理对象</span><span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理对象，传递过来</span>    <span class="token comment" spellcheck="true">//有参构造传递</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserDaoProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//增强的逻辑</span>    <span class="token comment" spellcheck="true">//proxy: 代理对象</span>    <span class="token comment" spellcheck="true">//method：当前方法</span>    <span class="token comment" spellcheck="true">//args：参数</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法之前执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之前执行。。"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"传递的参数"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被增强的方法（被代理的方法）执行</span>        Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法之后执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之后执行"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、AOP术语"><a href="#3、AOP术语" class="headerlink" title="3、AOP术语"></a>3、AOP术语</h3><p><strong>1、连接点</strong></p><ul><li>类里边的哪些方法可以被增强，可以被增强的这些方法称为连接点。</li></ul><p><strong>2、切入点</strong></p><ul><li>实际被真正增强的方法，称为切入点。</li></ul><p><strong>3、通知（增强）</strong></p><ul><li>实际增强的逻辑部分，称为通知（增强）。</li><li>通知有多种类型（5种）：<ul><li>前置通知：</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终执行 finally</li></ul></li></ul><p><strong>4、切面</strong></p><ul><li>把通知应用到切入点的过程，叫做切面。</li><li>是动作</li></ul><h3 id="4、AOP操作"><a href="#4、AOP操作" class="headerlink" title="4、AOP操作"></a>4、AOP操作</h3><p><strong>1、Spring框架一般都是基于AspectJ实现AOP操作</strong><br>    (1)什么是AspectJ?<br>    - AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作。</p><p><strong>2、基于AspectJ实现AOP操作</strong><br>    (1)基于xml配置文件实现。<br>    (2)基于注解方式实现（使用）。</p><p><strong>3、AOP相关依赖</strong><br>    (1)在项目种引入aop依赖。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>aspects <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aspects<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>cglib<span class="token operator">/</span>cglib <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>aopalliance<span class="token operator">/</span>aopalliance <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>aspectj<span class="token operator">/</span>aspectjweaver <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><pre><code>(2)所有依赖</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>aspects <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aspects<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>cglib<span class="token operator">/</span>cglib <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>aopalliance<span class="token operator">/</span>aopalliance <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>aspectj<span class="token operator">/</span>aspectjweaver <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>core <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>context <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>beans <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>beans<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>expression <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>expression<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>commons<span class="token operator">-</span>logging<span class="token operator">/</span>commons<span class="token operator">-</span>logging <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><p><strong>4、切入点表达式</strong><br>    (1)切入点表达式作用：知道对哪个类里面的哪个方法进行增强。<br>    (2)语法结构<br>        - execution([权限修饰符][返回类型][类的全路径]<a href="%5B%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%5D">方法名称</a>)；<br>    - 举例1：对com.cheng.dao.Book类里边的add方法进行增强。<br>        - execution(* com.cheng.dao.Book.add(..));<br>    - 举例2：对com.cheng.dao.Book类里边的所有方法进行增强。<br>        - execution(* com.cheng.dao.Book.<em>(..));<br>    - 举例3：对com.cheng.dao包里边的所有类，所有方法进行增强。<br>        - execution(</em> com.cheng.dao.<em>.</em>(..));</p><h3 id="5、AOP操作（AspectJ注解）"><a href="#5、AOP操作（AspectJ注解）" class="headerlink" title="5、AOP操作（AspectJ注解）"></a>5、AOP操作（AspectJ注解）</h3><h4 id="一、AOP操作（AspectJ注解方式）"><a href="#一、AOP操作（AspectJ注解方式）" class="headerlink" title="一、AOP操作（AspectJ注解方式）"></a>一、AOP操作（AspectJ注解方式）</h4><p><strong>1、创建类（被增强类），在类中定义方法</strong></p><p><strong>2、创建增强类（编写增强逻辑）</strong><br>    (1)在增强类里面，创建方法，让不同方法代表不同通知类型。</p><p><strong>3、进行通知的配置</strong><br>    (1)在spring配置文件中，开启注解扫描。<br>    (2)使用注解创建User和UserProxy对象（@Component）。<br>    (3)在增强类上边添加一个注解@Aspet。<br>    (4)在spring配置文件种开启生成代理对象。</p><p><strong>4、配置不同类型的通知</strong><br>    (1)在增强类的里边，在作为通知方法上边通知类型注解，使用切入点表达式配置。</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>被增强的类<span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启注解扫描  自动扫描包<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5.aop.aopanno"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启AspectJ生成代理对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//增强的类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment" spellcheck="true">//表示要生成一个代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//前置通知</span>    <span class="token comment" spellcheck="true">//@Before 注解表示作为一个前置通知，在增强方法的前面执行</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//做前置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//做后置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知，方法执行之后执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最终通知（返回通知，当有异常，不执行）</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//后置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知，方法返回值之后执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//异常通知</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//异常通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知，当add方法在执行过程中有异常执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//环绕通知（方法执行之前之后都执行）</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//环绕通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被增强的方法执行</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：</span>        <span class="token comment" spellcheck="true">/*环绕之前        前置通知        add.....        环绕之后        后置通知，方法执行之后执行        最终通知，方法返回值之后执行*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、相同的切入点抽取</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//增强的类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment" spellcheck="true">//表示要生成一个代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//相同切入点抽取</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*//前置通知    //@Before 注解表示作为一个前置通知，在增强方法的前面执行    @Before(value = "execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //做前置通知    public void before(){        System.out.println("前置通知");    }    //后置通知    @After("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //做后置通知    public void after(){        System.out.println("后置通知，方法执行之后执行");    }    //后置通知（返回通知，当有异常，不执行）    @AfterReturning("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")  //后置通知    public void afterReturning(){        System.out.println("最终通知，方法返回值之后执行");    }    //异常通知    @AfterThrowing("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //异常通知    public void afterThrowing(){        System.out.println("异常通知，当add方法在执行过程中有异常执行");    }    //环绕通知（方法执行之前之后都执行）    @Around("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")      //环绕通知    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        System.out.println("环绕之前");        //被增强的方法执行        proceedingJoinPoint.proceed();        System.out.println("环绕之后");    }*/</span><span class="token punctuation">}</span></code></pre><p><strong>6、有多个增强类，对同一个方法进行增强，设置增强类优先级</strong><br>    (1)在增强类上添加注解@Order（数字类型值），数字类型值越小，优先级越高。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//优先级，括号中值越小，就先执行。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProxy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//增强的类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment" spellcheck="true">//表示要生成一个代理对象</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//相同切入点抽取</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.cheng.spring5.aop.aopanno.User.and(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"printDemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*//前置通知    //@Before 注解表示作为一个前置通知，在增强方法的前面执行    @Before(value = "execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //做前置通知    public void before(){        System.out.println("前置通知");    }    //后置通知    @After("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //做后置通知    public void after(){        System.out.println("后置通知，方法执行之后执行");    }    //后置通知（返回通知，当有异常，不执行）    @AfterReturning("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")  //后置通知    public void afterReturning(){        System.out.println("最终通知，方法返回值之后执行");    }    //异常通知    @AfterThrowing("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")   //异常通知    public void afterThrowing(){        System.out.println("异常通知，当add方法在执行过程中有异常执行");    }    //环绕通知（方法执行之前之后都执行）    @Around("execution(* com.cheng.spring5.aop.aopanno.User.and(..))")      //环绕通知    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        System.out.println("环绕之前");        //被增强的方法执行        proceedingJoinPoint.proceed();        System.out.println("环绕之后");    }*/</span><span class="token punctuation">}</span></code></pre><p><strong>7、完全使用注解开发</strong><br>    - 创建注解配置类，不需要创建xml配置文件。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.cheng.spring5"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="二、Aop操作（AspectJ配置文件）"><a href="#二、Aop操作（AspectJ配置文件）" class="headerlink" title="二、Aop操作（AspectJ配置文件）"></a>二、Aop操作（AspectJ配置文件）</h4><p><strong>1、创建两个类，一个增强类，一个被增强类，创建方法</strong></p><p><strong>2、在spring配置文件中创建两个类对象</strong></p><p><strong>3、在spring配置文件中配置切入点</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//被增强类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天去买了一本书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//增强类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5.aop.aopxml.Book"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bookProxy"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5.aop.aopxml.BookProxy"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置aop增强<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切入点<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"p"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.cheng.spring5.aop.aopxml.Book.buy(..))"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置切面<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">"bookProxy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>增强作用在具体的方法上<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"before"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"p"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Book book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JdbcTemplate-jdbc模板"><a href="#JdbcTemplate-jdbc模板" class="headerlink" title="JdbcTemplate(jdbc模板)"></a>JdbcTemplate(jdbc模板)</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>1、什么是JdbcTemplate</strong><br>    (1)Spring框架对JDBC进行封装，使用jdbcTemplate方便实现对数据库操作。</p><p><strong>2、准备工作</strong><br>    (1)引入相关依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>jdbc <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">47</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>对事务操作依赖<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>tx <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>tx<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>整合其他框架<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>orm <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>orm<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>全部依赖</li></ul><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>jdbc <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">47</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>对事务操作依赖<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>tx <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>tx<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>整合其他框架<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>orm <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>orm<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>aspects <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aspects<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>cglib<span class="token operator">/</span>cglib <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>aopalliance<span class="token operator">/</span>aopalliance <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aopalliance<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>aspectj<span class="token operator">/</span>aspectjweaver <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>core <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>context <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>beans <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>beans<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>springframework<span class="token operator">/</span>spring<span class="token operator">-</span>expression <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>expression<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>commons<span class="token operator">-</span>logging<span class="token operator">/</span>commons<span class="token operator">-</span>logging <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><pre><code>(2)在Spring配置文件配置数据库连接池。</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库连接池<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/goods"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1207"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>(3)配置JdbcTemplate对象，注入DataSource。</code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建JdbcTemplate对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入dataSource<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre><code>(4)创建service类，创建dao类，在dao注入jdbcTemplate对象。</code></pre><ul><li>开启组件扫描</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库连接池<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/goods"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1207"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建JdbcTemplate对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入dataSource<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启注解扫描<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入JdbcTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、JdbcTemplate操作数据库（添加）"><a href="#2、JdbcTemplate操作数据库（添加）" class="headerlink" title="2、JdbcTemplate操作数据库（添加）"></a>2、JdbcTemplate操作数据库（添加）</h3><p><strong>1、对应数据库表创建实体类</strong></p><p><strong>2、编写dao，进行数据库添加操作</strong><br>    (1)在dao进行数据库添加操作<br>    (2)调用JdbcTemplate对象里面的update方法实现添加操作。<br>        update(String sql, Object… args){}<br>        有两个参数：<br>        第一个参数（String sql）:sql语句。<br>        第二个参数（Object…args）:可变参数，设置sql语句值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入JdbcTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、添加sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user (id, name, pwd) values(?, ?, ?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、调用方法实现</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"成三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"12007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、JdbcTemplate操作数据库-修改和删除"><a href="#3、JdbcTemplate操作数据库-修改和删除" class="headerlink" title="3、JdbcTemplate操作数据库(修改和删除)"></a>3、JdbcTemplate操作数据库(修改和删除)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改方法</span>    <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除方法</span>    <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入JdbcTemplate</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、添加sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user (id, name, pwd) values(?, ?, ?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、调用方法实现</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update user set name = ?, pwd = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from user where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//添加</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"成三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"12007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"成啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"12006"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除、</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、JDBCTemplate操作数据库（查询）"><a href="#4、JDBCTemplate操作数据库（查询）" class="headerlink" title="4、JDBCTemplate操作数据库（查询）"></a>4、JDBCTemplate操作数据库（查询）</h3><p><strong>1、查询返回某个值</strong><br>    (1)查询表里面有多少条记录，返回是某个值<br>    (2)使用jdbcTemplate实现查询返回某个值的操作。</p><p><strong>2、查询返回对象</strong><br>    (1)使用的方法：queryForObject(String sql, RowMapper<t> rowMapper, Object… args);<br>        三个参数：<br>        第一个参数：sql语句。<br>        第二个参数：RowMapper，是接口，根据返回不同数据类型，使用这个接口里面实现类完成数据封装。<br>        第三个参数：sql语句值。</t></p><p><strong>3、查询返回集合</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/goods"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1207"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.cheng.spring5.query"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询记录数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    User <span class="token function">queryId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询所有数据</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询表记录数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from user"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回值是int</span>        Integer count <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    <span class="token keyword">public</span> User <span class="token function">queryId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user where id = ?"</span><span class="token punctuation">;</span>        User users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询所有</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> query <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> query<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询记录数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">queryId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">queryId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询所有</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、JdbcTemplate实现批量添加"><a href="#5、JdbcTemplate实现批量添加" class="headerlink" title="5、JdbcTemplate实现批量添加"></a>5、JdbcTemplate实现批量添加</h3><pre><code>batchUpdate(String sql, List&lt;Object[] batchArgs&gt;)两个参数：第一个参数：sql语句。第二个参数：List集合，添加多条记录条数。</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//批量添加</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchAddUser</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into user values(?,?,?)"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> jdbcTemolate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//批量添加测试</span>List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"spring"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用批量添加</span>userService<span class="token punctuation">.</span><span class="token function">batchAdd</span><span class="token punctuation">(</span>batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h3><p><strong>1、什么是事务？</strong><br>    (1)事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。</p><p><strong>2、事务四大特性：（ACID）</strong><br>    (1)原子性：要么都成功，要么都失败。<br>    (2)一致性：操作之前和操作之后，总量不变。<br>    (3)隔离性：多事务操作，他们之间不会产生影响。<br>    (4)持久性：事务提交之后，表中数据真正发生变化</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2020/05/28/html/"/>
      <url>/2020/05/28/html/</url>
      
        <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><span id="more"></span><h2 id="1、初始HTML"><a href="#1、初始HTML" class="headerlink" title="1、初始HTML"></a>1、初始HTML</h2><p><strong>1、HTML</strong><br>    - Hyper Text Markup Language（超文本标记语言）<br><strong>2、W3C</strong><br>    - World Wide Web Consortium<br>    - 成立于1994年，Web技术领域最权威和具影响力的国际中立性技术标准机构<br>    - <a href="http://www.w3.org/">http://www.w3.org/</a><br>    - <a href="http://www.chinaw3c.org/">http://www.chinaw3c.org/</a><br><em>W3C标准包括</em><br>    - 结构化标准语言（HTML、XML）<br>    - 表现标准语言（CSS）<br>    - 行为标准（DOM、ECMAScript）</p><h2 id="2、标签"><a href="#2、标签" class="headerlink" title="2、标签"></a>2、标签</h2><h3 id="1、网页基本信息"><a href="#1、网页基本信息" class="headerlink" title="1、网页基本信息"></a>1、网页基本信息</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> DOCTYPE：告诉浏览器，我们要使用什么规范 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> head标签代表网页头部 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> meta描述性标签，它用来描述我们网站一些信息 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> meta一般用来做SEO <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">"狂神说Java"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span><span class="token string">"来这个地方学习Java"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> title网页标题 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> body标签代表网页主题 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>Hello，World！<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="2、网页基本标签"><a href="#2、网页基本标签" class="headerlink" title="2、网页基本标签"></a>2、网页基本标签</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>网页基本标签<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>标题标签<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>一级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>二级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>三级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>h4<span class="token operator">></span>四级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span>h5<span class="token operator">></span>五级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span><span class="token operator">&lt;</span>h6<span class="token operator">></span>六级标签<span class="token operator">&lt;</span><span class="token operator">/</span>h6<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>段落标签<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>两只老虎    一只没有尾巴，一致没有眼睛<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>跑的快  跑的快<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>换行标签<span class="token operator">--</span><span class="token operator">></span>两只老虎 <span class="token operator">&lt;</span>br<span class="token operator">></span>跑的快 <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>水平线标签<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>粗体<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>strong<span class="token operator">></span>i love you<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>斜体<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>em<span class="token operator">></span>i love you<span class="token operator">&lt;</span><span class="token operator">/</span>em<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>特殊符号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>空格<span class="token operator">--</span><span class="token operator">></span>我<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>爱 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>你<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>大于号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>小于号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>版权符号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&amp;</span>copy<span class="token punctuation">;</span>版权所有成成<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="3、图片标签"><a href="#3、图片标签" class="headerlink" title="3、图片标签"></a>3、图片标签</h3><p>常见的图像格式<br>    - JPG<br>    - GIF<br>    - PNG<br>    - BMP（位图）<br>    - …</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"path"</span> alt<span class="token operator">=</span><span class="token string">"text"</span> title<span class="token operator">=</span><span class="token string">"text"</span> width<span class="token operator">=</span><span class="token string">"x"</span> height<span class="token operator">=</span><span class="token string">"y"</span> <span class="token operator">/</span><span class="token operator">></span>src：图像地址alt：图像的替代文字title：鼠标悬停提示文字width：图像宽度height：图像高度</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>图像标签<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>img学习    src：图片地址        相对地址<span class="token punctuation">(</span>推荐使用<span class="token punctuation">)</span>，绝对地址    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../resources/img/1.jpg"</span>          alt<span class="token operator">=</span><span class="token string">"狂神头像"</span> title<span class="token operator">=</span><span class="token string">"悬停文字"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="4、链接标签"><a href="#4、链接标签" class="headerlink" title="4、链接标签"></a>4、链接标签</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"链接路径"</span> target<span class="token operator">=</span><span class="token string">"目标窗口位置"</span><span class="token operator">></span>链接文本或图像<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>链接标签学习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用name作为标记<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a name<span class="token operator">=</span><span class="token string">"top"</span><span class="token operator">></span>顶部<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>锚标签    <span class="token number">1</span><span class="token punctuation">.</span>需要一个锚标记    <span class="token number">2</span><span class="token punctuation">.</span>跳转到标记    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#down"</span><span class="token operator">></span>回到底部<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>a标签    href<span class="token operator">:</span>必填，表示要跳转到那个页面    target<span class="token operator">:</span>表示窗口再哪里打开        _blank<span class="token operator">:</span>再新标签中打开        _self<span class="token operator">:</span>在自己的网页中打开    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"1.我的第一个HTML.html"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>点击我跳转到页面<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://baidu.com"</span> target<span class="token operator">=</span><span class="token string">"_self"</span><span class="token operator">></span>点击我跳转到百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"1.我的第一个HTML.html"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../resources/img/1.jpg"</span>              alt<span class="token operator">=</span><span class="token string">"狂神头像"</span> title<span class="token operator">=</span><span class="token string">"悬停文字"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>锚标签    <span class="token number">1</span><span class="token punctuation">.</span>需要一个锚标记    <span class="token number">2</span><span class="token punctuation">.</span>跳转到标记    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#top"</span><span class="token operator">></span>回到顶部<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>a name<span class="token operator">=</span><span class="token string">"down"</span><span class="token operator">></span>底部<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>功能性链接    邮件链接：mailto；    QQ链接：    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:8629303@qq.com"</span><span class="token operator">></span>点击联系我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>a target<span class="token operator">=</span><span class="token string">"_blank"</span> href<span class="token operator">=</span><span class="token string">"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img border<span class="token operator">=</span><span class="token string">"0"</span> src<span class="token operator">=</span><span class="token string">"http://wpa.qq.com/pa?p=2::53"</span>              alt<span class="token operator">=</span><span class="token string">"点击联系我"</span> title<span class="token operator">=</span><span class="token string">"点击联系我"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="5、行内元素和块元素"><a href="#5、行内元素和块元素" class="headerlink" title="5、行内元素和块元素"></a>5、行内元素和块元素</h3><ul><li>块元素 <ul><li>无论内容多少，该元素独占一行</li><li>（p、h1-h6…）</li></ul></li><li>行内元素 <ul><li>内容撑开宽度，左右都是行内元素的可以排在一行</li><li>（a、strong、em…）</li></ul></li></ul><h3 id="6、列表标签"><a href="#6、列表标签" class="headerlink" title="6、列表标签"></a>6、列表标签</h3><ul><li>什么是列表 <ul><li>列表就是信息资源的一种展示形式。它可以使信息结构化和条理化，并以列表的样式显示出来，以便浏览者能更快捷的获得相应信息<br>  -列表的分类 </li><li>无序列表</li><li>有序列表</li><li>自定义列表</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>列表学习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>有序列表<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ol<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>Java<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>Python<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>运维<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>前端<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>C<span class="token operator">/</span>C<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>    <span class="token operator">&lt;</span>hr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>无序列表<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>Java<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>Python<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>运维<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>前端<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>C<span class="token operator">/</span>C<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>hr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>自定义列表    dl：标签    dt：列表名称    dd：列表内容    应用范围：公司网站底部    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dl<span class="token operator">></span>        <span class="token operator">&lt;</span>dt<span class="token operator">></span>学科<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>Java<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>Python<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>Linux<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>        <span class="token operator">&lt;</span>dt<span class="token operator">></span>位置<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>湖南<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>        <span class="token operator">&lt;</span>dd<span class="token operator">></span>广东<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="7、表格标签"><a href="#7、表格标签" class="headerlink" title="7、表格标签"></a>7、表格标签</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>表格学习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表格table    行：tr    列：td    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"1px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>colspan 跨列<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>rowspan 跨行<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>td rowspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="8、媒体元素"><a href="#8、媒体元素" class="headerlink" title="8、媒体元素"></a>8、媒体元素</h3><ul><li>视频元素：video</li><li>音频元素：audio</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>媒体元素学习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>音频和视频    src：资源路径    controls：控制条    autoplay ：自动播放    <span class="token operator">--</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/*视频*/</span>    <span class="token operator">&lt;</span>video src<span class="token operator">=</span><span class="token string">"../resources/video/xxx.mp4"</span> controls autoplay<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span>    <span class="token comment" spellcheck="true">/*音频*/</span>    <span class="token operator">&lt;</span>audio src<span class="token operator">=</span><span class="token string">"../resources/audio/xxx.mp3"</span> controls autoplay<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="9、页面结构分析"><a href="#9、页面结构分析" class="headerlink" title="9、页面结构分析"></a>9、页面结构分析</h3><table><thead><tr><th align="center">元素名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">标题头部区域的内容（用于页面或页面中的一块区域）</td></tr><tr><td align="center">footer</td><td align="center">标记脚部区域的内容（用于整个页面或页面的一块区域）</td></tr><tr><td align="center">section</td><td align="center">web页面中一块独立区域</td></tr><tr><td align="center">article</td><td align="center">独立的文章内容</td></tr><tr><td align="center">aside</td><td align="center">相关内容或应用（用于侧边栏）</td></tr><tr><td align="center">nav</td><td align="center">导航类辅助内容</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>页面结构分析<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>header<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>页面头部<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>页面主体<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>    <span class="token operator">&lt;</span>footer<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>页面底部<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="10、iframe内联框架"><a href="#10、iframe内联框架" class="headerlink" title="10、iframe内联框架"></a>10、iframe内联框架</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"path"</span> name<span class="token operator">=</span><span class="token string">"mainFrame"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>path<span class="token operator">:</span>引用网页地址mainFrame<span class="token operator">:</span>框架标识名</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>内联框架<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>iframe内联框架    src：地址    w<span class="token operator">-</span>h：宽度高度    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"http://baidu.com"</span> frameborder<span class="token operator">=</span><span class="token string">"0"</span> width<span class="token operator">=</span><span class="token string">"300px"</span> height<span class="token operator">=</span><span class="token string">"300px"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">""</span> name<span class="token operator">=</span><span class="token string">"hello"</span> frameborder<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"1.我的第一个HTML.html"</span> target<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>点击跳转<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"//player.bilibili.com/player.html?aid=55631961&amp;bvid=BV1x4411V75C&amp;cid=97257627&amp;page=10"</span>             scrolling<span class="token operator">=</span><span class="token string">"no"</span> border<span class="token operator">=</span><span class="token string">"0"</span>             frameborder<span class="token operator">=</span><span class="token string">"no"</span> framespacing<span class="token operator">=</span><span class="token string">"0"</span> allowfullscreen<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="11、表单"><a href="#11、表单" class="headerlink" title="11、表单"></a>11、表单</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>登录注册<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表单form    action：表单提交的位置，可以是网站，也可以是一个请求处理地址    method：post，get 提交方式        get方式提交：外面可以在url中看到外面提交的信息，不安全，高效        post方式提交，比较安全，可以传输大文件    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"1.我的第一个HTML.html"</span> method<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文本输入框<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>密码框<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="12、文本框和单选框"><a href="#12、文本框和单选框" class="headerlink" title="12、文本框和单选框"></a>12、文本框和单选框</h3><p><strong>表单元素格式</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">指定元素的类型。text / password / checkbox / radio / submit / reset / file / hidden / image 和 button,默认text</td></tr><tr><td align="center">name</td><td align="center">指定表单元素的名称</td></tr><tr><td align="center">value</td><td align="center">元素的初始值。type为redio时，必须指定一个值</td></tr><tr><td align="center">size</td><td align="center">指定表单的初始宽度，当type为text或password时，表单元素的大小以字符为单位。对于其他类型，以像素为单位</td></tr><tr><td align="center">maxlength</td><td align="center">type为text或password时，输入的最大字符数</td></tr><tr><td align="center">cheched</td><td align="center">type为radio或checkbox时，指定按钮是否是被选中</td></tr></tbody></table><h3 id="13、按钮和多选框"><a href="#13、按钮和多选框" class="headerlink" title="13、按钮和多选框"></a>13、按钮和多选框</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>登录注册<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表单form    action：表单提交的位置，可以是网站，也可以是一个请求处理地址    method：post，get 提交方式        get方式提交：外面可以在url中看到外面提交的信息，不安全，高效        post方式提交，比较安全，可以传输大文件    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"1.我的第一个HTML.html"</span> method<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文本输入框        value<span class="token operator">=</span><span class="token string">"好帅"</span>  默认初始值        maxlength<span class="token operator">=</span><span class="token string">"8"</span>   最长能写几个字符        size<span class="token operator">=</span><span class="token string">"30"</span>   文本框的长度        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>密码框<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单选框标签        type<span class="token operator">=</span><span class="token string">"radio"</span>：单选框的值        value：单选框的值        name：表示组        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> value<span class="token operator">=</span><span class="token string">"boy"</span> name<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">/</span><span class="token operator">></span>男        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> value<span class="token operator">=</span><span class="token string">"girl"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> checked<span class="token operator">/</span><span class="token operator">></span>女        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>多选框        type<span class="token operator">=</span><span class="token string">"checkbox"</span>        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>爱好：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"sleep"</span> name<span class="token operator">=</span><span class="token string">"hobby"</span><span class="token operator">></span>睡觉            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"code"</span> name<span class="token operator">=</span><span class="token string">"hobby"</span><span class="token operator">></span>敲代码            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"chat"</span> name<span class="token operator">=</span><span class="token string">"hobby"</span><span class="token operator">></span>聊天            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"game"</span> name<span class="token operator">=</span><span class="token string">"hobby"</span><span class="token operator">></span>游戏        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>按钮        input type<span class="token operator">=</span><span class="token string">"button"</span>    普通按钮        input type<span class="token operator">=</span><span class="token string">"image"</span>     图片按钮        input type<span class="token operator">=</span><span class="token string">"submit"</span>     提交按钮        input type<span class="token operator">=</span><span class="token string">"reset"</span>      重置按钮        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> name<span class="token operator">=</span><span class="token string">"btn1"</span> value<span class="token operator">=</span><span class="token string">"点击变长"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"image"</span> src<span class="token operator">=</span><span class="token string">"../resources/img/1.jpg"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="14、下拉框、文本域、文件域"><a href="#14、下拉框、文本域、文件域" class="headerlink" title="14、下拉框、文本域、文件域"></a>14、下拉框、文本域、文件域</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>登录注册<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>下拉框，列表框        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>国家：            <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"列表名称"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"china"</span><span class="token operator">></span>中国<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"us"</span><span class="token operator">></span>美国<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"eth"</span> selected<span class="token operator">></span>瑞士<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"yd"</span><span class="token operator">></span>印度<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文本域<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>反馈：            <span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">"textarea"</span> id<span class="token operator">=</span><span class="token string">""</span> cols<span class="token operator">=</span><span class="token string">"30"</span> rows<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文件域        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"files"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"上传"</span> name<span class="token operator">=</span><span class="token string">"upload"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="15、搜索框、滑块和简单验证"><a href="#15、搜索框、滑块和简单验证" class="headerlink" title="15、搜索框、滑块和简单验证"></a>15、搜索框、滑块和简单验证</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>登录注册<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>邮件验证<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>邮件：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"email"</span> name<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>URL<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>URL：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"url"</span> name<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数字<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>数字：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> name<span class="token operator">=</span><span class="token string">"num"</span> max<span class="token operator">=</span><span class="token string">"100"</span> min<span class="token operator">=</span><span class="token string">"0"</span> size<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>滑块<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>音量：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"range"</span> name<span class="token operator">=</span><span class="token string">"voice"</span> min<span class="token operator">=</span><span class="token string">"0"</span> max<span class="token operator">=</span><span class="token string">"100"</span> step<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>搜索框<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>搜索：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"search"</span> name<span class="token operator">=</span><span class="token string">"search"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="16、表单的应用"><a href="#16、表单的应用" class="headerlink" title="16、表单的应用"></a>16、表单的应用</h3><p><strong>- 隐藏域：hidden</strong><br><strong>- 只读：readonly</strong><br><strong>- 禁用：disabled</strong></p><p><strong>增强鼠标可用性</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>增强鼠标可用性，点击label，光标自动到text上<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"mark"</span><span class="token operator">></span>你点我试试<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"mark"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><h3 id="17、表单初级验证"><a href="#17、表单初级验证" class="headerlink" title="17、表单初级验证"></a>17、表单初级验证</h3><ul><li>常用方式<br><strong>- placeholder：提示信息</strong><br><strong>- required：非空判断，不能为空</strong><br><strong>- pattern：正则表达式</strong></li></ul><p><strong>正则表达式网站：</strong></p><ul><li><a href="https://www.jb51.net/tools/regexsc.htm">https://www.jb51.net/tools/regexsc.htm</a></li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>p<span class="token operator">></span>名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> required<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>常用的正则：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jb51<span class="token punctuation">.</span>net<span class="token operator">/</span>tools<span class="token operator">/</span>regexsc<span class="token punctuation">.</span>htm<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>自定义邮箱：    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>            name<span class="token operator">=</span><span class="token string">"diy"</span>            pattern<span class="token operator">=</span><span class="token string">"/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> html 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式：Dubbo/Zookeeper</title>
      <link href="/2020/05/27/fen-bu-shi-dubbo-zookeeper/"/>
      <url>/2020/05/27/fen-bu-shi-dubbo-zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo-x2F-Zookeeper"><a href="#Dubbo-x2F-Zookeeper" class="headerlink" title="Dubbo/Zookeeper"></a>Dubbo/Zookeeper</h1><span id="more"></span><h2 id="1、什么是分布式系统？"><a href="#1、什么是分布式系统？" class="headerlink" title="1、什么是分布式系统？"></a>1、什么是分布式系统？</h2><ul><li>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</li><li>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。</li><li>分布式系统（distributed system）是建立在网络之上的软件系统。</li><li>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</li></ul><h2 id="2、架构"><a href="#2、架构" class="headerlink" title="2、架构"></a>2、架构</h2><ul><li>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需一个治理系统确保架构有条不紊的演进。</li></ul><h3 id="1、单一应用架构"><a href="#1、单一应用架构" class="headerlink" title="1、单一应用架构"></a>1、单一应用架构</h3><ul><li>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</li><li>优点：适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</li><li>缺点：<ul><li>1、性能扩展比较难</li><li>2、协同开发问题</li><li>3、不利于升级维护</li></ul></li></ul><h3 id="2、垂直应用架构"><a href="#2、垂直应用架构" class="headerlink" title="2、垂直应用架构"></a>2、垂直应用架构</h3><ul><li>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</li><li>优点：通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</li><li>缺点：公用模块无法重复利用，开发性的浪费</li></ul><h3 id="3、分布式服务架构"><a href="#3、分布式服务架构" class="headerlink" title="3、分布式服务架构"></a>3、分布式服务架构</h3><ul><li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</li></ul><h3 id="4、流动计算架构"><a href="#4、流动计算架构" class="headerlink" title="4、流动计算架构"></a>4、流动计算架构</h3><ul><li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]是关键。</li></ul><h2 id="3、RPC-协议"><a href="#3、RPC-协议" class="headerlink" title="3、RPC 协议"></a>3、RPC 协议</h2><h3 id="1、什么是RPC"><a href="#1、什么是RPC" class="headerlink" title="1、什么是RPC"></a>1、什么是RPC</h3><ul><li>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</li><li>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；<br>推荐阅读文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a></li><li>RPC两个核心模块：通讯，序列化。</li><li>序列化：两个电脑远程传输数据，数据需要转换</li></ul><h2 id="4、Dubbo"><a href="#4、Dubbo" class="headerlink" title="4、Dubbo"></a>4、Dubbo</h2><p><strong>- Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</strong></p><ul><li>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></li></ul><p><img src="/%22https:/blog.csdn.net/qq_43508478/article/details/106120918%22" alt="png"></p><ul><li>服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li><li>监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li></ul><p><strong>调用关系说明</strong><br>    - 服务容器负责启动，加载，运行服务提供者。<br>    - 服务提供者在启动时，向注册中心注册自己提供的服务。<br>    - 服务消费者在启动时，向注册中心订阅自己所需的服务。<br>    - 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。<br>    - 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。<br>    - 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="5、Dubbo环境搭建"><a href="#5、Dubbo环境搭建" class="headerlink" title="5、Dubbo环境搭建"></a>5、Dubbo环境搭建</h2><h3 id="1、Window下安装zookeeper"><a href="#1、Window下安装zookeeper" class="headerlink" title="1、Window下安装zookeeper"></a>1、Window下安装zookeeper</h3><p><strong>- 1、下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/</a></strong><br><strong>- 2、运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</strong><br>    - 可能遇到问题：闪退 !<br>    - 解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。<br><strong>- 3、修改zoo.cfg配置文件</strong><br>    - 将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。<br>        - 注意几个重要位置：<br>        - dataDir=./ 临时数据存储的目录（可写相对路径）<br>        - clientPort=2181 zookeeper的端口号<br>    - 修改完成后再次启动zookeeper<br><strong>- 4、使用zkCli.cmd测试</strong><br>    - ls /：列出zookeeper根下保存的所有节点<br>    - create –e /kuangshen 123：创建一个kuangshen节点，值为123<br>    - get /kuangshen：获取/kuangshen节点的值</p><h3 id="2、window下安装dubbo-admin"><a href="#2、window下安装dubbo-admin" class="headerlink" title="2、window下安装dubbo-admin"></a>2、window下安装dubbo-admin</h3><p><strong>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。<br>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</strong><br><strong>1、下载dubbo-admin</strong><br>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a><br><strong>2、解压进入目录</strong><br>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址<br><strong>3、在项目目录下打包dubbo-admin</strong><br>mvn clean package -Dmaven.test.skip=true<br>等待下载完毕<br><strong>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</strong></p><ul><li>【注意：zookeeper的服务一定要打开！】<br><em>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</em><br><strong>5、安装完成</strong></li></ul><h3 id="3、SpringBoot-Dubbo-zookeeper"><a href="#3、SpringBoot-Dubbo-zookeeper" class="headerlink" title="3、SpringBoot + Dubbo + zookeeper"></a>3、SpringBoot + Dubbo + zookeeper</h3><h4 id="1、框架搭建"><a href="#1、框架搭建" class="headerlink" title="1、框架搭建"></a>1、框架搭建</h4><p><strong>1. 启动zookeeper ！</strong><br><strong>2. IDEA创建一个空项目；</strong><br><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong><br><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong><br><em>编写接口</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>编写实现类</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"《狂神说Java》"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong><br><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong><br><em>编写service</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//我们需要去拿去注册中心的服务</span><span class="token punctuation">}</span></code></pre><p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p><h4 id="2、服务提供者"><a href="#2、服务提供者" class="headerlink" title="2、服务提供者"></a>2、服务提供者</h4><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p><pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token operator">/</span>dubbo<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dubbo<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>sgroschupf<span class="token operator">/</span>zkclient <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>sgroschupf<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zkclient<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志会冲突<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入zookeeper <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>framework<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.12</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>recipes<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.12</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.4</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>排除这个slf4j<span class="token operator">-</span>log4j12<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、在springboot配置文件中配置dubbo相关属性</strong></p><pre class=" language-java"><code class="language-java">#当前应用名字dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>provider<span class="token operator">-</span>server#注册中心地址dubbo<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>address<span class="token operator">=</span>zookeeper<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2181</span>#扫描指定包下服务dubbo<span class="token punctuation">.</span>scan<span class="token punctuation">.</span>base<span class="token operator">-</span>packages<span class="token operator">=</span>com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</code></pre><p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//将服务发布出去</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//放在容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"《狂神说Java》"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p><h4 id="3、服务消费者"><a href="#3、服务消费者" class="headerlink" title="3、服务消费者"></a>3、服务消费者</h4><p><strong>1、导入依赖，和之前的依赖一样；</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token operator">/</span>dubbo<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dubbo<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>sgroschupf<span class="token operator">/</span>zkclient <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>sgroschupf<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zkclient<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志会冲突<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入zookeeper <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>framework<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.12</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>recipes<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.12</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.4</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>排除这个slf4j<span class="token operator">-</span>log4j12<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、配置参数</strong></p><pre class=" language-java"><code class="language-java">#当前应用名字dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>consumer<span class="token operator">-</span>server#注册中心地址dubbo<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>address<span class="token operator">=</span>zookeeper<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2181</span></code></pre><p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p><p><strong>4. 完善消费者的服务类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TicketService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//注入到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Reference</span> <span class="token comment" spellcheck="true">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span>   TicketService ticketService<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bugTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       String ticket <span class="token operator">=</span> ticketService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在注册中心买到"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5. 测试类编写；</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerServerApplicationTests</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Autowired</span>   UserService userService<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       userService<span class="token punctuation">.</span><span class="token function">bugTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、启动测试"><a href="#4、启动测试" class="headerlink" title="4、启动测试"></a>4、启动测试</h4><p><strong>1. 开启zookeeper</strong><br><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong><br><strong>3. 开启服务者</strong><br><strong>4. 消费者消费测试，结果：</strong></p><blockquote><p>ok , 这就是SpingBoot + dubbo + zookeeper实现分布式开发的应用，其实就是一个服务拆分的思想；</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Dubbo/Zookeeper 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学Java心得</title>
      <link href="/2020/05/27/zi-xue-java-xin-de/"/>
      <url>/2020/05/27/zi-xue-java-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="Java自学心得"><a href="#Java自学心得" class="headerlink" title="Java自学心得"></a>Java自学心得</h1><span id="more"></span><blockquote><p><strong>1</strong></p></blockquote><p>​现在将我的自学心得与java初学者，和正在自学的童鞋分享，希望你们能少走弯路，早日学成，找份满意的工作。 首先要搞清楚自己为什么要自学编程，我是上大学后才接触计算机，我最初的想法是学好编程可以做一个自己的网站， 后来发现做个网站实在是很容易的，学好java编程可以有高薪的收入，而且以后的工作可以不用到处跑，可以天天坐办公室， 这才是我向往的工作，于是我下定决心要自学java。自学最重要的是心态和毅力，如果毅力不够坚定自学很难坚持下来， 自学是孤独寂寞的，同时也是快乐的。也许你身边没有人在自学java编程，所以你是寂寞的，但是当你调通了一个程序， 或者写出一点小玩意儿，他们也不能理解，那种收获的喜悦也只有自己能够体会。自学是漫长的艰难的，之前看到市面上有一些书， 什么21天精通java，对于这样的书，我只能 呵呵</p><blockquote><p><strong>2</strong></p></blockquote><p>​学习需要循序渐进，没有捷径，只能一步一个脚印，我是从大二开始自学java的一直到大四毕业。 自学会遇到这样那样的问题没有人来帮我解答，网络是个非常好的工具，当我们遇到问题时，我们要借助网络资源， 你遇到的问题别人也一定遇到过。我们可以在网上找解决方案，也可以加一些编程群去询问， 也可以在一些论坛发帖子咨询，这些都是解决方案。好了，如果以上的你都能做到，那么你可以开始自学java编程了， 如果做不到笔者奉劝你还是不要开始，因为如果坚持不下来最终会功亏一篑，还会耽误你很多的时间。 言归正传，自学我选择的是视频和书本。现在网络上的视频大把，我看的动力节点杜聚柄老师的javase教程，感觉还不错， 书我在图书馆借了好几本，以计算机专业的java编程教材为主，具体的书名称我忘记了，封面是绿色的 。大家不要下好几套视频，然后这个人的看看，那个人的看看，这样很不好，也会让你厌倦，最好选择一套视频就可以了，坚持看下来。 一般一个知识点我会看三遍，当然如果领悟能力强的同学不用看三遍。第一遍，认认真真的看，第二遍边看边对着敲代码， 看完第二遍之后，自己试着多运行，感觉差不多了，然后自己在不借助任何资料的情况下，完全自己敲一遍， 最后再看第三遍回味理解一下。自学一定要多动手，这个非常非常重要。</p><blockquote><p><strong>3</strong></p></blockquote><p>​关于编写工具，有的童鞋一开始就用eclipse等一些先进的工具来进行代码编写，笔者非常不推荐这种做法， 像eclipse这种IDE工具，是为了在工作中提高工作效率的。对于初学者最好不要用这些个工具， 笔者推荐大家用UltraEdit或者EditPlus 3 或者Notepad++ 这种文本编辑器来写java代码， 用这些工具写会让你更加牢固的记住java语法。等你用这些文本工具能写程序了，你再用eclipse写代码， 你就能体会到什么叫飞一般的感觉。关于学习的顺序首先是javase：基础语法、递归、面向对象、异常处理、数组、常用类、IO 、线程、 网络编程基本的章节顺序就是这样的，对于图形界面那部分，完全可以抛弃，因为图形界面不是java的强项， 现在也极少数的公司用图形界面来做应用。前面的部分，也就是除了 线程、网络编程 这2块的都要学好。 是不是线程、网络编程就不重要呢，错，这2块很重要，但是目前的javaEE项目用的比较少， 应该说对于一个刚工作的人来说，很少会接触到这2块。因为这2块的内容相对比较难一点，所以在开始学的时候，可以先学一下，如果不是很理解也不打紧， 等以后慢慢的再自己去摸索，这2块对于一个初学者来说可以稍微放宽一点，但是不能不学，现在不学以后也一定要回头补上的。 学好了javaSE就是java基础的一些东西之后，我们可以选择做javaEE也就是web项目，也可以选择做android手机应用。 笔者是做javaEE的,所以就介绍下javaEE的学习。有很多人在学完了javaSE之后就开始学习javaEE的框架了，什么SSH总挂在嘴边， 其实你离这些框架还很远。</p><blockquote><p><strong>4</strong></p></blockquote><p>​在学javaEE之前，请大家先学这几个 html,css,js 。有的人估计又要笑了，我是做后台的，学这些个东西没啥用。 其实做web的不会这些东西很可笑的，在以后的工作中，难免会遇到前后台都要写的，只写后台的很少， 或者说刚出来的就让你只写后台的很少。html,css 这些的编写我也建议用UltraEdit或者EditPlus 3 或者Notepad++ 而不是dreamweaver 这类工具来写，手写html你会发现以后的兼容问题会少很多，对于程序员来说html,css算不得编程语言， 只是一些标签而已，这些一个星期可以学精通。最后说说js，js其实是比较深奥的，对于初学者，掌握基本的js操作就可以了， 会基本的语法，能对dom元素进行熟练的操作，能做一些简单的效果就可以了。js的学习是个漫长的过程，在以后的学习和工作中再慢慢加强。 建议先学好js再用下jquery这类框架的js，一开始上手就用jquery,原生态的js不会就用这些框架，感觉有有点那个啥了。 html,css，js学完了，你就可以学习jsp了。可以用jsp做点小的应用，比如一个小小的留言板啊什么的， 在学jsp的时候要同时学习数据库，笔者推荐学习mysql 简单易用，而且目前很多公司都是用的mysql，像腾讯也是用mysql。 等jsp学好了，就可以学习servlet了，servlet是重点，像现在的一些框架StringMVC这样的框架都是基于servlet的。 等servlet学好了，大家就可以用eclipse了。用eclipse进行项目开发了，这个时候你会发现很得心应手。 学了这么久了也是要出成果的时候了，那么好吧，就用jsp+servlet+javabean+jdbc 写个bbs论坛吧，如果你不借用别人的代码， 完全自己写的，当然遇到问题是可以借助网络资源的，可以查资料，但是整个论坛的代码到数据库设计要是自己完成的。 等你bbs论坛写好了，那么恭喜你，你已经学的差不多了。为什么要写个bbs论坛，不要小看一个bbs论坛，涉及到的东西很多， 比如对数据库 基本的增删改查操作，bbs不同的人是有不同的权限的，这里就涉及到权限的问题，等等， 做这个论坛是对已经学的内容的应用，也是一个复习的过程。等你把论坛做好了，那么你对基础的东西就已经八九不离十了， 这个时候在看看一些开源的框架 spring mybatis springMVC springBoot springData springCloud 等这些， 你再学这些的时候，你会发现其实这些并不难。</p><blockquote><p>5</p></blockquote><p>当然喽，最好在学这些之前学一下设计模式，设计模式也是很重要的。这些框架都是建立在非常好的设计模式下的。 这些框架看完之后，是不是可以将自己的论坛改成用这些个框架来实现一下列，做完了，那么我可以告诉你你可以去找工作了， 再找一些笔试的题目做做，就可以很容易的找到满意的工作了。我们程序员是做技术的，所以要一直不断的学习，java其实深奥的很， 要学的东西很多，这也算是我的自学经历，希望能给正在自学或者正在初学java的童鞋一点帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/2020/05/27/springboot2/"/>
      <url>/2020/05/27/springboot2/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><span id="more"></span><p><strong>学习目标：</strong><br>    - 了解Swagger的概念及作用<br>    - 掌握在项目中集成Swagger自动生成API文档</p><h2 id="1、Swagger简介"><a href="#1、Swagger简介" class="headerlink" title="1、Swagger简介"></a>1、Swagger简介</h2><p><strong>前后端分离</strong><br>    - 前端 -&gt; 前端控制层、视图层<br>    - 后端 -&gt; 后端控制层、服务层、数据访问层<br>    - 前后端通过API进行交互<br>    - 前后端相对独立且松耦合<br><strong>产生的问题</strong><br>    - 前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发<br><strong>解决方案</strong><br>    - 首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险<br><strong>Swagger</strong><br>    - 号称世界上最流行的API框架<br>    - Restful Api 文档在线自动生成器 =&gt; API 文档 与API 定义同步更新<br>    - 直接运行，在线测试API<br>    - 支持多种语言 （如：Java，PHP等）<br>    - 官网：<a href="https://swagger.io/">https://swagger.io/</a></p><h2 id="2、SpringBoot集成Swagger"><a href="#2、SpringBoot集成Swagger" class="headerlink" title="2、SpringBoot集成Swagger"></a>2、SpringBoot集成Swagger</h2><p><strong>SpringBoot集成Swagger =&gt; springfox，两个jar包</strong><br>    - Springfox-swagger2<br>    - swagger-springmvc<br><strong>使用Swagger</strong><br>    - 要求：jdk 1.8 + 否则swagger2无法运行</p><h3 id="2-1、步骤"><a href="#2-1、步骤" class="headerlink" title="2.1、步骤"></a>2.1、步骤</h3><p><strong>1、新建一个SpringBoot=Web项目</strong><br><strong>2、导入相关依赖</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>io<span class="token punctuation">.</span>springfox<span class="token operator">/</span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>io<span class="token punctuation">.</span>springfox<span class="token operator">/</span>springfox<span class="token operator">-</span>swagger2 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>3、编写HelloController，测试确保运行成功！</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//配置类</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment" spellcheck="true">// 开启Swagger2的自动配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p><strong>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</strong></p><h3 id="3、配置Swagger"><a href="#3、配置Swagger" class="headerlink" title="3、配置Swagger"></a>3、配置Swagger</h3><p><strong>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//配置docket以配置Swagger具体参数</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2、可以通过apiInfo()属性配置文档信息</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置文档信息</span><span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"联系人名字"</span><span class="token punctuation">,</span> <span class="token string">"http://xxx.xxx.com/联系人访问链接"</span><span class="token punctuation">,</span> <span class="token string">"联系人邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>           <span class="token string">"Swagger学习"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>           <span class="token string">"学习演示如何配置Swagger"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>           <span class="token string">"v1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>           <span class="token string">"http://terms.service.url/组织链接"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 组织链接</span>           contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 联系人信息</span>           <span class="token string">"Apach 2.0 许可"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可</span>           <span class="token string">"许可链接"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可连接</span>           <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 扩展</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3、Docket 实例关联上 apiInfo()</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 看下效果；</strong></p><p><strong>5、完整配置代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置了swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger的信息=apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">,</span> <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span> <span class="token string">"2251221817@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"成成的Swagger API文档"</span><span class="token punctuation">,</span>                <span class="token string">"java cookie"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span>                 contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>VendorExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、Swagger配置扫描接口"><a href="#4、Swagger配置扫描接口" class="headerlink" title="4、Swagger配置扫描接口"></a>4、Swagger配置扫描接口</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置了swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors. 配置要扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage ：指定要扫描的包</span>                <span class="token comment" spellcheck="true">//any() :扫描全部</span>                <span class="token comment" spellcheck="true">//none() :不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation :扫描类上的注解，参数是一个注解的反射对象 Controller.Class</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation :扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.cheng.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">//过滤 过滤什么路径</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/cheng/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger的信息=apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">,</span> <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span> <span class="token string">"2251221817@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"成成的Swagger API文档"</span><span class="token punctuation">,</span>                <span class="token string">"java cookie"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span>                 contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>VendorExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、配置是否启动Swagger"><a href="#5、配置是否启动Swagger" class="headerlink" title="5、配置是否启动Swagger"></a>5、配置是否启动Swagger</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置了swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//enable是否启动Swagger,如果为false，则Swagger不能在浏览器中访问</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors. 配置要扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage ：指定要扫描的包</span>                <span class="token comment" spellcheck="true">//any() :扫描全部</span>                <span class="token comment" spellcheck="true">//none() :不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation :扫描类上的注解，参数是一个注解的反射对象 Controller.Class</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation :扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.cheng.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//过滤 过滤什么路径</span>                <span class="token comment" spellcheck="true">//.paths(PathSelectors.ant("/cheng/**"))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger的信息=apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">,</span> <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span> <span class="token string">"2251221817@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"成成的Swagger API文档"</span><span class="token punctuation">,</span>                <span class="token string">"java cookie"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span>                 contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>VendorExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6、获得Swagger当前生产环境"><a href="#6、获得Swagger当前生产环境" class="headerlink" title="6、获得Swagger当前生产环境"></a>6、获得Swagger当前生产环境</h3><p><strong>问题：我只希望我的Swagger在生产环境中使用</strong><br>    - 判断是不是生产环境 flag=false<br>    - 注入enable （flag）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置了swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置显示的swagger环境</span>        Profiles of <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过environment.acceptsProfiles() 判断是否处在自己设定的环境当中</span>        <span class="token comment" spellcheck="true">//新建配置文件：生产环境</span>        <span class="token comment" spellcheck="true">//application-dev.properties</span>        <span class="token comment" spellcheck="true">//在application.properties中配置环境 spring.profiles.active=dev</span>        <span class="token comment" spellcheck="true">//在application-dev中配默认端口号：server.port=8081</span>        <span class="token comment" spellcheck="true">//在浏览器访问:http://localhost:8081/swagger-ui.html即可</span>        <span class="token keyword">boolean</span> flog <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//enable是否启动Swagger,如果为false，则Swagger不能在浏览器中访问</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flog<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors. 配置要扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage ：指定要扫描的包</span>                <span class="token comment" spellcheck="true">//any() :扫描全部</span>                <span class="token comment" spellcheck="true">//none() :不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation :扫描类上的注解，参数是一个注解的反射对象 Controller.Class</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation :扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.cheng.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//过滤 过滤什么路径</span>                <span class="token comment" spellcheck="true">//.paths(PathSelectors.ant("/cheng/**"))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger的信息=apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">,</span> <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span> <span class="token string">"2251221817@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"成成的Swagger API文档"</span><span class="token punctuation">,</span>                <span class="token string">"java cookie"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span>                 contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>VendorExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7、配置Swagger-API分组"><a href="#7、配置Swagger-API分组" class="headerlink" title="7、配置Swagger API分组"></a>7、配置Swagger API分组</h3><p><strong>1、配置API文档的分组</strong></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">)</span></code></pre><p><strong>2、配置多个分组，多个Docket实例即可</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//配置了swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置显示的swagger环境</span>        Profiles of <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过environment.acceptsProfiles() 判断是否处在自己设定的环境当中</span>        <span class="token comment" spellcheck="true">//新建配置文件：生产环境</span>        <span class="token comment" spellcheck="true">//application-dev.properties</span>        <span class="token comment" spellcheck="true">//在application.properties中配置环境 spring.profiles.active=dev</span>        <span class="token comment" spellcheck="true">//在application-dev中配默认端口号：server.port=8081</span>        <span class="token comment" spellcheck="true">//在浏览器访问:http://localhost:8081/swagger-ui.html即可</span>        <span class="token keyword">boolean</span> flog <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//enable是否启动Swagger,如果为false，则Swagger不能在浏览器中访问</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flog<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//RequestHandlerSelectors. 配置要扫描接口的方式</span>                <span class="token comment" spellcheck="true">//basePackage ：指定要扫描的包</span>                <span class="token comment" spellcheck="true">//any() :扫描全部</span>                <span class="token comment" spellcheck="true">//none() :不扫描</span>                <span class="token comment" spellcheck="true">//withClassAnnotation :扫描类上的注解，参数是一个注解的反射对象 Controller.Class</span>                <span class="token comment" spellcheck="true">//withMethodAnnotation :扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.cheng.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//过滤 过滤什么路径</span>                <span class="token comment" spellcheck="true">//.paths(PathSelectors.ant("/cheng/**"))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger的信息=apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"成成"</span><span class="token punctuation">,</span> <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span> <span class="token string">"2251221817@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"成成的Swagger API文档"</span><span class="token punctuation">,</span>                <span class="token string">"java cookie"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://javacookieboy.github.io"</span><span class="token punctuation">,</span>                 contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>VendorExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8、实体配置"><a href="#8、实体配置" class="headerlink" title="8、实体配置"></a>8、实体配置</h3><p><strong>1、新建一个实体类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String username<span class="token punctuation">;</span>   <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2、只要这个实体在请求接口的返回值上（即使是泛型），都能映射到实体项中：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3、重启查看测试</strong><br><strong>4、注意</strong></p><ul><li>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。<ul><li>@ApiModel为类添加注释</li><li>@ApiModelProperty为类属性添加注释</li></ul></li></ul><h3 id="9、常用注解"><a href="#9、常用注解" class="headerlink" title="9、常用注解"></a>9、常用注解</h3><ul><li>Swagger的所有注解定义在io.swagger.annotations包下</li></ul><table><thead><tr><th align="center">Swagger注解</th><th align="center">简单说明</th></tr></thead><tbody><tr><td align="center">@Api(tags = “xxx模块说明”)</td><td align="center">作用在模块类上</td></tr><tr><td align="center">@ApiOperation(“xxx接口说明”)</td><td align="center">作用在接口方法上</td></tr><tr><td align="center">@ApiModel(“xxxPOJO说明”)</td><td align="center">作用在模型类上：如VO、BO</td></tr><tr><td align="center">@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td align="center">作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td align="center">@ApiParam(“xxx参数说明”)</td><td align="center">作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><h3 id="10、接口"><a href="#10、接口" class="headerlink" title="10、接口"></a>10、接口</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"狂神的接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/kuang"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">kuang</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"这个名字会被返回"</span><span class="token punctuation">)</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="11、总结"><a href="#11、总结" class="headerlink" title="11、总结"></a>11、总结</h3><ul><li>1、我们可以Swagger给一些比较难理解的属性或者接口，增加注释信息。</li><li>2、接口文档实时更新。</li><li>3、可以在线测试。<br>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</li></ul><h1 id="SpringBoot：异步、定时、邮件任务"><a href="#SpringBoot：异步、定时、邮件任务" class="headerlink" title="SpringBoot：异步、定时、邮件任务"></a>SpringBoot：异步、定时、邮件任务</h1><p><strong>前言</strong><br>在我们的工作中，常常会用到异步处理任务，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。还有一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息。还有就是邮件的发送，微信的前身也是邮件服务呢？这些东西都是怎么实现的呢？其实SpringBoot都给我们提供了对应的支持，我们上手使用十分的简单，只需要开启一些注解支持，配置一些配置文件即可！那我们来看看吧~</p><h2 id="1、异步任务"><a href="#1、异步任务" class="headerlink" title="1、异步任务"></a>1、异步任务</h2><p><strong>1、创建一个service包</strong><br><strong>2、创建一个类AsyncService</strong></p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。<br><strong>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务进行中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、编写controller包</strong><br><strong>4、编写AsyncController类</strong><br>我们去写一个Controller测试一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Autowired</span>   AsyncService asyncService<span class="token punctuation">;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></strong></p><ul><li>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：<br><strong>6、给hello方法添加@Async注解；</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//告诉Spring这是一个异步方法</span><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务进行中...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主启动类上添加一个注解@EnableAsync ，开启异步注解功能</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment" spellcheck="true">//开启异步注解功能</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTaskApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootTaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>7、重启测试，网页瞬间响应，后台代码依旧执行！</strong></p><h2 id="2、邮件任务"><a href="#2、邮件任务" class="headerlink" title="2、邮件任务"></a>2、邮件任务</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持<br>    - 邮件发送需要引入spring-boot-start-mail<br>    - SpringBoot 自动配置MailSenderAutoConfiguration<br>    - 定义MailProperties内容，配置在application.yml中<br>    - 自动装配JavaMailSender<br>    - 测试邮件发送</p><p><strong>1、引入pom依赖</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>mail<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、配置文件：application.properties</strong></p><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token number">2251221817</span><span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com#获取授权码：在QQ邮箱中的设置<span class="token operator">-</span><span class="token operator">></span>账户<span class="token operator">-</span><span class="token operator">></span>开启pop3和smtp服务spring<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>password<span class="token operator">=</span>xpjohkjogjekdjibspring<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>host<span class="token operator">=</span>smtp<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com#关于qq邮箱，要设置SSL加密，其他邮箱不需要#开启加密验证spring<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>smtp<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>enable<span class="token operator">=</span><span class="token boolean">true</span></code></pre><p><strong>3、测试：发送邮件</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot08AsyncApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JavaMailSenderImpl javaMailSender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简单邮箱</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个简单的邮件</span>        SimpleMailMessage simpleMailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件主题</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"小鱼鱼你好呀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件内容</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"我爱你，mua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送给</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2251221817@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自己接收</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2251221817@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simpleMailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//复杂邮箱</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个复杂的邮箱</span>        MimeMessage mimeMessage <span class="token operator">=</span> javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组装</span>        MimeMessageHelper mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"小鱼鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;p style='color:red'>我爱你，爱你&lt;/p>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//附件</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\ps2019\\ps学习\\图片\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2251221817@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2251221817@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、定时任务"><a href="#3、定时任务" class="headerlink" title="3、定时任务"></a>3、定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。<br>    - TaskExecutor接口<br>    - TaskScheduler接口</p><ul><li>两个注解：<ul><li>@EnableScheduling</li><li>@Scheduled</li></ul></li></ul><p><strong>cron表达式：</strong></p><table><thead><tr><th align="center">特殊字符</th><th align="center">代表含义</th></tr></thead><tbody><tr><td align="center">,</td><td align="center">枚举</td></tr><tr><td align="center">-</td><td align="center">区间</td></tr><tr><td align="center">*</td><td align="center">任意</td></tr><tr><td align="center">/</td><td align="center">步长</td></tr><tr><td align="center">?</td><td align="center">日/星期冲突匹配</td></tr><tr><td align="center">L</td><td align="center">最后</td></tr><tr><td align="center">W</td><td align="center">工作日</td></tr><tr><td align="center">C</td><td align="center">和Calendar联系后计算过的值</td></tr><tr><td align="center">#</td><td align="center">星期  4#2 第二个星期三</td></tr></tbody></table><p><strong>测试步骤</strong><br><strong>1、创建一个ScheduledService</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定时任务</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在一个特定时间执行这个方法</span>    <span class="token comment" spellcheck="true">//cron 表达式</span>    <span class="token comment" spellcheck="true">//秒 分 时 日 月 周几</span>    <span class="token comment" spellcheck="true">//代表每天的16点46分执行一次</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 46 16 * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello，你被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment" spellcheck="true">//开启异步注解功能</span><span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment" spellcheck="true">//开启定时功能的注解</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot08AsyncApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot08AsyncApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3、我们来详细了解下cron表达式</strong><br>    - <a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p><strong>4、常见的cron表达式</strong></p><pre class=" language-java"><code class="language-java">（<span class="token number">1</span>）<span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   表示每<span class="token number">2</span>分钟 执行任务（<span class="token number">1</span>）<span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">?</span>   表示在每月的<span class="token number">1</span>日的凌晨<span class="token number">2</span>点调整任务（<span class="token number">2</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> MON<span class="token operator">-</span>FRI   表示周一到周五每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>执行作业（<span class="token number">3</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> 6L <span class="token number">2002</span><span class="token operator">-</span><span class="token number">2006</span>   表示<span class="token number">2002</span><span class="token operator">-</span><span class="token number">2006</span>年的每个月的最后一个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>执行作（<span class="token number">4</span>）<span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   每天上午<span class="token number">10</span>点，下午<span class="token number">2</span>点，<span class="token number">4</span>点（<span class="token number">5</span>）<span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">9</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   朝九晚五工作时间内每半小时（<span class="token number">6</span>）<span class="token number">0</span> <span class="token number">0</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token operator">*</span> WED   表示每个星期三中午<span class="token number">12</span>点（<span class="token number">7</span>）<span class="token number">0</span> <span class="token number">0</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   每天中午<span class="token number">12</span>点触发（<span class="token number">8</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> <span class="token operator">*</span>   每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">9</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>     每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">10</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">11</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span> <span class="token number">2005</span>   <span class="token number">2005</span>年的每天上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">12</span>）<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>     在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">59</span>期间的每<span class="token number">1</span>分钟触发（<span class="token number">13</span>）<span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">55</span>期间的每<span class="token number">5</span>分钟触发（<span class="token number">14</span>）<span class="token number">0</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>     在每天下午<span class="token number">2</span>点到<span class="token number">2</span><span class="token operator">:</span><span class="token number">55</span>期间和下午<span class="token number">6</span>点到<span class="token number">6</span><span class="token operator">:</span><span class="token number">55</span>期间的每<span class="token number">5</span>分钟触发（<span class="token number">15</span>）<span class="token number">0</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>   在每天下午<span class="token number">2</span>点到下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">05</span>期间的每<span class="token number">1</span>分钟触发（<span class="token number">16</span>）<span class="token number">0</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">44</span> <span class="token number">14</span> <span class="token operator">?</span> <span class="token number">3</span> WED   每年三月的星期三的下午<span class="token number">2</span><span class="token operator">:</span><span class="token number">10</span>和<span class="token number">2</span><span class="token operator">:</span><span class="token number">44</span>触发（<span class="token number">17</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> MON<span class="token operator">-</span>FRI   周一至周五的上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">18</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token operator">?</span>   每月<span class="token number">15</span>日上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">19</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> L <span class="token operator">*</span> <span class="token operator">?</span>   每月最后一日的上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">20</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> 6L   每月的最后一个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">21</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> 6L <span class="token number">2002</span><span class="token operator">-</span><span class="token number">2005</span>   <span class="token number">2002</span>年至<span class="token number">2005</span>年的每月的最后一个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发（<span class="token number">22</span>）<span class="token number">0</span> <span class="token number">15</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token operator">*</span> <span class="token number">6</span>#<span class="token number">3</span>   每月的第三个星期五上午<span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span>触发</code></pre><h1 id="SpringBoot整合：-Redis"><a href="#SpringBoot整合：-Redis" class="headerlink" title="SpringBoot整合： Redis"></a>SpringBoot整合： Redis</h1><pre><code>- SpringBoot操作数据：spring-data  jpa  jdbc  mongodb  redis!- SpringData也是和SpringBoot齐名的项目。</code></pre><ul><li>说明：在SpringBoot 2.x 之后，原来使用的jedis被替换成了lettuce？<ul><li>jedis:采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，使用jedis pool连接池!更像BIO模式。</li><li>lettuce:采用netty,实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据了，更像NIO模式。</li></ul></li></ul><h2 id="1、源码分析"><a href="#1、源码分析" class="headerlink" title="1、源码分析"></a>1、源码分析</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>RedisOperations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>RedisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> LettuceConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JedisConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//我们可以自己定义一个redisTemplate来替换这个默认的！</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>         <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//默认的RedisTemplate没有过多的的设置，redis对象都是需要序列化的</span>       <span class="token comment" spellcheck="true">//两个泛型都是Object,Object的类型，我们后使用需要强制换为&lt;String,Object></span>      RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> template<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//由于String是redis最常用的类型，所以单独提出来了一个bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>         <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>      StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> template<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、整合测试"><a href="#2、整合测试" class="headerlink" title="2、整合测试"></a>2、整合测试</h2><p><strong>1、导入依赖</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、配置连接</strong></p><pre class=" language-java"><code class="language-java">#SpringBoot所有的配置类都有一个自动配置类  RedisAutoConfiguration#自动配置类都会绑定一个properties配置文件  RedisProperties#配置Redisspring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">6379</span></code></pre><pre><code>- 注意：springboot2.0之后配置lettuce ，jedis的不生效</code></pre><p><strong>3、测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RedisApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        redisTemplate 操作不同的数据类型，api和我们的指令是一样的        redisTemplate.opsForValue() 操作字符串类似String       redisTemplate.opsForList() 操作List 类似List        redisTemplate.opsForSet()       redisTemplate.opsForHash()        redisTemplate.opsForZSet()       redisTemplate.opsForGeo()       redisTemplate.opsForHyperLogLog()      除了以上的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD        // 获取redis的连接对象        RedisConnection connection=redisTemplate.getConnectionFactory().getConnection();        connection.flushDb();        connection.flushAll();        */</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">,</span> <span class="token string">"测试String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、编写一个自己的RedisTemplate"><a href="#3、编写一个自己的RedisTemplate" class="headerlink" title="3、编写一个自己的RedisTemplate"></a>3、编写一个自己的RedisTemplate</h2><ul><li>所有的redis操作，其实对于java开发人员来说，十分的简单，更重要是要去理解redis的思想和每一种数据结构的用处和作用场景！</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//固定模板</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自己定义一个RedisTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object ></span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Json序列化配置</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String 的序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化 方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、自定义Reids工具类RedisUtil"><a href="#4、自定义Reids工具类RedisUtil" class="headerlink" title="4、自定义Reids工具类RedisUtil"></a>4、自定义Reids工具类RedisUtil</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>   <span class="token comment" spellcheck="true">// @Qualifier("redisTemplate")</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =============================common============================</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot2 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot安全:SpringSecurity/Shiro</title>
      <link href="/2020/05/26/springboot-an-quan-springsecurity-shiro/"/>
      <url>/2020/05/26/springboot-an-quan-springsecurity-shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity-安全"><a href="#SpringSecurity-安全" class="headerlink" title="SpringSecurity (安全)"></a>SpringSecurity (安全)</h1><span id="more"></span><h2 id="1、安全简介"><a href="#1、安全简介" class="headerlink" title="1、安全简介"></a>1、安全简介</h2><ul><li>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</li><li>市面上存在比较有名的：Shiro，Spring Security ！<br>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</li><li>首先我们看下它的官网介绍：Spring Security官网地址<ul><li>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</li><li>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</li><li>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</li><li>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</li></ul></li><li>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</li><li>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。<ul><li>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</li></ul></li><li>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</li></ul><h2 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h2><p><strong>1、新建一个初始的springboot项目web模块，thymeleaf模块</strong><br><strong>2、导入静态资源</strong><br>    - E:\javaContant\SpringBoot\SpringSecurity素材<br>    - E:\javaContant\SpringBoot\springboot-06-security<br><strong>3、controller跳转！</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level1/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level1/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level2/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level2/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level3/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level3/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、测试实验环境是否OK</strong></p><h2 id="3、认识SpringSecurity"><a href="#3、认识SpringSecurity" class="headerlink" title="3、认识SpringSecurity"></a>3、认识SpringSecurity</h2><ul><li><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p></li><li><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul></li></ul><p><strong>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</strong><br>    <strong>“认证”（Authentication）</strong><br>        - 身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。<br>        - 身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。<br>    <strong>“授权” （Authorization）</strong><br>        - 授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。<br>        - 这个概念是通用的，而不是只在Spring Security 中存在。</p><h2 id="4、认证和授权"><a href="#4、认证和授权" class="headerlink" title="4、认证和授权"></a>4、认证和授权</h2><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能。<br><strong>1、引入spring security模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、编写 Spring Security 配置类</strong><br>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a><br>查看我们自己项目中的版本，找到对应的帮助文档：<br><a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a> #servlet-applications 8.16.4</p><p><strong>3、编写基本配置类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span> <span class="token comment" spellcheck="true">// 开启WebSecurity模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、定制请求、授权规则</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 定制请求的授权规则</span>   <span class="token comment" spellcheck="true">// 首页所有人可以访问</span>   http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</strong></p><p><strong>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启自动配置的登录功能</span><span class="token comment" spellcheck="true">// /login 请求来到登录页</span><span class="token comment" spellcheck="true">// /login?error 重定向到这里表示登录失败</span>http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</strong><br><strong>8、查看刚才登录页的注释信息；</strong></p><ul><li>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义认证规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//在内存中定义，也可以在jdbc中去拿....</span>   auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</strong></p><ul><li>There is no PasswordEncoder mapped for the id “null”<br><strong>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//认证    springboot 2.1.x 可以直接使用</span>    <span class="token comment" spellcheck="true">//密码编码：PasswordEncoder</span>    <span class="token comment" spellcheck="true">//在spring 5.0+ 新增了很多加密方式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这些数据正常从数据库中读</span>        <span class="token comment" spellcheck="true">//这里是从内存中读</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"chengcheng"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"1207"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"yuyu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"0627"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</strong></p><h2 id="5、权限控制和注销"><a href="#5、权限控制和注销" class="headerlink" title="5、权限控制和注销"></a>5、权限控制和注销</h2><p><strong>1、开启自动配置的注销的功能</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制请求的授权规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//....</span>   <span class="token comment" spellcheck="true">//开启自动配置的注销的功能</span>      <span class="token comment" spellcheck="true">// /logout 注销请求</span>   http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token punctuation">:</span>href<span class="token operator">=</span><span class="token string">"@{/logout}"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 注销<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</strong><br><strong>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// .logoutSuccessUrl("/"); 注销成功来到首页</span>http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>5、测试，注销完毕后，发现跳转到首页OK</strong><br><strong>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如chengcheng这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</strong></p><ul><li><p>我们需要结合thymeleaf中的一些功能</p><ul><li>sec：authorize=“isAuthenticated()”:是否认证登录！来显示不同的页面</li></ul></li><li><p>Maven依赖：</p></li></ul><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>extras<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>thymeleaf<span class="token operator">-</span>extras<span class="token operator">-</span>springsecurity4<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>7、修改我们的 前端页面</strong><br><strong>7.1、导入命名空间</strong></p><pre class=" language-java"><code class="language-java">xmlns<span class="token operator">:</span>sec<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity5"</span></code></pre><p><strong>7.2、修改导航栏，增加认证判断</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>登录注销<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right menu"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果未登录<span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div sec<span class="token punctuation">:</span>authorize<span class="token operator">=</span><span class="token string">"!isAuthenticated()"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token punctuation">:</span>href<span class="token operator">=</span><span class="token string">"@{/login}"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 登录       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果已登录<span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div sec<span class="token punctuation">:</span>authorize<span class="token operator">=</span><span class="token string">"isAuthenticated()"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>          用户名：<span class="token operator">&lt;</span>span sec<span class="token punctuation">:</span>authentication<span class="token operator">=</span><span class="token string">"principal.username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          角色：<span class="token operator">&lt;</span>span sec<span class="token punctuation">:</span>authentication<span class="token operator">=</span><span class="token string">"principal.authorities"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>div sec<span class="token punctuation">:</span>authorize<span class="token operator">=</span><span class="token string">"isAuthenticated()"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token punctuation">:</span>href<span class="token operator">=</span><span class="token string">"@{/logout}"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 注销       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><strong>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面</strong><br><strong>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 http.csrf().disable();</strong></p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span>http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>10、我们继续将下面的角色功能块认证完成！</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip1')"</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip1')"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>               <span class="token operator">&lt;</span>hr<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip2')"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>               <span class="token operator">&lt;</span>hr<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip3')"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>               <span class="token operator">&lt;</span>hr<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>               <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><strong>11、测试一下！</strong><br><strong>12、权限控制和注销搞定</strong></p><h2 id="6、记住我"><a href="#6、记住我" class="headerlink" title="6、记住我"></a>6、记住我</h2><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单<br><strong>1、开启记住我功能</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制请求的授权规则</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//。。。。。。。。。。。</span>   <span class="token comment" spellcheck="true">//记住我</span>   http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</strong></p><ul><li>登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie。</li></ul><h2 id="7、定制登陆页"><a href="#7、定制登陆页" class="headerlink" title="7、定制登陆页"></a>7、定制登陆页</h2><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？<br><strong>1、在刚才的登录页配置后面指定 loginpage</strong></p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、然后前端也需要指向我们自己定义的 login请求</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/toLogin}"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form th<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"@{/login}"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"field"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>label<span class="token operator">></span>Username<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>       <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui left icon input"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Username"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"user icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"field"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>label<span class="token operator">></span>Password<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>       <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui left icon input"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lock icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui blue submit button"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre><p><strong>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</strong></p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 登陆表单提交请求</span></code></pre><p><strong>5、在登录页增加记住我的多选框</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"remember"</span><span class="token operator">></span> 记住我</code></pre><p><strong>6、后端验证处理！</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制记住我的参数！</span>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>7、测试，OK</strong></p><h2 id="8、完整配置代码"><a href="#8、完整配置代码" class="headerlink" title="8、完整配置代码"></a>8、完整配置代码</h2><p><strong>Controller</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level1/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level1/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level2/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level2/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level3/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level3/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>SecurtyConfig</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//AOP:拦截器</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token comment" spellcheck="true">//链式编程</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首页所有人可以访问，功能页只有对应权限的人才能访问</span>        <span class="token comment" spellcheck="true">//请求授权的规则</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有权限默认会到登陆页面,需要开启登陆的页面</span>        <span class="token comment" spellcheck="true">//定制登陆页</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭csrf功能</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//登陆失败可能存在的原因</span>        <span class="token comment" spellcheck="true">//注销，跳到首页</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启记住我功能 默认保存两周</span>        <span class="token comment" spellcheck="true">//自定义接受前端的参数</span>        http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//认证    springboot 2.1.x 可以直接使用</span>    <span class="token comment" spellcheck="true">//密码编码：PasswordEncoder</span>    <span class="token comment" spellcheck="true">//在spring 5.0+ 新增了很多加密方式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这些数据正常从数据库中读</span>        <span class="token comment" spellcheck="true">//这里是从内存中读</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"chengcheng"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"1207"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"yuyu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"0627"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>login.html</strong> </p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> xmlns<span class="token operator">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1, maximum-scale=1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>semantic<span class="token operator">-</span>ui<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui segment"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h1 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui placeholder segment"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui column very relaxed stackable grid"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui form"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>form th<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"@{/login}"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"field"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>label<span class="token operator">></span>Username<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui left icon input"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Username"</span> name<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"user icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"field"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>label<span class="token operator">></span>Password<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui left icon input"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lock icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"field"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"remember"</span><span class="token operator">></span>记住我                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui blue submit button"</span><span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui label"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>注册            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>small<span class="token operator">></span>blog<span class="token punctuation">.</span>kuangstudy<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui segment"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h3<span class="token operator">></span>Spring Security Study by 秦疆<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script th<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@{/qinjiang/js/jquery-3.1.1.min.js}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script th<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@{/qinjiang/js/semantic.min.js}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p><strong>index.html</strong> 首页</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> xmlns<span class="token operator">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span>      xmlns<span class="token operator">:</span>sec<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1, maximum-scale=1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>semantic<span class="token operator">-</span>ui<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/qinjiang/css/qinstyle.css}"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主容器<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui segment"</span> id<span class="token operator">=</span><span class="token string">"index-header-nav"</span> th<span class="token operator">:</span>fragment<span class="token operator">=</span><span class="token string">"nav-menu"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui secondary menu"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span>  th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/index}"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>登录注销<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right menu"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果未登录<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"!isAuthenticated()"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/toLogin}"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 登录                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果登陆：用户名、注销<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"isAuthenticated()"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>                        用户名：<span class="token operator">&lt;</span>span sec<span class="token operator">:</span>authentication<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>角色：<span class="token operator">&lt;</span>span sec<span class="token operator">:</span>authentication<span class="token operator">=</span><span class="token string">"principal.getAuthorities()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"isAuthenticated()"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/logout}"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sign-out icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> 注销                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>已登录                <span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/usr/toUserCenter}"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"address card icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> admin                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui segment"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>Spring Security Study by 成成<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui three column stackable grid"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>根据用户角色动态实现<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip1')"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>                            <span class="token operator">&lt;</span>hr<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level1/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip2')"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>                            <span class="token operator">&lt;</span>hr<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level2/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip3')"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui raised segment"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ui"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h5 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Level <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>                            <span class="token operator">&lt;</span>hr<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/1}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/2}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@{/level3/3}"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bullhorn icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> Level<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script th<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@{/qinjiang/js/jquery-3.1.1.min.js}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script th<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@{/qinjiang/js/semantic.min.js}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="9、对应文件磁盘位置"><a href="#9、对应文件磁盘位置" class="headerlink" title="9、对应文件磁盘位置"></a>9、对应文件磁盘位置</h2><ul><li>E:\javaContant\SpringBoot\springboot-06-security</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合:Druid/Mybatis</title>
      <link href="/2020/05/25/springboot-zheng-he-druid-mybatis/"/>
      <url>/2020/05/25/springboot-zheng-he-druid-mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-整合Druid"><a href="#SpringBoot-整合Druid" class="headerlink" title="SpringBoot:整合Druid"></a>SpringBoot:整合Druid</h1><span id="more"></span><h2 id="1、Druid简介"><a href="#1、Druid简介" class="headerlink" title="1、Druid简介"></a>1、Druid简介</h2><ul><li>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</li><li>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</li><li>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</li><li>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</li><li>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</li><li>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></li></ul><h2 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h2><p><strong>1、添加上 Druid 数据源依赖</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>2、切换数据源；</strong></p><ul><li>之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</li></ul><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  datasource<span class="token operator">:</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">1207</span>    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>springboot<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver    type<span class="token operator">:</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource # 自定义数据源</code></pre><p><strong>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查看默认数据源   class com.zaxxer.hikari.HikariDataSource</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得数据库连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</strong></p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  datasource<span class="token operator">:</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">1207</span>    #<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC解决时区的报错    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>springboot<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver    type<span class="token operator">:</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize<span class="token operator">:</span> <span class="token number">5</span>    minIdle<span class="token operator">:</span> <span class="token number">5</span>    maxActive<span class="token operator">:</span> <span class="token number">20</span>    maxWait<span class="token operator">:</span> <span class="token number">60000</span>    timeBetweenEvictionRunsMillis<span class="token operator">:</span> <span class="token number">60000</span>    minEvictableIdleTimeMillis<span class="token operator">:</span> <span class="token number">300000</span>    validationQuery<span class="token operator">:</span> SELECT <span class="token number">1</span> FROM DUAL    testWhileIdle<span class="token operator">:</span> <span class="token boolean">true</span>    testOnBorrow<span class="token operator">:</span> <span class="token boolean">false</span>    testOnReturn<span class="token operator">:</span> <span class="token boolean">false</span>    poolPreparedStatements<span class="token operator">:</span> <span class="token boolean">true</span>    #配置监控统计拦截的filters，stat<span class="token operator">:</span>监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Priority    #则导入 log4j 依赖即可，Maven 地址：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>log4j<span class="token operator">/</span>log4j    filters<span class="token operator">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    maxPoolPreparedStatementPerConnectionSize<span class="token operator">:</span> <span class="token number">20</span>    useGlobalDataSourceStat<span class="token operator">:</span> <span class="token boolean">true</span>    connectionProperties<span class="token operator">:</span> druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>mergeSql<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>slowSqlMillis<span class="token operator">=</span><span class="token number">500</span></code></pre><p><strong>5、导入Log4j 的依赖</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>6、现在需要自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效       @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中     */</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>7、测试类中测试一下；看是否成功！</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootDataJdbcApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//看一下默认数据源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得连接</span>        Connection connection <span class="token operator">=</span>   dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DruidDataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源最大连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getMaxActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源初始化连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getInitialSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、配置Druid数据源监控"><a href="#3、配置Druid数据源监控" class="headerlink" title="3、配置Druid数据源监控"></a>3、配置Druid数据源监控</h2><p><strong>- Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web</strong> 页面。<br><strong>- 所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置 Druid 监控管理后台的Servlet；</span><span class="token comment" spellcheck="true">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span>    <span class="token comment" spellcheck="true">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录账号</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录密码</span>    <span class="token comment" spellcheck="true">//后台允许谁可以访问</span>    <span class="token comment" spellcheck="true">//initParams.put("allow", "localhost")：表示只有本机可以访问</span>    <span class="token comment" spellcheck="true">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//deny：Druid 后台拒绝谁访问</span>    <span class="token comment" spellcheck="true">//initParams.put("kuangshen", "192.168.1.20");表示禁止此ip访问</span>    <span class="token comment" spellcheck="true">//设置初始化参数</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>- 配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></strong></p><h2 id="4、配置-Druid-web-监控-filter-过滤器"><a href="#4、配置-Druid-web-监控-filter-过滤器" class="headerlink" title="4、配置 Druid web 监控 filter 过滤器"></a>4、配置 Druid web 监控 filter 过滤器</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置 Druid 监控 之  web 监控的 filter</span><span class="token comment" spellcheck="true">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*,/jdbc/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"/*" 表示过滤所有请求</span>    bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>平时在工作中，按需求进行配置即可，主要用作监控。</li></ul><h1 id="SpringBoot-整合Mybatis"><a href="#SpringBoot-整合Mybatis" class="headerlink" title="SpringBoot:整合Mybatis"></a>SpringBoot:整合Mybatis</h1><h2 id="1、导入mybatis所需要的依赖"><a href="#1、导入mybatis所需要的依赖" class="headerlink" title="1、导入mybatis所需要的依赖"></a>1、导入mybatis所需要的依赖</h2><p><strong>mybatis-spring-boot-starter:整合</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="2、配置数据库连接信息"><a href="#2、配置数据库连接信息" class="headerlink" title="2、配置数据库连接信息"></a>2、配置数据库连接信息</h2><pre class=" language-JAVA"><code class="language-JAVA">spring:  datasource:    username: root    password: 1207    url: jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=UTC&useUnicode=true$characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver</code></pre><h2 id="3、试一下连接是否成功"><a href="#3、试一下连接是否成功" class="headerlink" title="3、试一下连接是否成功"></a>3、试一下连接是否成功</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot05MybatisApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、创建实体类"><a href="#4、创建实体类" class="headerlink" title="4、创建实体类"></a>4、创建实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、配置Mapper接口类"><a href="#5、配置Mapper接口类" class="headerlink" title="5、配置Mapper接口类"></a>5、配置Mapper接口类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Mapper : 表示本类是一个 MyBatis 的 Mapper，等价于以前 Spring 整合 MyBatis 时的 Mapper 接口</span><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//选择全部用户</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id选择用户</span>    User <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加一个用户</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改一个用户</span>    <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id删除用户</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="6、对应Mapper映射文件"><a href="#6、对应Mapper映射文件" class="headerlink" title="6、对应Mapper映射文件"></a>6、对应Mapper映射文件</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.kuang.mybatis.pojo.mapper.UserMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUser"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>    select <span class="token operator">*</span> <span class="token keyword">from</span> user  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUserById"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>    select <span class="token operator">*</span> <span class="token keyword">from</span> user where id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"addUser"</span> parameterType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>    insert into user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span> values <span class="token punctuation">(</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>pwd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">></span>    <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateUser"</span> parameterType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>    update user <span class="token keyword">set</span> name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span>pwd<span class="token operator">=</span>#<span class="token punctuation">{</span>pwd<span class="token punctuation">}</span> where id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">delete</span> id<span class="token operator">=</span><span class="token string">"deleteUser"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> user where id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">delete</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><h2 id="7、maven配置资源过滤问题"><a href="#7、maven配置资源过滤问题" class="headerlink" title="7、maven配置资源过滤问题"></a>7、maven配置资源过滤问题</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>resource<span class="token operator">></span>        <span class="token operator">&lt;</span>directory<span class="token operator">></span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>directory<span class="token operator">></span>        <span class="token operator">&lt;</span>includes<span class="token operator">></span>            <span class="token operator">&lt;</span>include<span class="token operator">></span><span class="token operator">**</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>includes<span class="token operator">></span>        <span class="token operator">&lt;</span>filtering<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>filtering<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resource<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre><h2 id="8、SpringBoot-整合！"><a href="#8、SpringBoot-整合！" class="headerlink" title="8、SpringBoot 整合！"></a>8、SpringBoot 整合！</h2><p>以前 MyBatis 未与 spring 整合时，配置数据源、事务、连接数据库的账号、密码等都是在 myBatis 核心配置文件中进行的myBatis 与 spring 整合后，配置数据源、事务、连接数据库的账号、密码等就交由 spring 管理。因此，在这里我们即使不使用mybatis配置文件也完全ok！<br>既然已经提供了 myBatis 的映射配置文件，自然要告诉 spring boot 这些文件的位置</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  datasource<span class="token operator">:</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">1207</span>    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>ssmbuild<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span>$characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver#整合mybatismybatis<span class="token operator">:</span>  type<span class="token operator">-</span>aliases<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">:</span> com<span class="token punctuation">.</span>cheng<span class="token punctuation">.</span>pojo  mapper<span class="token operator">-</span>locations<span class="token operator">:</span> classpath<span class="token operator">:</span>mybatis<span class="token operator">/</span>mapper<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xml</code></pre><p>已经说过 spring boot 官方并没有提供 myBaits 的启动器，是 myBatis 官方提供的开发包来适配的 spring boot，从 pom.xml 文件中的依赖包名也能看出来，并非是以 spring-boot 开头的；<br>同理上面全局配置文件中的这两行配置也是以 mybatis 开头 而非 spring 开头也充分说明这些都是 myBatis 官方提供的<br>可以从 org.mybatis.spring.boot.autoconfigure.MybatisProperties 中查看所有配置项</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"mybatis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MYBATIS_PREFIX <span class="token operator">=</span> <span class="token string">"mybatis"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ResourcePatternResolver resourceResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String configLocation<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> mapperLocations<span class="token punctuation">;</span>    <span class="token keyword">private</span> String typeAliasesPackage<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> typeAliasesSuperType<span class="token punctuation">;</span>    <span class="token keyword">private</span> String typeHandlersPackage<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkConfigLocation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ExecutorType executorType<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">LanguageDriver</span><span class="token operator">></span> defaultScriptingLanguageDriver<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties configurationProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NestedConfigurationProperty</span>    <span class="token keyword">private</span> Configuration configuration<span class="token punctuation">;</span></code></pre><p>也可以直接去查看 官方文档</p><h2 id="9、编写controller"><a href="#9、编写controller" class="headerlink" title="9、编写controller"></a>9、编写controller</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择全部用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id选择用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectUserById"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加一个用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"阿毛"</span><span class="token punctuation">,</span><span class="token string">"456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改一个用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"阿毛"</span><span class="token punctuation">,</span><span class="token string">"421319"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id删除用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10、启动项目访问进行测试！"><a href="#10、启动项目访问进行测试！" class="headerlink" title="10、启动项目访问进行测试！"></a>10、启动项目访问进行测试！</h2><p>步骤：</p><ul><li>Mybatis整合包<ul><li>mybatis-spring-boot-starter</li></ul></li><li>1.导入包</li><li>2.配置文件</li><li>3.mybatis配置</li><li>4.编写sql</li><li>5.service层调用dao层</li><li>6.controller调用service层<br><strong>注：配置数据库连接信息（不变)</strong></li></ul><pre class=" language-js"><code class="language-js">spring<span class="token punctuation">:</span>  datasource<span class="token punctuation">:</span>    username<span class="token punctuation">:</span> root    password<span class="token punctuation">:</span> <span class="token number">1207</span>    #<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC解决时区的报错    url<span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3306</span><span class="token operator">/</span>mybatis<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token number">-8</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token punctuation">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver    type<span class="token punctuation">:</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize<span class="token punctuation">:</span> <span class="token number">5</span>    minIdle<span class="token punctuation">:</span> <span class="token number">5</span>    maxActive<span class="token punctuation">:</span> <span class="token number">20</span>    maxWait<span class="token punctuation">:</span> <span class="token number">60000</span>    timeBetweenEvictionRunsMillis<span class="token punctuation">:</span> <span class="token number">60000</span>    minEvictableIdleTimeMillis<span class="token punctuation">:</span> <span class="token number">300000</span>    validationQuery<span class="token punctuation">:</span> SELECT <span class="token number">1</span> FROM DUAL    testWhileIdle<span class="token punctuation">:</span> <span class="token boolean">true</span>    testOnBorrow<span class="token punctuation">:</span> <span class="token boolean">false</span>    testOnReturn<span class="token punctuation">:</span> <span class="token boolean">false</span>    poolPreparedStatements<span class="token punctuation">:</span> <span class="token boolean">true</span>    #配置监控统计拦截的filters，stat<span class="token punctuation">:</span>监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token punctuation">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Priority    #则导入 log4j 依赖即可，Maven 地址： https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>log4j<span class="token operator">/</span>log4j    filters<span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    maxPoolPreparedStatementPerConnectionSize<span class="token punctuation">:</span> <span class="token number">20</span>    useGlobalDataSourceStat<span class="token punctuation">:</span> <span class="token boolean">true</span>    connectionProperties<span class="token punctuation">:</span> druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>mergeSql<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>slowSqlMillis<span class="token operator">=</span><span class="token number">500</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> DRUD 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2019/02/28/javascript/"/>
      <url>/2019/02/28/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="javaScrip"><a href="#javaScrip" class="headerlink" title="javaScrip"></a>javaScrip</h1><span id="more"></span><p><strong>javaScript是一门世界上最流行的脚本语言</strong></p><h2 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h2><p><strong>1、内部标签</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><script>     //....<script></code></pre><p><strong>2、外部引入</strong></p><p>==hj.js==</p><pre class=" language-javaScript"><code class="language-javaScript">alert("hello,world");</code></pre><p>==test.html==</p><pre class=" language-JavaScript"><code class="language-JavaScript"><!--外部引入        注意：script必须成对出现    -->    <script src="js/hj.js"></script>    <!--不用显示定义type，也默认就是javaScript-->    <script type="text/javascript"></script></code></pre><p><strong>3、测试代码</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>script标签内，写Javascript代码<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>外部引入        注意：script必须成对出现    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/hj.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不用显示定义type，也默认就是javaScript<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里也可以存放<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p><strong>4、基本语法</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>JavaScript严格区分大小写<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// 1. 定义变量   变量类型 变量名 = 变量值</span>        <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//alert(num)</span>        <span class="token comment" spellcheck="true">// 2. 条件控制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"60~70"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"70~80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h2><p>数值，文本，图形，音频，视频</p><p><strong>变量</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a</code></pre><p><strong>number</strong><br>    - JS不区分小数和整数</p><hr><pre class=" language-javascript"><code class="language-javascript"><span class="token number">123</span><span class="token comment" spellcheck="true">//整数123</span><span class="token number">123.1</span><span class="token comment" spellcheck="true">//浮点数123.1</span><span class="token number">1.123e3</span><span class="token comment" spellcheck="true">//科学计数法</span><span class="token operator">-</span><span class="token number">99</span><span class="token comment" spellcheck="true">//负数</span><span class="token number">NaN</span><span class="token comment" spellcheck="true">//not a number</span><span class="token number">Infinity</span> <span class="token comment" spellcheck="true">// 表示无限大</span></code></pre><p><strong>字符串</strong></p><pre class=" language-java"><code class="language-java"><span class="token string">'abc'</span>  <span class="token string">"abc"</span></code></pre><p><strong>布尔值</strong></p><pre class=" language-java"><code class="language-java"><span class="token boolean">true</span>  <span class="token boolean">false</span></code></pre><p><strong>逻辑运算</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&amp;&amp;</span> 两个都为真，结果为真<span class="token operator">||</span> 一个为真，结果为真<span class="token operator">!</span> 真即假，假即真</code></pre><p><strong>比较运算符</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">=</span><span class="token number">1</span>，<span class="token string">"1"</span><span class="token operator">==</span> 等于（类型不一样，值一样，也会判断为<span class="token boolean">true</span>）<span class="token operator">==</span><span class="token operator">=</span> 绝对等于（类型一样，值一样，结果为<span class="token boolean">true</span>）</code></pre><pre><code>- 这是一个JS的缺陷，坚持不要使用 == 比较- 须知：    - NaN === NaN，这个与所有的数值都不相等，包括自己    - 只能通过isNaN（NaN）来判断这个数是否是NaN</code></pre><p><strong>浮点问题</strong></p><pre class=" language-java"><code class="language-java">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>- 尽量避免使用浮点数进行运算，存在精度问题。</code></pre><pre class=" language-java"><code class="language-java">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.00000001</span></code></pre><p><strong>null 和 undefined</strong><br>    - null  为空<br>    - undefined   未定义</p><p><strong>数组</strong><br>    - java的数组必须是相同类型的对象，js不需要。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//保证代码的可读性，尽量使用[]</span>var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种定义方法</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>- 取数组下标，如果越界了就会报undefined</code></pre><p><strong>对象</strong><br>    - 对象是大括号，数组是中括号。<br>    - 每个属性之间用逗号隔开，最后一个不需要。</p><pre class=" language-javaScript"><code class="language-javaScript">var person = {    name : "张三",    age : 25,    tags : [a,b,c,d]</code></pre><ul><li>取对象值</li></ul><pre class=" language-javaScript"><code class="language-javaScript">person.name> "张三"person.age> 25</code></pre><p><strong>严格检查模式</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--    前提：IDEA需要设置支持ES6语法        'use strict';严格检查模式，预防JavaScript的随意性导致产生的一些问题        必须写在JavaScript的第一行！        局部变量建议都使用let去定义~    -->    <script>        'use strict';        //全局变量         let i=1        //ES6 let    </script></head><body></body></html></code></pre><h2 id="3、数据类型-详"><a href="#3、数据类型-详" class="headerlink" title="3、数据类型 详"></a>3、数据类型 详</h2><h3 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h3><p><strong>1、正常字符串我们使用 单引号，或者双引号包裹</strong></p><p><strong>2、注意转义\字符</strong></p><pre class=" language-java"><code class="language-java">\'\n\t\u4e2d    \u##### Unicode字符\x41Ascall字符</code></pre><p><strong>3、多行字符串编写</strong></p><pre class=" language-javaScript"><code class="language-javaScript">//tab 上面 esc下面        var msg =            `hello            world            你好呀            nihao            `</code></pre><p><strong>4、模板字符串</strong></p><pre class=" language-javaScript"><code class="language-javaScript">//tab 上面 esc下面let name = 'Tom';let age = 3;var msg = `你好，${name}`</code></pre><p><strong>5、获取字符串长度</strong></p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span>length</code></pre><p><strong>6、字符串的可变性，不可变</strong></p><p><strong>7、大小写转换</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注意，这里是方法，不是属性了</span>student<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>8、索引</strong></p><pre class=" language-java"><code class="language-java">student<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">'t'</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取t在字符串中的索引位置。</span></code></pre><p><strong>9、截取字符串</strong></p><pre class=" language-java"><code class="language-java">student<span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第一个字符串截取到最后一个字符串</span>student<span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1-3)  包括第一个不包括第三个</span></code></pre><h3 id="3-2、数组"><a href="#3-2、数组" class="headerlink" title="3.2、数组"></a>3.2、数组</h3><pre><code>- Array数组可以包含任意的数据类型。</code></pre><pre class=" language-javaScript"><code class="language-javaScript">var arr = [1,2,3,4,5,"hello",'b',true]//通过下标获取和赋值</code></pre><p><strong>1、长度</strong></p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">.</span>length</code></pre><ul><li>注意：假如给arr.length赋值，数组的大小就会发生变化，如果赋值过小，元素就会丢失。</li></ul><p><strong>2、通过元素获取下标索引</strong></p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>字符串”1”，和数字1是不同的。</li></ul><p><strong>3、截取数组 slice()</strong><br>    - slice（） 截取Array数组的一部分，返回一个新的数组，类似String的subString()</p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">.</span>slice（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span>）<span class="token punctuation">;</span></code></pre><p><strong>4、添加元素，删除元素 (尾部)</strong><br>    - push: 压入到尾部<br>    - pop: 弹出尾部一个元素</p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>5、添加元素，删除元素 （头部）</strong><br>    - unshift : 压入到头部<br>    - shift : 弹出头部的一个元素</p><pre class=" language-javaScript"><code class="language-javaScript">arr.unshift("a");arr.shift();</code></pre><p><strong>6、数组排序</strong></p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>7、元素反转</strong><br>    - 就是将数组中元素从后到前换个顺序</p><pre class=" language-javaScript"><code class="language-javaScript">arr.reverse();</code></pre><p><strong>8、元素拼接</strong></p><pre class=" language-javaScript"><code class="language-javaScript">arr.concat(1,2,3)</code></pre><pre><code>- 注意：concat()并没有修改数组，只是会返回一个新的数组。</code></pre><p><strong>9、连接符 join</strong><br>    - 打印拼接数组，使用特定的字符串连接。</p><pre class=" language-javaScript"><code class="language-javaScript">arr.join('-');"c-b-a"</code></pre><p><strong>10、多维数组</strong></p><pre class=" language-javaScript"><code class="language-javaScript">arr = [[1,2],[3,4],[5,6]];arr[1][1];4</code></pre><h3 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h3><pre><code>- 若干个键值对- javaScript中的所有的键都是字符串，值是任意对象。</code></pre><p><strong>1、定义对象</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var 对象名 = {    属性名 ： 属性值，    属性名 ： 属性值，    属性名 ： 属性值}</code></pre><pre class=" language-javaScript"><code class="language-javaScript"><script>        /*对象*/        /*定义了一个person对象，有四个属性*/        var person = {            name : "chengcheng",            age : 22,            email : "2251221817@qq.com",            score : 100        }        alert(person.name);        /*给对象赋值*/        person.age = 23;    </script></code></pre><pre><code>- JS对象，{……}表示一个对象，键值对描述属性xxx，多个属性之间使用逗号隔开，最后一个属性后边不加逗号。</code></pre><p><strong>2、使用一个不存在的对象属性，不会报错 undefined</strong></p><p><strong>3、动态的删减元素问题</strong><br>    - 通过delete删除对象的属性</p><pre class=" language-javaScript"><code class="language-javaScript">delete person.nametrue</code></pre><p><strong>4、动态添加元素</strong><br>    - 直接给新的属性添加即可。</p><pre class=" language-javaScript"><code class="language-javaScript">person.haha = "haha";"haha"</code></pre><p><strong>5、判断属性值是否在这个对象中  xxx in xxx</strong></p><pre class=" language-javaScript"><code class="language-javaScript">"age" in persontrue//继承 父类方法'toString' in persontrue</code></pre><p><strong>6、判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</strong></p><pre class=" language-javaScript"><code class="language-javaScript">person.hasOwnProperty('toString')falseperson.hasOwnProperty('age')true</code></pre><h3 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h3><p><strong>1、if判断</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var age = 3;if (age > 3) {    alert("haha");}else if(age > 5){    alert("gaga")}else{    alert("kuwa");}"kuwa"</code></pre><p><strong>2、while循环</strong><br>    - while循环，避免程序死循环</p><pre class=" language-javaScript"><code class="language-javaScript">while(age < 100){    age = age + 1;    console.log(age);}do{    age = age + 1;    console.log(age);}while(age<100);</code></pre><p><strong>3、for循环</strong></p><pre class=" language-javaScript"><code class="language-javaScript">for(int i = 0; i < 10; i++){    console.log(i);}</code></pre><p><strong>4、foreach循环</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var age = [25,12,45,36,1];//函数age.forEach(function (Value){    console.log(Value)})</code></pre><p><strong>5、 for…in</strong></p><pre class=" language-javaScript"><code class="language-javaScript">for(var num in age){    console.log(age[num]);}</code></pre><h3 id="3-5、-Map和Set集合"><a href="#3-5、-Map和Set集合" class="headerlink" title="3.5、 Map和Set集合"></a>3.5、 Map和Set集合</h3><pre><code>- ES6的新特性</code></pre><p><strong>1、Map</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var map = new Map([['tom',100],['jack',90],['mary',70]]);var name = mep.get('tom');//通过key获取valueconsole.log(name);map.set('tom',145); //修改值map.delete('tom');  //删除一个元素</code></pre><p><strong>2、Set</strong><br>    - 无序不可重复</p><pre class=" language-javaScript"><code class="language-javaScript">var set = new Set([3,1,1,1]);set.add(2);//添加set.delete(1);//删除set.has(3);//是否包含某个元素</code></pre><h3 id="3-6、迭代器-iterator"><a href="#3-6、迭代器-iterator" class="headerlink" title="3.6、迭代器 iterator"></a>3.6、迭代器 iterator</h3><p><strong>1、遍历数组</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var arr = [3,4,5]//for...of  遍历所有的元素//for...in  下标for(var x of arr){    console.log(x);}</code></pre><p><strong>2、遍历map</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var map = new Map([['tom',100],['tim',90],['jack',60]]);for(let x of map){    console.log(x);}</code></pre><p><strong>3、遍历set</strong></p><pre class=" language-javaScript"><code class="language-javaScript">var set = new Set([5,6,7]);for(let x of set){    console.log(x);}</code></pre><h2 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h2><h3 id="4-1、定义函数"><a href="#4-1、定义函数" class="headerlink" title="4.1、定义函数"></a>4.1、定义函数</h3><p><strong>1、定义方式一：绝对值函数</strong></p><pre class=" language-javaScript"><code class="language-javaScript">function abs(x){    if(x >= 0){        return x;    }else{        return -x;    }}</code></pre><pre><code>- 一旦执行到return代表函数结束，返回结果。- 如果没有执行return，函数执行完也会返回结果，结果就是undefined</code></pre><p><strong>2、定义方式二：</strong><br>    - 这是一个匿名函数，但是可以将结果赋值给abs，通过abs就可以调用函数。<br>    - 方式一和方式二等价</p><pre class=" language-javaScript"><code class="language-javaScript">var abs = function(x){}</code></pre><p><strong>3、调用函数</strong></p><pre class=" language-javaScript"><code class="language-javaScript">abs(10);</code></pre><pre><code>- 参数问题：javaScript可以传任意个参数，也可以不传递参数。</code></pre><ul><li>假设不存在参数，如何规避？</li></ul><pre class=" language-javaScript"><code class="language-javaScript">var abs = function(x){    //手动抛出异常    if(typeof x !== 'number'){        throw 'Not a Number';    }    if(x>=0){        return x;    }else{        return -x;    }}</code></pre><p><strong>4、arguments 代表数组</strong><br>    - arguments 是一个JS免费赠送的关键字。<br>    - arguments 代表：传递进来的所有参数，是一个数组。</p><pre class=" language-javaScript"><code class="language-javaScript">var abs = function(x){    console.log("x=>" +x);    for{var i = 0; i <arguments.length; i++}{        console.log(arguments[i]);    }}</code></pre><p><strong>5、 rest 获取已经定义了的参数之外的全部参数</strong><br>    - rest只能写在最后便，必须用…标识。</p><pre class=" language-javaScript"><code class="language-javaScript">var abs = function(a,b,c,...rest){    console.log(a)    console.log(b)    console.log(c)    console.log(rest)}</code></pre><h3 id="4-2、变量的作用域"><a href="#4-2、变量的作用域" class="headerlink" title="4.2、变量的作用域"></a>4.2、变量的作用域</h3><p>在JS中，var定义变量实际是有作用域的。<br><strong>在函数体中声明的变量，在函数体外不可以使用</strong><br>    - 出了大括号就不认识了。</p><pre class=" language-javaScript"><code class="language-javaScript">function c(){    var x = 1;    x = x + 1;}x = x + 2;//错误</code></pre><p><strong>如果两个函数使用了相同的变量名，只要在函数内部就不冲突</strong></p><pre class=" language-javaScript"><code class="language-javaScript">function c(){    var x = 1;    x = x + 1;}function c2(){    var x = 'A';    x = x + 1;//正确，两个函数变量名可以重复}</code></pre><p><strong>内部函数函数可以访问外部函数的成员，外部函数不能访问内部函数的成员</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确，内部函数可以访问外部函数成员</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> z <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，外部函数不能访问内部函数成员</span><span class="token punctuation">}</span></code></pre><p><strong>内部函数变量和外部函数变量重名</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后输出</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'outer'</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先输出</span>    <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>- 假设javaScript中函数查找变量是从自身函数开始，由‘内’向‘外’查找。- 假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</code></pre><p><strong>提升变量的作用域</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">'x'</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>- 结果：xundefined- 说明：js执行引擎，自动提升了y的声明，但是不会提升y变量的赋值。- 养成规范：所有的变量的定义都放在函数的头部，不要乱放，便于代码维护。</code></pre><pre class=" language-javaScript"><code class="language-javaScript">function c(){    //这样定义变量    var x = 1,    y = x + 1,    z,    i,    a;    //之后随意用。}</code></pre><p><strong>全局变量</strong></p><pre class=" language-javaScript"><code class="language-javaScript">//全局变量var x = 1;function c(){    console.log(x)}c();console.log(x);</code></pre><p><strong>全局对象 window</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认所有的全局变量，都会绑定在window对象下</span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>- alert这个函数本身也是一个window变量。- javaScript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找。如果在全局作用域都没有找到，就会报错：RefrenceError。</code></pre><p><strong>规范 自己定义全局变量</strong><br>    - 由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，如何减少冲突？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//唯一全局变量</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义全局变量</span>k<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'cheng'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数</span>k<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>- 自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题。</code></pre><p><strong>局部作用域 let</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//101 问题，i出了这个作用域还可以使用</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>ES6 let关键字，解决局部作用域冲突问题<ul><li>建议都是用let去定义局部作用域的变量。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>常量 const</strong></p><ul><li>在ES6 之前，怎么定义常量：只要用全部大写字母命名的变量就是常量，建议不要修改这样的值。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> PI <span class="token operator">=</span> <span class="token string">'3.14'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token string">'255'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以改变常量值，不严谨</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>在ES6 引入常量关键字const。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token string">'3.14'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token string">'255'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TypeError 已经是常量，值不能改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-3、方法的定义和调用"><a href="#4-3、方法的定义和调用" class="headerlink" title="4.3、方法的定义和调用"></a>4.3、方法的定义和调用</h3><p><strong>定义方法</strong><br>    - 方法就是把函数放在对象的里面，对象只有两个东西：属性和方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cheng <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'chnegcheng'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1998</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//属性</span>cheng<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true">//方法,方法一定要带（）</span>cheng<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>上边代码可以拆开写：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> cheng <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'chengcheng'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1998</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> getAgecheng<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//ok</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN   window</span></code></pre><pre><code>- this是无法指向的，默认执行调用它的那个对象。</code></pre><p><strong>apply 控制this指向</strong></p><ul><li>在js中可以控制this的指向。</li><li>所有的函数function都有apply方法。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> cheng <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'chengcheng'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1998</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> getAge<span class="token punctuation">}</span>getAge<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cheng<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//this指向了cheng,参数为空</span></code></pre><h2 id="5、内部对象"><a href="#5、内部对象" class="headerlink" title="5、内部对象"></a>5、内部对象</h2><h3 id="5-1、标准对象"><a href="#5-1、标准对象" class="headerlink" title="5.1、标准对象"></a>5.1、标准对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token string">"number"</span><span class="token keyword">typeof</span> <span class="token string">'123'</span><span class="token string">"String"</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token string">"Boolean"</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token string">"number"</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token string">"Object"</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token string">"Object"</span><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>abs<span class="token string">"function"</span><span class="token keyword">typeof</span> undefined<span class="token string">"undefined"</span></code></pre><h3 id="5-2、Date"><a href="#5-2、Date" class="headerlink" title="5.2、Date"></a>5.2、Date</h3><p><strong>基本使用</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前日期</span>now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月</span>now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日</span>now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//星期几</span>now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时</span>now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分</span>now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//秒</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间戳 全世界统一，1970 1.1 00：00：00  毫秒数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间戳转换为时间</span></code></pre><p><strong>转换</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6、JSON"><a href="#6、JSON" class="headerlink" title="6、JSON"></a>6、JSON</h2><pre><code>- JSON （jAVAScript Object Notation），是一种轻量级的数据交换格式。- 简洁和清晰的层次结构使得JSON成为理想的数据交换语言。- 易于阅读和编写，同时也易于极其解析和生成，并有效的提升网络传输效率。- 在javaScript中一切皆为对象，任何js支持的类型都可以用JSON来表示：number,String ...- 格式：    - 对象都用： {}    - 数组都用：    []    - 所有的键值对都是用key : value</code></pre><p><strong>JSON字符串和JS对象的转换</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'cheng'</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    sex <span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对象转换为JSON字符串</span><span class="token comment" spellcheck="true">//{"name":"cheng","age":22,"sex":"男"}</span><span class="token keyword">var</span> jsonUser <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JSON字符串转换成对象，参数为JSON字符串</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{"name":"cheng","age":3,"sex":"男"}'</span><span class="token punctuation">)</span>；</code></pre><p><strong>JS和JSON区别</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'cheng'</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a":"cheng","b":"hello"}'</span></code></pre><h2 id="7、面向对象编程"><a href="#7、面向对象编程" class="headerlink" title="7、面向对象编程"></a>7、面向对象编程</h2><p><strong>1、原型</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'cheng'</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    run <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"run...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//小明的原型是student</span>xiaoming<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> student<span class="token punctuation">;</span></code></pre><p><strong>2、class继承</strong></p><ul><li>class关键字，是ES6引入的</li><li>定义一个类，属性，方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiaohua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'xiaohua'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xiaohua<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>3、继承</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">xiaoStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一名小学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xiaoStudent</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>本质：查看对象原型。</li></ul><p><strong>4、原型链</strong><br>点不完。</p><h2 id="8、操作BOM对象"><a href="#8、操作BOM对象" class="headerlink" title="8、操作BOM对象"></a>8、操作BOM对象</h2><p>BOM:浏览器对象模型</p><p><strong>1、window 浏览器窗口</strong></p><ul><li>window代表浏览器窗口</li></ul><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>undefinedwindow<span class="token punctuation">.</span>innerHeight<span class="token comment" spellcheck="true">//获取浏览器内部高度</span>window<span class="token punctuation">.</span>innerWidth<span class="token comment" spellcheck="true">//获取内部浏览器宽度</span>window<span class="token punctuation">.</span>outerHeight<span class="token comment" spellcheck="true">//获得浏览器外部高度</span>window<span class="token punctuation">.</span>outerWidth<span class="token comment" spellcheck="true">//获得浏览器的外部宽度</span></code></pre><p><strong>2、navigator 浏览器信息</strong><br>navigator,封装了浏览器的信息<br>大多数时候，我们不会使用navigator对象，因为会被人为修改。</p><pre class=" language-javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>appName<span class="token comment" spellcheck="true">//当前应用名</span>navigator<span class="token punctuation">.</span>appVersion<span class="token comment" spellcheck="true">//当前浏览器的版本号</span>navigator<span class="token punctuation">.</span>userAgentnavigator<span class="token punctuation">.</span>platform<span class="token comment" spellcheck="true">//获得系统版本</span></code></pre><p><strong>3、screen 屏幕</strong></p><pre class=" language-javaScript"><code class="language-javaScript">screen.width     //屏幕的宽度1920 px        screen.height     //屏幕高度1080 px</code></pre><p><strong>4、location 当前页面URL信息</strong><br>location代表当前页面的URL信息</p><pre class=" language-javascript"><code class="language-javascript">location<span class="token punctuation">.</span>host    <span class="token comment" spellcheck="true">//主机</span>loxation<span class="token punctuation">.</span>href     <span class="token comment" spellcheck="true">//当前指定的位置</span>location<span class="token punctuation">.</span>protocol   <span class="token comment" spellcheck="true">//协议</span>location<span class="token punctuation">.</span>reload     <span class="token comment" spellcheck="true">//重新加载，刷新网页</span><span class="token comment" spellcheck="true">//设置新的地址</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">'https://javacookieboy.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>5、document 代表当前页面</strong><br>document代表当前页面。</p><pre class=" language-javaScript"><code class="language-javaScript">document.title    //获取当前页面的标题document.title = 'cookie';//修改当前页面的标题为cookiedocument.getElementById('')//获取具体的文档树节点document.cookie//获得cookie</code></pre><p><strong>6、history 浏览器的历史记录</strong></p><pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//后退</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//前进</span></code></pre><h2 id="9、操作DOM对象"><a href="#9、操作DOM对象" class="headerlink" title="9、操作DOM对象"></a>9、操作DOM对象</h2><p>DOM：文档对象模型。<br>浏览器网页就是一个DOM树形结构。</p><p><strong>1、获取DOM节点</strong><br>要操作一个Dom节点，就不许先获得这个dom节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//对应css选择器</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、更新节点</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'id1'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> id1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作文本</span>    id1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'456'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改文本的值</span>    id1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;strong>123&lt;/strong>'</span><span class="token comment" spellcheck="true">//可以解析HTML文本标签</span>    <span class="token comment" spellcheck="true">//操作JS</span>    id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>    id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontsize <span class="token operator">=</span> <span class="token string">'20px'</span>    id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">'2em'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>3、删除节点</strong><br>删除节点的步骤：<br>    先获取父节点，在通过父节点删除自己。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'father'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>标题<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'p1'</span><span class="token operator">></span>p1<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'p2'</span><span class="token operator">></span>p2<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> self <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> father <span class="token operator">=</span> p1<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除是一个动态的过程</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> </code></pre><ul><li>注意：删除多个节点的时候，children是时刻变化的，删除节点的时候一定要注意。</li></ul><p><strong>4、插入节点</strong><br>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是这个Dom节点已经存在元素了，我们就不能这么干了！会产生覆盖。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'js'</span><span class="token operator">></span>javaScript<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'list'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'se'</span><span class="token operator">></span>javaSE<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'ee'</span><span class="token operator">></span>javaEE<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'me'</span><span class="token operator">></span>javaME<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//追加到后面</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>5、创建一个新标签</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经存在的节点</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过JS创建一个新的节点</span>    <span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElementById</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个p标签</span>    newP<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'newP'</span><span class="token punctuation">;</span>    newP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hello,Kuangshen'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个标签节点</span>    <span class="token keyword">var</span> myScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElementById</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'text/javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以创建一个style标签</span>    <span class="token keyword">var</span> myStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElementById</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个空style标签</span>    myStyle<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'text/css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myStyle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'body{background-color:chartreuse;}'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置标签内容</span>        document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>myStyle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>insertBefore</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ee <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要包含的节点.insertBefore(newNode,targetNode)</span>list<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>js<span class="token punctuation">,</span>ee<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="10、操作表单"><a href="#10、操作表单" class="headerlink" title="10、操作表单"></a>10、操作表单</h2><p>文本框—-text<br>下拉框—-select<br>单选框—-radio<br>多选框—-checkbox<br>隐藏域—-hidden<br>密码框—-password<br>…</p><p><strong>1、获取要提交的信息</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"post"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id <span class="token operator">=</span> <span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>多选框的值就是定义好的value<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>性别：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"radio"</span> name <span class="token operator">=</span> <span class="token string">"sex"</span> value <span class="token operator">=</span> <span class="token string">"man"</span> id <span class="token operator">=</span> <span class="token string">"boy"</span><span class="token operator">/</span><span class="token operator">></span>男               <span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"radio"</span> name <span class="token operator">=</span> <span class="token string">"sex"</span> value <span class="token operator">=</span> <span class="token string">"woman"</span> id <span class="token operator">=</span> <span class="token string">"girl"</span><span class="token operator">/</span><span class="token operator">></span>女        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> input_text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> boy_radio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> girl_radio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"girl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到输入框的值</span>        input_text<span class="token punctuation">.</span>value         <span class="token comment" spellcheck="true">//修改输入框的值</span>        input_text<span class="token punctuation">.</span>value  <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//对于单选框，多选框等等固定的值，boy_radio.value只能取到当前的值</span>        boy_radio<span class="token punctuation">.</span>checked<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看返回的结果，是否为true，如果为true，则被选中。</span>        girl_radio<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p><strong>2、提交表单</strong><br>提交表单。md5加密密码，表单优化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang <span class="token operator">=</span> <span class="token string">"en"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>MD5加密工具类<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src <span class="token operator">=</span> <span class="token string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表达绑定提交事件            οnsubmit<span class="token operator">=</span> 绑定一个提交检测的函数，<span class="token boolean">true</span>，<span class="token boolean">false</span>            将这个结果返回给表单，使用onsubmit接收        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span> method <span class="token operator">=</span> <span class="token string">"post"</span> onsubmit <span class="token operator">=</span> <span class="token string">"return aaa()"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id <span class="token operator">=</span> <span class="token string">"username"</span> name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span>密码：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> id <span class="token operator">=</span> <span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"hidden"</span> id <span class="token operator">=</span> <span class="token string">"md5-password"</span> name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token operator">></span>                         <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>绑定事件 onclick 被点击<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button type <span class="token operator">=</span> <span class="token string">"submit"</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                <span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> md5pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"md5-password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//pwd.value = md5(pwd,value);</span>                md5pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">mad5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//可以校验判断表单内容，true就是通过提交，false就是阻止提交</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h1 id="11、jQuery"><a href="#11、jQuery" class="headerlink" title="11、jQuery"></a>11、jQuery</h1><ul><li>jQuery库，里面存在大量的JavaScript函数.</li></ul><h2 id="11-1、快速入门"><a href="#11-1、快速入门" class="headerlink" title="11.1、快速入门"></a>11.1、快速入门</h2><ul><li>公式：$(selector).action()</li><li>jQuery(选择器).事件(函数事件)</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang = "en">    <head>        <meta charset = "UTF-8">        <title>Title</title>        //引入jQuery        <script src="lib/jquery-3.4.1.js"></script>    </head>    <body>        <a href="" id = "test-jquery">点我</a>        <script>            //选择器就是css选择器            $('#test-jquery').click(function(){                alert('hello,jQuery!');            });        </script>    </body></html></code></pre><h2 id="11-2、选择器"><a href="#11-2、选择器" class="headerlink" title="11.2、选择器"></a>11.2、选择器</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//原生js，选择器少，麻烦不好记</span><span class="token comment" spellcheck="true">//标签选择器</span>document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id选择器</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class选择器</span>document<span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jQuery css中的选择器它全部都能用！</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标签选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#id1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.class1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class选择器</span></code></pre><p>文档工具站：<a href="http://jquery.cuishifeng.cn/">http://jquery.cuishifeng.cn/</a></p><h2 id="11-3、事件"><a href="#11-3、事件" class="headerlink" title="11.3、事件"></a>11.3、事件</h2><p><strong>鼠标事件、键盘事件，其他事件</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">mousedown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>鼠标按下<span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//鼠标离开</span><span class="token function">mousemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>鼠标移动<span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//点击结束</span><span class="token function">mouseup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang <span class="token operator">=</span> <span class="token string">"en"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"lib/jquery-3.4.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span>style<span class="token operator">></span>            #divMove<span class="token punctuation">{</span>                width<span class="token punctuation">:</span>500px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span>500px<span class="token punctuation">;</span>                border<span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要求：获取鼠标当前的一个坐标<span class="token operator">--</span><span class="token operator">></span>        mouse：<span class="token operator">&lt;</span>span id <span class="token operator">=</span> <span class="token string">"mouseMove"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>div id <span class="token operator">=</span> <span class="token string">"divMove"</span><span class="token operator">></span>            在这里移动鼠标试试        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token comment" spellcheck="true">//当网页元素加载完毕之后，响应事件</span>            <span class="token comment" spellcheck="true">//$(document).ready(function(){})</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#divMove'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousemove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#mouseMove'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token operator">+</span>e<span class="token punctuation">.</span>pageX<span class="token operator">+</span><span class="token string">"y:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="11-4、操作DOM"><a href="#11-4、操作DOM" class="headerlink" title="11.4、操作DOM"></a>11.4、操作DOM</h2><p><strong>节点文本操作</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">'test-ul'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"js"</span><span class="token operator">></span>JavaScript<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li name<span class="token operator">=</span><span class="token string">'python'</span><span class="token operator">></span>python<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'设置值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;strong>123&lt;/strong>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置值</span></code></pre><p><strong>CSS的操作</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>元素的显示和隐藏，：本质display:none</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//隐藏</span></code></pre><p><strong>娱乐测试</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//窗口宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//窗口高度</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切换</span></code></pre><p><strong>未来Ajax</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token punctuation">:</span><span class="token string">"test.html"</span><span class="token punctuation">,</span>context<span class="token punctuation">:</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2019/01/28/css/"/>
      <url>/2019/01/28/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><span id="more"></span><pre class=" language-java"><code class="language-java">HTML <span class="token operator">+</span> CSS <span class="token operator">+</span> JavaScript结构  <span class="token operator">+</span>  表现  <span class="token operator">+</span>  动作</code></pre><ul><li>Cascading Style Sheet 层叠级联样式表</li><li>CSS：表现（美化网页）</li><li>字体、颜色、边距、高度、宽度、背景图片、页面定位、网页浮动…<!--more--></li></ul><h2 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h2><p><strong>1、第一个css程序</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--规范 <style> 可以编写css的代码 ,每一个声明，最好使用分号结尾    语法：        选择器 {            声明1;            声明2;            声明3;        }    -->    <!--方式一-->    <style>        /*h1{            color: red;        }*/    </style>    <!--方式二，建议使用这个规范-->    <!--在idea中新建一个style.css，这个html中就不用写style了-->    <link rel="stylesheet" href="css/style.css"></head><body><h1>我是标题</h1></body></html></code></pre><p><strong>CSS优势</strong><br>    - 1、内容和表现分离。<br>    - 2、网页结构表现统一，可以实现复用。<br>    - 3、样式十分丰富。<br>    - 4、建议独立于html的css文件。<br>    - 5、利用SEO，容易被搜索引擎收录。</p><p><strong>2、css三种导入方式</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--内部样式-->    <style>        h1{            color: green;        }    </style>    <!--外部样式-->    <link rel="stylesheet" href="css/style.css"></head><body><!--优先级：就近原则（谁离h1标签近谁的优先级高）--><!--行内样式：在标签元素中，编写一个style属性，编写样式即可--><h1 style="color: red;">我是标题</h1></body></html></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*外部样式*/</span>h1<span class="token punctuation">{</span>    color<span class="token operator">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>拓展：外部样式两种写法</strong><br>    <strong>- 链接式（一般推荐用法）：</strong><br>html</p><pre class=" language-javaScript"><code class="language-javaScript"><!--外部样式--><link rel="stylesheet" href="css/style.css"></code></pre><p><strong>导入式：</strong><br>@import是CSS2.1特有的</p><pre class=" language-javaScript"><code class="language-javaScript"><!--导入式--><style>    @import url("css/style.css");</style></code></pre><h2 id="2、选择器"><a href="#2、选择器" class="headerlink" title="2、选择器"></a>2、选择器</h2><p><strong>作用：选择页面上的某一个或者某一类元素</strong><br><strong>优先级：id选择器 &gt; class选择器 &gt; 标签选择器</strong></p><p><strong>1、标签选择器</strong></p><ul><li>标签选择器选择一类标签   标签{ }</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /*标签选择*/        h1{            color: #a13d30;            background: #3cbda6;/*背景色*/            border-radius: 24px;/*圆角*/        }        p{            font-size: 80px;        }    </style></head><body><h1>学Java</h1><h1>学Java</h1><p>听狂神说</p></body></html></code></pre><p><strong>2、类选择器</strong></p><ul><li>class：选择所有class属性一致的标签，跨标签   .类名{ }</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /*类选择器的格式   .class的名称{}        好处：可以多个标签归类，是同一个 class,可以复用        */        .liusx{            color: blue;        }        .kuangshen{            color: #a13d30;        }    </style></head><body><h1 class="liusx">标题1</h1><h1 class="kuangshen">标题1</h1><h1 class="liusx">标题1</h1><p class="kuangshen">p标签</p></body></html></code></pre><p><strong>3、id选择器</strong></p><ul><li>全局唯一   #id名称{ }</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /* id选择器：id必须保证全局唯一           #id名称{}           不遵循就近原则，固定的           id选择器 > class选择器 > 标签选择器        */        #liusx{            color: red;        }        .style1{            color: #3cbda6;        }        h1{            color: blue;        }    </style></head><body><h1 id="liusx" class="style1">标题1</h1><h1 class="style1">标题2</h1><h1 class="style1">标题3</h1><h1>标题4</h1><h1>标题5</h1></body></html></code></pre><p><strong>4、层次选择器</strong><br>    - 4.1、后代选择器：在某个元素的后面 祖爷爷 爷爷 爸爸 你</p><pre class=" language-javaScript"><code class="language-javaScript">/*后代选择器*/body p{    background: red;}</code></pre><pre><code>- 4.2、子选择器：一代，儿子</code></pre><pre class=" language-javaScript"><code class="language-javaScript">/*子选择器*/body>p{    background: #3cbda6;}</code></pre><pre><code>- 4.3、相邻兄弟选择器：同辈中下一i个</code></pre><pre class=" language-javaScript"><code class="language-javaScript">/*相邻兄弟选择器，只有一个，相邻（向下）*/.active + p{    background: #a13d30;}</code></pre><pre><code>- 4.4、通用选择器：同辈中下面所有的</code></pre><pre class=" language-javaScript"><code class="language-javaScript">/*通用兄弟选择器，当前选中元素的向下所有兄弟元素*/.active~p{    background: blueviolet;}</code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /*p{            background: green;        }*/        /*后代选择器*/        /*body p{            background: red;        }*/        /*子选择器*/        /*body>p{            background: #3cbda6;        }*/        /*相邻兄弟选择器，只有一个，相邻（向下）*/        /*.active + p{            background: #a13d30;        }*/        /*通用兄弟选择器，当前选中元素的向下所有兄弟元素*/        .active~p{            background: blueviolet;        }    </style></head><body><p>p0</p><p class="active">p1</p><p>p2</p><p>p3</p><ul>    <li>        <p>p4</p>    </li>    <li>        <p>p5</p>    </li>    <li>        <p>p6</p>    </li></ul><p>p7</p><p>p8</p></body></html></code></pre><p><strong>5、结构伪类选择器</strong><br>伪类：条件</p><pre class=" language-javaScript"><code class="language-javaScript">/*ul的第一个子元素*/ul li:first-child{    background: #a13d30;}/*ul的最后一个子元素*/ul li:last-child{    background: red;}/*选中p1：定位到父元素，选择当前的第一个元素选择当前p元素的父级元素，选中父级元素的第一个子元素为p的按顺序*/p:nth-child(2){    background: blue;}/*选中父元素，下的p元素的第二个，按类型*/p:nth-of-type(1){    background: yellow;}</code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--避免使用，class，id选择器-->    <style>        /*ul的第一个子元素*/        ul li:first-child{            background: #a13d30;        }        /*ul的最后一个子元素*/        ul li:last-child{            background: red;        }        /*选中p1：定位到父元素，选择当前的第一个元素        选择当前p元素的父级元素，选中父级元素的第一个子元素为p的        按顺序        */        p:nth-child(2){            background: blue;        }        /*选中父元素下的p元素的第二个，按类型*/        p:nth-of-type(1){            background: yellow;        }        /*鼠标点到变色*/        a:hover{            background: black;        }    </style></head><body>    <!--<h1>h1</h1>-->    <p>p1</p>    <p>p2</p>    <p>p3</p>    <ul>        <li>li1</li>        <li>li2</li>        <li>li3</li>    </ul>    <a href="">链接标签</a></body></html></code></pre><p><strong>6、属性选择器（常用）</strong></p><p><strong>标签名 [属性名=属性值]{ }</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        .demo a{            float: left;            display: block;            height: 50px;            width: 50px;            border-radius: 10px;            background: blue;            text-align: center;            color: gainsboro;            text-decoration: none;            margin-right: 5px;            font: bold 20px/50px Arial;        }        /*属性名，属性名 = 属性值（正则）        = 绝对等于        *= 包含这个元素        ^= 以这个开头        $= 以这个结尾        */        /*存在id属性的元素：a[]{}*/        /*a[id]{!*所有带id的a标签*!            background: yellow;        }*/        /*id=first的元素*/        /*a[id=first]{            background: blue;        }*/        /*class中有links的元素*/        /*a[class*=links]{            background: yellow;        }*/        /*选中href中以http开头的元素*/        /*a[href^=http]{            background: yellow;        }*/        /*选中href中以pdf结尾的*/        a[href$=pdf]{            background: yellow;        }    </style></head><body><p class="demo">    <a href="http://baidu.com" class="links item first" id="first">1</a>    <a href="" class="links item active" target="_blank" title="test">2</a>    <a href="images/123.html" class="links item">3</a>    <a href="images/123.png" class="links item">4</a>    <a href="images/123.jpg" class="links item">5</a>    <a href="abc" class="links item">6</a>    <a href="/a.pdf" class="links item">7</a>    <a href="/abc.pdf" class="links item">8</a>    <a href="abc.doc" class="links item">9</a>    <a href="abcd.doc" class="links item last">10</a></p></body></html></code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">=</span> 绝对等于<span class="token operator">*=</span> 包含这个元素<span class="token operator">^=</span> 以这个开头$<span class="token operator">=</span> 以这个结尾</code></pre><h2 id="3、美化网页元素"><a href="#3、美化网页元素" class="headerlink" title="3、美化网页元素"></a>3、美化网页元素</h2><h3 id="3-1、美化网页"><a href="#3-1、美化网页" class="headerlink" title="3.1、美化网页"></a>3.1、美化网页</h3><ul><li>1、有效的传递页面信息</li><li>2、美化网页，页面漂亮，才能吸引用户。</li><li>3、凸显页面的主题</li><li>4、提高用户体验<br><strong>span标签：重点要突出的字，使用span套起来</strong></li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        #title1{            font-size: 50px;        }    </style></head><body>欢迎学习<span id="title1">Java</span></body></html></code></pre><h3 id="3-2、字体样式"><a href="#3-2、字体样式" class="headerlink" title="3.2、字体样式"></a>3.2、字体样式</h3><p><strong>font-family：所有字体</strong><br><strong>font-size：字体大小</strong><br><strong>font-weight：字体的粗细</strong><br><strong>color：字体颜色</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--    font-family：字体    font-size：字体大小    font-weight：字体的粗细    color：字体颜色    -->    <style>        body{            font-family:"Arial Black" ,楷体;            color: #a13d30;        }        h1{            font-size: 50px;        }        .p1{            font-weight: lighter;        }    </style></head><body><h1>故事介绍</h1><p class="p1">    物、情节、环境是小说的三要素。情节一般包括开端、发展、高潮、结局四部分，有的包括序幕、尾声。环境包括自然环境和社会环境。    小说按照篇幅及容量可分为长篇、中篇、短篇和微型小说（小小说）。    按照表现的内容可分为神话、仙侠、武侠、科幻、悬疑、古传、当代、浪漫青春、游戏竞技等。</p><p>    按照体制可分为章回体小说、日记体小说、书信体小说、自传体小说。按照语言形式可分为文言小说和白话小说。</p><p>    Hooray! It's snowing! It's time to make a snowman.James runs out.    He makes a big pile of snow. He puts a big snowball on top.    He adds a scarf and a hat. He adds an orange for the nose.    He adds coal for the eyes and buttons.In the evening,    James opens the door. What does he see? The snowman is moving!    James invites him in. The snowman has never been inside a house.    He says hello to the cat. He plays with paper towels.A moment later,    the snowman takes James's hand and goes out.They go up, up, up into the air! They are flying!    What a wonderful night!The next morning,    James jumps out of bed. He runs to the door.He wants to thank the snowman. But he's gone.</p></body></html></code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--字体风格-->    <style>        p{            font: oblique bolder 12px "楷体";        }    </style></head><body><p>    按照体制可分为章回体小说、日记体小说、书信体小说、自传体小说。按照语言形式可分为文言小说和白话小说。</p></body></html></code></pre><h3 id="3-3、文本样式"><a href="#3-3、文本样式" class="headerlink" title="3.3、文本样式"></a>3.3、文本样式</h3><p><strong>1、颜色：color，rgb，rgba</strong><br><strong>2、文本对齐方式：text-align:  center;</strong><br><strong>3、首行缩进：text-indext: 2em;</strong><br><strong>4、行高：line-height: 100px;单行文字上下居中！line-height = height</strong><br><strong>5、下划线：text-decoration: ;</strong><br><strong>6、文本图片水平对齐：vertical-align: middle;</strong></p><pre class=" language-javaScript"><code class="language-javaScript">text-decoration:underline/*下划线*/text-decoration:line-through/*中划线*/text-decoration:overline/*上划线*/text-decoration:none/*超链接去下划线*/img,span{vetical-align:middle}/*图片、文字水平对齐*/</code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--    颜色：        单词：#FFFFFF        RGB：0~F ,rgb(0,255,255)        RGBA：A（透明度）：0~1,rgba(0,255,255,0.9)        text-indent：段落首行缩进        line-height: 300px;            行高 和 块的高度一致，就可以上下居中    -->    <style>        h1{            color: rgba(0,255,255,0.9);            text-align: center;        }        .p1{            text-indent: 2em;        }        .p3{            background: blueviolet;            height: 300px;            line-height: 50px;        }        /*下划线*/        .l1{            text-decoration: underline;        }        /*中划线*/        .l2{            text-decoration: line-through;        }        /*上划线*/        .l3{            text-decoration: overline;        }        /* a标签去除下划线 */        a1{            text-decoration: none;        }        /* 水平对齐~ 参照物， a，b */        img,span{            vertical-align: middle;        }    </style></head><body><a href="">a标签去除下划线</a><p class="l1">123321</p><p class="l2">123321</p><p class="l3">123321</p><h1>故事介绍</h1><p class="p1">    物、情节、环境是小说的三要素。情节一般包括开端、发展、高潮、结局四部分，有的包括序幕、尾声。环境包括自然环境和社会环境。    小说按照篇幅及容量可分为长篇、中篇、短篇和微型小说（小小说）。    按照表现的内容可分为神话、仙侠、武侠、科幻、悬疑、古传、当代、浪漫青春、游戏竞技等。</p><p>    按照体制可分为章回体小说、日记体小说、书信体小说、自传体小说。按照语言形式可分为文言小说和白话小说。</p><p class="p3">    Hooray! It's snowing! It's time to make a snowman.James runs out.    He makes a big pile of snow. He puts a big snowball on top.    He adds a scarf and a hat. He adds an orange for the nose.    He adds coal for the eyes and buttons.In the evening,    James opens the door. What does he see? The snowman is moving!    James invites him in. The snowman has never been inside a house.    He says hello to the cat. He plays with paper towels.A moment later,    the snowman takes James's hand and goes out.They go up, up, up into the air! They are flying!    What a wonderful night!The next morning,    James jumps out of bed. He runs to the door.He wants to thank the snowman. But he's gone.</p><p>    <img src="images/a.png" alt="">    <span>abcdefghijklmnabcdefghijklmn</span></p></body></html></code></pre><h3 id="3-4、阴影"><a href="#3-4、阴影" class="headerlink" title="3.4、阴影"></a>3.4、阴影</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* text-shadow: 阴影颜色，水平偏移，垂直偏移，阴影半径*/</span>#price<span class="token punctuation">{</span>    text<span class="token operator">-</span>shadow<span class="token operator">:</span> #<span class="token number">008800</span> 20px <span class="token operator">-</span>10px 2px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*第一个参数：表示水平偏移    第二个参数：表示垂直偏移    第三个参数：表示模糊半径    第四个参数：表示颜色*/</span>text<span class="token operator">-</span>shadow<span class="token operator">:</span>5px 5px 5px 颜色</code></pre><h3 id="3-5、超链接伪类"><a href="#3-5、超链接伪类" class="headerlink" title="3.5、超链接伪类"></a>3.5、超链接伪类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 未访问的链接 */</span>a<span class="token operator">:</span>link <span class="token punctuation">{</span>color<span class="token operator">:</span> #FF0000<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 已访问的链接,点击之后的状态*/</span>a<span class="token operator">:</span>visited <span class="token punctuation">{</span>color<span class="token operator">:</span> #00FF00<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 鼠标移动到链接上,鼠标悬浮的状态*/</span>a<span class="token operator">:</span>hover <span class="token punctuation">{</span>color<span class="token operator">:</span> #FF00FF<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选定的链接,鼠标按住未释放的状态*/</span>a<span class="token operator">:</span>active <span class="token punctuation">{</span>color<span class="token operator">:</span> #0000FF<span class="token punctuation">}</span></code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /* 默认颜色 */        a{            text-decoration: none;            color: #000000;        }        /* 鼠标悬浮的颜色 （只需要记住这个）*/        a:hover{            color: burlywood;            font-size: 30px;        }        /* 鼠标按主未释放的状态 */        a:active{            color: #008800;        }        /* 未访问的链接 */        a:link{            color: maroon;        }        /* 已访问的链接 */        a:visited{            color: darkmagenta;        }        /* text-shadow: 阴影颜色，水平偏移，垂直偏移，阴影半径*/        #price{            text-shadow: #008800 20px -10px 2px;        }    </style></head><body><a href="#">    <img src="images/a.jpg" alt=""></a><p>    <a href="#">码出高校：Java开发手册</a></p><p>    <a href="">作者：孤尽老师</a></p><p id="price">    ￥99</p></body></html></code></pre><h3 id="3-6、列表"><a href="#3-6、列表" class="headerlink" title="3.6、列表"></a>3.6、列表</h3><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>列表样式</title>    <link rel="stylesheet" href="css/style.css" type="text/css"></head><body>    <div id="nav">        <h2 class="title">全部商品分类</h2>        <ul>            <li><a href="#">图书</a>&nbsp;&nbsp;<a href="#">音响</a>&nbsp;&nbsp;<a href="#">数字商品</a></li>            <li><a href="#">家用电器</a>&nbsp;&nbsp;<a href="#">手机</a>&nbsp;&nbsp;<a href="#">数码</a></li>            <li><a href="#">电脑</a>&nbsp;&nbsp;<a href="#">办公</a></li>            <li><a href="#">家居</a>&nbsp;&nbsp;<a href="#">家装</a>&nbsp;&nbsp;<a href="#">厨具</a></li>            <li><a href="#">服饰鞋帽</a>&nbsp;&nbsp;<a href="#">个护化妆</a></li>            <li><a href="#">礼品箱包</a>&nbsp;&nbsp;<a href="#">中标</a>&nbsp;&nbsp;<a href="#">珠宝</a></li>            <li><a href="#">食品饮料</a>&nbsp;&nbsp;<a href="#">保健食品</a></li>            <li><a href="#">彩票</a>&nbsp;&nbsp;<a href="#">旅行</a>&nbsp;&nbsp;<a href="#">充值</a>&nbsp;&nbsp;<a href="#">票务</a></li>        </ul>    </div></body></html></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#nav</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> darkgrey<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.title</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*ul lilist-style:    none：去掉圆点    circle：空心圆    decimal：数字    spuare：正方形*/</span><span class="token selector">ul</span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> darkgrey<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-7、背景"><a href="#3-7、背景" class="headerlink" title="3.7、背景"></a>3.7、背景</h3><ul><li>背景颜色：background</li><li>背景图片</li></ul><pre class=" language-jacaScript"><code class="language-jacaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        div{            width: 1000px;            height: 700px;            border: 1px solid red;            background-image: url("images/tx.jpg");            /*默认是全部平铺的 repeat*/        }        .div1{            background-repeat: repeat-x;        }        .div2{            background-repeat: repeat-y;        }        .div3{            background-repeat: no-repeat;        }    </style></head><body><div class="div1"></div><div class="div2"></div><div class="div3"></div></body></html></code></pre><ul><li>延续3.6的案例，加上背景图：</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>列表样式</title>    <link rel="stylesheet" href="css/style.css" type="text/css"></head><body>    <div id="nav">        <h2 class="title">全部商品分类</h2>        <ul>            <li><a href="#">图书</a>&nbsp;&nbsp;<a href="#">音响</a>&nbsp;&nbsp;<a href="#">数字商品</a></li>            <li><a href="#">家用电器</a>&nbsp;&nbsp;<a href="#">手机</a>&nbsp;&nbsp;<a href="#">数码</a></li>            <li><a href="#">电脑</a>&nbsp;&nbsp;<a href="#">办公</a></li>            <li><a href="#">家居</a>&nbsp;&nbsp;<a href="#">家装</a>&nbsp;&nbsp;<a href="#">厨具</a></li>            <li><a href="#">服饰鞋帽</a>&nbsp;&nbsp;<a href="#">个护化妆</a></li>            <li><a href="#">礼品箱包</a>&nbsp;&nbsp;<a href="#">中标</a>&nbsp;&nbsp;<a href="#">珠宝</a></li>            <li><a href="#">食品饮料</a>&nbsp;&nbsp;<a href="#">保健食品</a></li>            <li><a href="#">彩票</a>&nbsp;&nbsp;<a href="#">旅行</a>&nbsp;&nbsp;<a href="#">充值</a>&nbsp;&nbsp;<a href="#">票务</a></li>        </ul>    </div></body></html></code></pre><pre class=" language-CSS"><code class="language-CSS">#nav{    width: 300px;    background: darkgrey;}.title{    font-size: 18px;    font-weight: bold;    text-indent: 1em;    line-height: 35px;    background: red url("../images/c.jpg") 270px 10px no-repeat;}/*ul lilist-style:    none：去掉圆点    circle：空心圆    decimal：数字    spuare：正方形*//*ul{    background: darkgrey;}*/ul li{    height: 30px;    list-style: none;    text-indent: 1em;    background-image: url("../images/b.jpg");    background-repeat: no-repeat;    background-position: 236px 2px;}a{    text-decoration: none;    font-size: 14px;    color: black;}a:hover{    color: orange;    text-decoration: underline;}</code></pre><h3 id="3-8、渐变"><a href="#3-8、渐变" class="headerlink" title="3.8、渐变"></a>3.8、渐变</h3><ul><li>渐变图片网站地址：<a href="https://www.grabient.com/">https://www.grabient.com</a></li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--径向渐变，圆形-->    <style>        body{            background-color: #FFFFFF;            background-image: linear-gradient(66deg, #FFFFFF 0%, #6284FF 50%, #FF0000 100%);        }    </style></head><body></body></html></code></pre><h2 id="4、盒子模型"><a href="#4、盒子模型" class="headerlink" title="4、盒子模型"></a>4、盒子模型</h2><ul><li>margin：外边距</li><li>padding：内边距</li><li>border：边框</li></ul><h3 id="4-1、边框"><a href="#4-1、边框" class="headerlink" title="4.1、边框"></a>4.1、边框</h3><ul><li>1、边框的粗细</li><li>2、边框的样式</li><li>3、边框的颜色</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        /*body总有一个默认的外边框margin：0,常见的*/        /*body{            margin: 0;            padding: 0;            text-decoration: none;        }*/        /*border:粗细，样式，颜色*/        #box{            width: 300px;            border: 1px solid red;        }        h2{            font-size: 16px;            background-color: cornflowerblue ;            line-height: 30px;            margin: 0px;        }        form{            background: #008800;        }        div:nth-of-type(1) input{            border: 3px solid black;        }        div:nth-of-type(2) input{            border: 3px dashed yellow;        }        div:nth-of-type(3) input{            border: 2px dashed green;        }    </style></head><body><div id="box">    <h2>会员登录</h2>    <form action="#">        <div>            <span>用户名：</span>            <input type="text">        </div>        <div>            <span>密码：</span>            <input type="password">        </div>        <div>            <span>邮箱：</span>            <input type="text">        </div>    </form></div></body></html></code></pre><h3 id="4-2、内外边距"><a href="#4-2、内外边距" class="headerlink" title="4.2、内外边距"></a>4.2、内外边距</h3><ul><li>margin + border + padding + 内容宽度</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--外边距的妙用：居中元素    margin: 0 auto;    -->    <style>        /*border:粗细，样式，颜色*/        #box{            width: 300px;            border: 1px solid red;            margin: 0 auto;        }        /*        顺时针选中        margin: 1px        margin: 1px 2px 3px;        margin: 1px 2px 3px 4px;        */        h2{            font-size: 16px;            background-color: cornflowerblue ;            line-height: 30px;            margin: 0px;        }        form{            background: #008800;        }        input{            border: 1px solid black;        }        div:nth-of-type(1){            padding: 10px 5px;        }    </style></head><body><div id="box">    <h2>会员登录</h2>    <form action="#">        <div>            <span>用户名：</span>            <input type="text">        </div>        <div>            <span>密码：</span>            <input type="password">        </div>        <div>            <span>邮箱：</span>            <input type="text">        </div>    </form></div></body></html></code></pre><h3 id="4-3、圆角边框"><a href="#4-3、圆角边框" class="headerlink" title="4.3、圆角边框"></a>4.3、圆角边框</h3><ul><li>四个角</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--    左上 右上 右下 左下，顺时针方向    -->    <!--        圆圈： 圆角 = 半径    -->    <style>        div{            width: 100px;            height: 100px;            border: 10px solid red;            border-radius: 100px;        }    </style></head><body><div></div></body></html></code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        #div1{            width: 100px;            height: 100px;            border: 10px solid red;            border-radius: 100px;        }        #div2{            width: 100px;            height: 50px;            border: 10px solid red;            border-radius: 100px 100px 0 0;        }        #div3{            width: 50px;            height: 50px;            border: 10px solid red;            border-radius: 100px 0 0 0;        }        img{            border-radius: 100px;        }    </style></head><body><div id="div1"></div><div id="div2"></div><div id="div3"></div><img src="images/tx.jpg" alt=""></body></html></code></pre><h3 id="4-4、盒子阴影"><a href="#4-4、盒子阴影" class="headerlink" title="4.4、盒子阴影"></a>4.4、盒子阴影</h3><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--margin：0 auto; 居中    要求：块元素，块元素有固定宽度-->    <style>        img{            border-radius: 50px;            box-shadow: 10px 10px 100px yellow;        }    </style></head><body><div>    <div style="width: 500px;display: block;text-align: center ">        <div>            <img src="images/tx.jpg" alt="">        </div>    </div></div></body></html></code></pre><p><strong>源码之家：<a href="https://www.mycodes.net/">https://www.mycodes.net/</a></strong><br><strong>模板之家：<a href="http://www.cssmoban.com/">http://www.cssmoban.com/</a></strong></p><h2 id="5、浮动"><a href="#5、浮动" class="headerlink" title="5、浮动"></a>5、浮动</h2><h3 id="5-1、标准文档流"><a href="#5-1、标准文档流" class="headerlink" title="5.1、标准文档流"></a>5.1、标准文档流</h3><pre><code>- 块级元素：独占一行 h1-h6 p div 列表…- 行内元素：不独占一行 span a img strong</code></pre><p><strong>注：行内元素可以被包含在 块级元素中，反之，则不可以</strong></p><h3 id="5-2-display-重要"><a href="#5-2-display-重要" class="headerlink" title="5.2.display(重要)"></a>5.2.display(重要)</h3><ul><li>block：块元素</li><li>inline：行内元素</li><li>inline-block：是块元素，但是可以内联，在一行（更多时候用float）</li><li>none：消失</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!--    block 块元素    inline 行内元素    inline-block 是块元素，但是可以内联，在一行    none 隐藏    -->    <style>        div{            width: 100px;            height: 100px;            border: 1px solid red;            display: none;        }        span{            width: 100px;            height: 100px;            border: 1px solid red;            display: inline-block;        }    </style></head><body><div>div块元素</div><span>span行内元素</span></body></html></code></pre><p><strong>QQ会员练习</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>QQ会员</title>    <style>        *{            padding:0;            margin: 0;        }        a{            text-decoration: none;        }        .nav-header{            height: 90px;            width: 100%;            background: rgba(0,0,0,.6);        }        .head-contain{            width: 1180px;            height: 90px;            margin: 0 auto;            text-align: center;        }        .top-logo,.top-nav,.top-nav li,.top-right{            height: 90px;            display: inline-block;            vertical-align: top;        }        .top-nav{            margin: 0 48px;        }        .top-nav li{            line-height: 90px;            width: 90px;        }        .top-nav li a{            display: block;            text-align: center;            font-size: 16px;            color: #fff;        }        .top-nav li a:hover{            color: blue;        }        .top-right a{            display: inline-block;            font-size: 16px;            text-align: center;            margin-top: 25px;            border-radius: 35px;        }        .top-right a:first-of-type{            width: 93px;            height: 38px;            line-height: 38px;            color: #fad65c;            border: 1px #fad65c solid;        }        .top-right a:first-of-type:hover{            color: #986b0d;            background: #fad65c;        }        .top-right a:last-of-type{            width: 140px;            height: 40px;            font-weight: 700;            line-height: 40px;            background: #fad65c;            color: #986b0d;        }        .top-right a:last-of-type:hover{            background: #fddc6c;        }    </style></head><body><div class="wrap">    <!--头部-->    <header class="nav-header">        <div class="head-contain">            <a href="" class="top-logo"><img src="img/QQ.png" width="145" height="90" /></a>            <nav class="top-nav">                <ul>                    <li><a href="">功能特权</a> </li>                    <li><a href="">游戏特权</a> </li>                    <li><a href="">生活特权</a> </li>                    <li><a href="">会员特权</a> </li>                    <li><a href="">成长体系</a> </li>                    <li><a href="">年费专区</a> </li>                    <li><a href="">超级会员</a> </li>                </ul>            </nav>            <div class="top-right">                <a href="">登录</a>                <a href="">开通超级会员</a>            </div>        </div>    </header></div></body></html></code></pre><h3 id="5-3、float-浮动"><a href="#5-3、float-浮动" class="headerlink" title="5.3、float 浮动"></a>5.3、float 浮动</h3><p><strong>1、左右浮动 float</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <link rel="stylesheet" href="css/style.css" type="text/css"></head><body><div id="father">    <div class="layer01"><img src="images/1.png" alt=""></div>    <div class="layer02"><img src="images/2.png" alt=""></div>    <div class="layer03"><img src="images/3.png" alt=""></div>    <div class="layer04">        浮动的盒子可以向左浮动，也可以向右浮动，知道它的外边缘碰到包含或另一个浮动盒子为止    </div></div></body></html></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#father</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#000</span> solid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer01</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#F00</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向左浮动*/</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer02</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#00F</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer03</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#060</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer04</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#666</span> dashed<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">23</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-4、父级边框塌陷问题"><a href="#5-4、父级边框塌陷问题" class="headerlink" title="5.4、父级边框塌陷问题"></a>5.4、父级边框塌陷问题</h3><pre><code>- clean</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*clear：right；右侧不允许有浮动元素clear：left； 左侧不允许有浮动元素clear：both； 两侧不允许有浮动元素clear：none；  */</span><span class="token punctuation">.</span>layer04<span class="token punctuation">{</span>    border<span class="token operator">:</span> 1px #<span class="token number">666</span> dashed<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> 23px<span class="token punctuation">;</span>    display<span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token operator">:</span> right<span class="token punctuation">;</span>    clear<span class="token operator">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>解决方案</strong><br>    - 1、增加父级元素的高度</p><pre class=" language-javaScript"><code class="language-javaScript">#father{    border: 1px #000 solid;    height: 800px;}</code></pre><pre><code>- 2、增加一个空的div（class=“clear”）标签，清除浮动</code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <link rel="stylesheet" href="css/style.css" type="text/css"></head><body><div id="father">    <div class="layer01"><img src="images/1.png" alt=""></div>    <div class="layer02"><img src="images/2.png" alt=""></div>    <div class="layer03"><img src="images/3.png" alt=""></div>    <div class="layer04">        浮动的盒子可以向左浮动，也可以向右浮动，知道它的外边缘碰到包含或另一个浮动盒子为止    </div>    <div class="clear"></div></div></body></html></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#father</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#000</span> solid<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer01</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#F00</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向左浮动*/</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer02</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#00F</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer03</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#060</span> dashed<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*clear：right；右侧不允许有浮动元素clear：left； 左侧不允许有浮动元素clear：both； 两侧不允许有浮动元素clear：none； */</span><span class="token selector"><span class="token class">.layer04</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token hexcode">#666</span> dashed<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">23</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3、overflow</strong></p><pre class=" language-css"><code class="language-css">在父级元素中增加一个    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span></code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        #content{            width: 200px;            height: 150px;            overflow: scroll;        }    </style></head><body><div id="content">    <img src="images/1.png" alt="">    <p>        某雌性生物醉倒在草地上，路人对其上下其手，并在草地上翻滚，一番折腾后某雌性生物迷迷糊糊醒来步履蹒跚地离开了    </p></div></body></html></code></pre><p><strong>4、父类添加一个伪类：after</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#father</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        div{            margin: 10px;            padding: 5px;        }        #father{            border: 1px #000 solid;        }        #father:after{            content: '';            display: block;            clear: both;        }        .layer01{            border: 1px #F00 dashed;            display: inline-block;            float: left;/*向左浮动*/        }        .layer02{            border: 1px #00F dashed;            display: inline-block;            float: left;        }        .layer03{            border: 1px #060 dashed;            display: inline-block;            float: right;        }        /*        clear：right；右侧不允许有浮动元素        clear：left； 左侧不允许有浮动元素        clear：both； 两侧不允许有浮动元素        clear：none；         */        .layer04{            border: 1px #666 dashed;            font-size: 12px;            line-height: 23px;            display: inline-block;            float: right;        }    </style></head><body><div id="father">    <div class="layer01"><img src="../lesson06/images/1.png" alt=""></div>    <div class="layer02"><img src="images/2.png" alt=""></div>    <div class="layer03"><img src="images/3.png" alt=""></div>    <div class="layer04">        浮动的盒子可以向左浮动，也可以向右浮动，知道它的外边缘碰到包含或另一个浮动盒子为止    </div>    <div class="clear"></div></div></body></html></code></pre><p><strong>小结：</strong><br>    - 浮动元后面增加空div<br>        - 简单，代码中尽量避免空div<br>    - 设置父元素的高度<br>        - 简单，元素假设有了固定的高度，就会被限制<br>    - overflow<br>        - 简单，下拉的一些场景避免使用<br>    - 父类添加一个伪类：after<br>        - 写法稍微复杂一点，但是没有副作用，推荐使用！</p><h3 id="5-5、display与float对比"><a href="#5-5、display与float对比" class="headerlink" title="5.5、display与float对比"></a>5.5、display与float对比</h3><p><strong>display：方向不可以控制</strong><br><strong>float：浮动起来会脱离标准文档流，所以要解决父级边框塌陷的问题</strong></p><h2 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h2><h3 id="6-1、相对定位"><a href="#6-1、相对定位" class="headerlink" title="6.1、相对定位"></a>6.1、相对定位</h3><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <!-- 相对定位    相对于自己原来的位置进行偏移~    -->    <style>        body{            padding: 20px;        }        div{            margin: 10px;            padding: 5px;            font-size: 12px;            line-height: 25px;        }        #father{            border: 1px solid #666;        }        #first{            background-color: #3cbda6;            border: 1px solid #b27530;            position: relative;/*相对定位 上下左右*/            top: -20px;/*向上偏移20px*/            left: 20px;/*向右偏移20*/        }        #second{            background-color: #0000FF;            border: 1px solid #255066;        }        #third{            background-color: #008800;            border: 1px solid #1c6615;            position: relative;/*相对定位 上下左右*/            bottom: -20px;/*向下偏移20px*/            right: 20px;/*向左偏移20px*/        }    </style></head><body><div id="father">    <div id="first">第一个盒子</div>    <div id="second">第二个盒子</div>    <div id="third">第三个盒子</div></div></body></html></code></pre><p><strong>相对定位：position: relative;</strong><br><strong>相对于原来的位置，进行指定的偏移，相对定位的话，他仍然在标准文档流中，原来的位置会被保留。</strong></p><pre class=" language-java"><code class="language-java">top<span class="token operator">:</span> <span class="token operator">-</span>20px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向上偏移20px*/</span>left<span class="token operator">:</span> 20px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向右偏移20*/</span>bottom<span class="token operator">:</span> <span class="token operator">-</span>20px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向下偏移20px*/</span>right<span class="token operator">:</span> 20px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向左偏移20px*/</span></code></pre><p><strong>方块定位练习</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        #box{            width: 300px;            height: 300px;            padding: 10px;            border: 2px solid red;        }        a{            width: 100px;            height: 100px;            text-decoration: none;            background-color: darkmagenta;            line-height: 100px;            text-align: center;            color: white;            display: block;        }        a:hover{            background: #a13d30;        }        .a2,.a4{            position: relative;            left: 200px;            top: -100px;        }        .a5{            position: relative;            left: 100px;            top: -300px;        }    </style></head><body><div id="box">    <a class="a1" href="#">链接1</a>    <a class="a2" href="#">链接2</a>    <a class="a3" href="#">链接3</a>    <a class="a4" href="#">链接4</a>    <a class="a5" href="#">链接5</a></div></body></html>————————————————</code></pre><h3 id="6-2、绝对定位"><a href="#6-2、绝对定位" class="headerlink" title="6.2、绝对定位"></a>6.2、绝对定位</h3><p><strong>定位：基于xxx定位。上下左右</strong><br>    - 1、没有父级元素定位的前提下，相对于浏览器定位<br>    - 2、假设父级元素存在定位，我们通常会相对于父级元素进行偏移<br>    - 3、在父级元素范围内</p><ul><li>相对于父级或浏览器的位置，进行指定的偏移，相对定位的话，他仍然在标准文档流中，原来的位置不会被保留。</li></ul><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        div{            margin: 10px;            padding: 5px;            font-size: 12px;            line-height: 25px;        }        #father{            border: 1px solid #666;            padding: 0;            position: relative;        }        #first{            background-color: #3cbda6;            border: 1px solid #b27530;        }        #second{            background-color: #0000FF;            border: 1px solid #255066;            position: absolute;            left: 100px;            top: 20px;        }        #third{            background-color: #008800;            border: 1px solid #1c6615;        }    </style></head><body><div id="father">    <div id="first">第一个盒子</div>    <div id="second">第二个盒子</div>    <div id="third">第三个盒子</div></div></body></html></code></pre><h3 id="6-3、固定定位-fixed"><a href="#6-3、固定定位-fixed" class="headerlink" title="6.3、固定定位 fixed"></a>6.3、固定定位 fixed</h3><pre class=" language-JavaScript"><code class="language-JavaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        body{            height: 10000px;        }        div:nth-of-type(1){/*绝对定位：相对于浏览器*/            width: 100px;            height: 100px;            background: red;            position: absolute;            right: 0;            bottom: 0;        }        div:nth-of-type(2){/*fixed：固定定位*/            width: 50px;            height: 50px;            background: yellow;            position: fixed;            right: 0;            bottom: 0;        }    </style></head><body><div>div1</div><div>div2</div></body></html></code></pre><h3 id="6-4-z-index"><a href="#6-4-z-index" class="headerlink" title="6.4.z-index"></a>6.4.z-index</h3><p><strong>z-index：默认时0，最高无限：999</strong></p><pre class=" language-javaScript"><code class="language-javaScript"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <style>        #content{            width: 333px;            padding: 0px;            margin: 0px;            overflow: hidden;            font-size: 12px;            line-height: 25px;            border: 1px #000 solid;        }        ul,li{            padding: 0px;            margin: 0px;            list-style-type: none;        }        /*父级元素相对定位*/        #content ul{            position: relative;        }        .tipText,.tipBg{            position: absolute;            width: 333px;            height: 25px;            top: 320px;        }        .tipText{            color: white;            /*z-index: 0;*/        }        .tipBg{            background: black;            opacity: 0.5;   /*背景透明度*/        }    </style></head><body><ul id="content">    <li><img src="images/bg.png" alt=""></li>    <li class="tipText">学习微服务，找狂神</li>    <li class="tipBg"></li>    <li>时间：2099-01-01</li>    <li>地点：月球一号基地</li></ul></body></html></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot:整合JDBC</title>
      <link href="/2017/05/25/springboot-zheng-he-jdbc/"/>
      <url>/2017/05/25/springboot-zheng-he-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="整合JDBC使用"><a href="#整合JDBC使用" class="headerlink" title="整合JDBC使用"></a>整合JDBC使用</h1><span id="more"></span><h2 id="1、springDate简介"><a href="#1、springDate简介" class="headerlink" title="1、springDate简介"></a>1、springDate简介</h2><ul><li>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</li><li>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</li><li>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></li><li>数据库相关的启动器 ：可以参考官方文档：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></li></ul><h2 id="2、创建测试项目测试数据源"><a href="#2、创建测试项目测试数据源" class="headerlink" title="2、创建测试项目测试数据源"></a>2、创建测试项目测试数据源</h2><p>1、新建一个项目<br>    - 测试springboot-data-jdbc<br>    - 引入相应模块：<br>        - SpringWeb<br>        - JDMC API<br>        - Mysql Driver<br>2、项目建好之后，发现自动帮我们导入了如下的启动器</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>3、编写yaml配置文件连接数据库；</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  datasource<span class="token operator">:</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">1207</span>    #假如时区报错了，增加一个时区配置就OK了 serverTimezone<span class="token operator">=</span>UTC    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>ssmbuild<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>UTC<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</code></pre><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootDataJdbcApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//看一下默认数据源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得连接</span>        Connection connection <span class="token operator">=</span>   dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置.</li><li>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>Hikari<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Dbcp2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Generic<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceJmxConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PooledDataSourceConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token function">PooledDataSourceConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</li><li>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；<br>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</li><li>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate.</li></ul><h2 id="3、JDBCTemplate模板"><a href="#3、JDBCTemplate模板" class="headerlink" title="3、JDBCTemplate模板"></a>3、JDBCTemplate模板</h2><pre><code>- 1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；- 2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。- 3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。- 4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用- 5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</code></pre><blockquote><p>JdbcTemplate主要提供以下几类方法：<br>    - execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；<br>    - update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；<br>    - query方法及queryForXXX方法：用于执行查询相关语句；<br>    - call方法：用于执行存储过程、函数相关语句。</p></blockquote><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>1、编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCController</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Autowired</span>     <span class="token comment" spellcheck="true">//模板</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询数据库所有信息</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/maps"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//没有实体类，数据库中的东西用map获取</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from books"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//增加</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/adds"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into books(bookID,bookName,bookCounts,detail)"</span> <span class="token operator">+</span>                <span class="token string">"value(258,'字典','25','500')"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update-ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateBooks</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update books set bookName=?,bookCounts=?,detail=? where bookID="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"java编程思想"</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"600"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update-ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from books where bookID=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete-ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、原理探究"><a href="#5、原理探究" class="headerlink" title="5、原理探究"></a>5、原理探究</h2><p>1、 org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration 数据源配置类作用 ：根据逻辑判断之后，添加数据源；<br>2、 SpringBoot默认支持以下数据源：<br>    - com.zaxxer.hikari.HikariDataSource （Spring Boot 2.0 以上，默认使用此数据源）<br>    - org.apache.tomcat.jdbc.pool.DataSource<br>    - org.apache.commons.dbcp2.BasicDataSource<br>    - 可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。默认情况下，它是从类路径自动检测的。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"spring.datasource.type"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">{</span>        <span class="token function">Generic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2017/05/23/springboot/"/>
      <url>/2017/05/23/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><span id="more"></span><h2 id="1、什么是Spring"><a href="#1、什么是Spring" class="headerlink" title="1、什么是Spring?"></a>1、什么是Spring?</h2><ul><li>Spring是一个开源框架，2003年兴起的一个轻量级的java框架。作者：Rod Johnson</li><li>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。<br>2、Spring是如何简化java开发的？<br>为了降低java开封的复杂性，Spring采用了以下四种关键策略：</li><li>基于实体类（pojo）的轻量级和最小侵入性编程。</li><li>通过IOC依赖注入（DI），和面向接口实现松耦合。</li><li>基于切面（AOP）和惯例进行声明式编程。</li><li>通过切面和模板减少样式代码。</li></ul><h2 id="2、SpringBoot"><a href="#2、SpringBoot" class="headerlink" title="2、SpringBoot"></a>2、SpringBoot</h2><p><strong>1、SpringBoot简介</strong><br>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；<br>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置， you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。<br>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。<br>这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。<br>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；<br>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以约定大于配置的核心思想，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。<br>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。<br>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。<br><strong>2、Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h3 id="3、微服务"><a href="#3、微服务" class="headerlink" title="3、微服务"></a>3、微服务</h3><p>1、什么是微服务？<br>    微服务是一种架构风格，要求我们开发一个应用程序的时候，这个应用必须构建成一系列小服务的组合；可以通过Http的方式进行互通。要说微服务架构，就得先说说过去我们的单体应用架构。<br>2、单体应用架构<br>    单体应用架构（all in one）是指：我们将一个应用中的所有应用服务都封装在一个应用中。<br>    无论是ERP/CRM或者是其他系统，都把数据库访问，web访问，等等各个功能放到一个war包内。<br>    - 这样做的好处：<br>    易于开发和测试，方便部署，当需要扩展时，只需将war包复制多份，然后放在多个服务器上，再做个负载均衡就可以了。<br>    - 缺点：<br>    哪怕修改一个非常小的地方，都需要停掉整个服务，重新打包，部署这个应用war包。特别是对于一个大型应用，我们不可能把所有的内容都放在一个应用里面，我们维护，分工合作都是问题。<br>3、微服务架构<br>    all in one 的架构方式，我们将所有的功能单元都放在一个应用里，然后我们把整个应用部署到服务器上，如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后在负载均衡。<br>    所谓微服务架构就是打破之前all in one 的架构方式，把每个功能单元独立出来。<br>    把独立出来的功能元素动态组合，需要的功能元素才拿来组合，需要多一些时，可以整合多个功能元素。<br>    所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。<br>    -好处：<br>    节省了调用资源。<br>    每个功能元素的微服务都是一个可替换的、可独立升级的软件代码。<br>4、微服务论文：<br><a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a><br>5、构建微服务：<br>    一个大型系统的微服务架构，就像一个复杂交织的神经网络，每一个神经元就是一个功能元素，它们各自完成自己的功能，然后通过http相互请求调用。比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务，都被微化了，它们作为一个个微服务共同构建了一个庞大的系统。如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。<br>    但是这种庞大的系统架构给部署和运维带来很大的难度。于是，spring为我们带来了构建大型分布式微服务的全套、全程产品：<br>    - 构建一个个功能独立的微服务应用单元，可以使用springboot，可以帮我们快速构建一个应用；<br>    - 大型分布式网络服务的调用，这部分由spring cloud来完成，实现分布式；<br>    - 在分布式中间，进行流式数据计算、批处理，我们有spring cloud data flow。<br>    - spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案。</p><h3 id="4、SpringBoot-环境搭建"><a href="#4、SpringBoot-环境搭建" class="headerlink" title="4、SpringBoot 环境搭建"></a>4、SpringBoot 环境搭建</h3><h4 id="4-1、我的环境准备："><a href="#4-1、我的环境准备：" class="headerlink" title="4.1、我的环境准备："></a>4.1、我的环境准备：</h4><ul><li>jdk8</li><li>Maven-3.6.1</li><li>SpringBoot 3.0 最新版<br>开发工具：</li><li>IDEA</li></ul><h4 id="4-2、创建基础项目说明："><a href="#4-2、创建基础项目说明：" class="headerlink" title="4.2、创建基础项目说明："></a>4.2、创建基础项目说明：</h4><p>Spring官方提供了非常方便的工具让我们快速构建应用<br>Spring Initializr：<a href="https://start.spring.io/">https://start.spring.io/</a><br><strong>项目创建方式一：</strong>使用Spring Initializr 的 Web页面创建项目<br>1、打开 <a href="https://start.spring.io/">https://start.spring.io/</a><br>2、填写项目信息<br>3、点击”Generate Project“按钮生成项目；下载此项目<br>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。<br>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。<br><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目<br>1、创建一个新项目<br>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现<br>3、填写项目信息<br>4、选择初始化的组件（初学勾选 Web 即可）<br>5、填写项目路径<br>6、等待项目构建成功</p><h4 id="4-3、项目结构分析："><a href="#4-3、项目结构分析：" class="headerlink" title="4.3、项目结构分析："></a>4.3、项目结构分析：</h4><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。<br>1、程序的主启动类<br>2、一个 application.properties 配置文件<br>3、一个 测试类<br>4、一个 pom.xml</p><h4 id="4-4、pom-xml-分析"><a href="#4-4、pom-xml-分析" class="headerlink" title="4.4、pom.xml 分析"></a>4.4、pom.xml 分析</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父依赖 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> web场景启动器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> springboot单元测试 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 剔除依赖 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>vintage<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">-</span>vintage<span class="token operator">-</span>engine<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span>build<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 打包插件 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>plugin<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span></code></pre><h4 id="4-5、编写一个http接口"><a href="#4-5、编写一个http接口" class="headerlink" title="4.5、编写一个http接口"></a>4.5、编写一个http接口</h4><p>1、在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到<br>2、在包中新建一个HelloController类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自动配置</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接口：http://localhost:8080/hello</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用业务，接受前端参数</span>        <span class="token keyword">return</span> <span class="token string">"hello,world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p><h4 id="4-6、将项目打成jar包"><a href="#4-6、将项目打成jar包" class="headerlink" title="4.6、将项目打成jar包"></a>4.6、将项目打成jar包</h4><pre><code>- 点击 maven的 package。</code></pre><p>如果打包成功，则会在target目录下生成一个 jar 包。<br>打成了jar包后，就可以在任何地方运行了！OK。</p><h4 id="4-7、彩蛋"><a href="#4-7、彩蛋" class="headerlink" title="4.7、彩蛋"></a>4.7、彩蛋</h4><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；<br>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。<br>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><h4 id="4-8、更改项目的端口号"><a href="#4-8、更改项目的端口号" class="headerlink" title="4.8、更改项目的端口号"></a>4.8、更改项目的端口号</h4><pre class=" language-java"><code class="language-java">#更改项目的端口号server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8888</span></code></pre><h3 id="5、springBoot自动配置原理"><a href="#5、springBoot自动配置原理" class="headerlink" title="5、springBoot自动配置原理"></a>5、springBoot自动配置原理</h3><h4 id="5-1、pom-xml"><a href="#5-1、pom-xml" class="headerlink" title="5.1、pom.xml"></a>5.1、pom.xml</h4><h5 id="5-1-1、依赖包"><a href="#5-1-1、依赖包" class="headerlink" title="5.1.1、依赖包"></a>5.1.1、依赖包</h5><pre><code>父项目，主要是管理项目的资源过滤及插件！这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent <span class="token keyword">from</span> repository <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span></code></pre><p>点进去里面还有一个父项目，再点进去，管理所有的依赖包。</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span></code></pre><h5 id="5-2-2、启动器"><a href="#5-2-2、启动器" class="headerlink" title="5.2.2、启动器"></a>5.2.2、启动器</h5><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><pre><code>启动器：就是springBoot的启动场景。spring-boot-starter-web :会帮我们自动导入web环境所有的依赖。springboot会将所有的功能场景，都变成一个个的启动器。我们要使用什么功能，就需要找到对应的启动器就可以了  starter 。</code></pre><h4 id="5-2、主启动类"><a href="#5-2、主启动类" class="headerlink" title="5.2、主启动类"></a>5.2、主启动类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>    <span class="token comment" spellcheck="true">//标注这个类是一个springboot的应用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01LearnApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将springboot应用启动</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot01LearnApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-3、注解"><a href="#5-3、注解" class="headerlink" title="5.3、注解"></a>5.3、注解</h4><h5 id="5-3-1、-SpringBootApplication"><a href="#5-3-1、-SpringBootApplication" class="headerlink" title="5.3.1、 @SpringBootApplication"></a>5.3.1、 @SpringBootApplication</h5><pre><code>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；进入这个注解：可以看到上面还有很多其他注解！</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span>AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h5 id="5-3-2、-ComponentScan"><a href="#5-3-2、-ComponentScan" class="headerlink" title="5.3.2、 @ComponentScan"></a>5.3.2、 @ComponentScan</h5><pre><code>这个注解在spring中很重要，对应XML中配置的元素。作用：自动扫描并加载符合条件的组件或者bean，将这个bean定义加载到IOC容器中。</code></pre><h5 id="5-3-3、-SpringBootConfiguration"><a href="#5-3-3、-SpringBootConfiguration" class="headerlink" title="5.3.3、 @SpringBootConfiguration"></a>5.3.3、 @SpringBootConfiguration</h5><pre><code>作用：springboot的配置类，标注在某个类上，表示这是一个springboot的配置类。点击@SpringBootConfiguration注解</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 点进去得到下面的 @Component</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="5-3-4、-Configuratin"><a href="#5-3-4、-Configuratin" class="headerlink" title="5.3.4、 @Configuratin"></a>5.3.4、 @Configuratin</h5><pre><code>表明这是一个配置类，配置类就相当于Spring.xml配置文件。</code></pre><h5 id="5-3-5、-Component"><a href="#5-3-5、-Component" class="headerlink" title="5.3.5、 @Component"></a>5.3.5、 @Component</h5><pre><code>说明，启动类本身也是Spring中的一个组件而已，负责启动应用。</code></pre><h5 id="5-3-6、-EnableAutoConfiguration"><a href="#5-3-6、-EnableAutoConfiguration" class="headerlink" title="5.3.6、 @EnableAutoConfiguration"></a>5.3.6、 @EnableAutoConfiguration</h5><pre><code>开启自动配置功能。以前我们自己配置的东西，现在springboot会帮我们配置。@EnableAutoConfiguratin 告诉springboot开启自动配置功能，这样自动配置才能生效。</code></pre><h5 id="5-3-7、-AutoConfigurationPackage"><a href="#5-3-7、-AutoConfigurationPackage" class="headerlink" title="5.3.7、 @AutoConfigurationPackage"></a>5.3.7、 @AutoConfigurationPackage</h5><pre><code>自动配置包。</code></pre><h5 id="5-3-8、-ConditionalOnxxx"><a href="#5-3-8、-ConditionalOnxxx" class="headerlink" title="5.3.8、 @ConditionalOnxxx"></a>5.3.8、 @ConditionalOnxxx</h5><pre><code>如果这里面的条件都满足，才会生效。</code></pre><h5 id="5-3-9、-Import"><a href="#5-3-9、-Import" class="headerlink" title="5.3.9、 @Import"></a>5.3.9、 @Import</h5><pre><code>spring底层注解@Import，给容器中导入一个组件。Registrar.class :作用：将主启动类所在包以及下面的所有子包，里面的所有组件，都扫描在spring容器中。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Registrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="5-3-10、-Import-AutoConfigurationImportSelector-class-："><a href="#5-3-10、-Import-AutoConfigurationImportSelector-class-：" class="headerlink" title="5.3.10、 @Import({AutoConfigurationImportSelector.class}) ："></a>5.3.10、 @Import({AutoConfigurationImportSelector.class}) ：</h5><pre><code>- 给容器导入组件 ；@AutoConfigurationImportSelector : 自动配置导入选择器。- 这个类中有一个这样的方法：</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得候选的配置</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span>    <span class="token comment" spellcheck="true">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>- 这个方法又调用了 SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里它又调用了 loadSpringFactories 方法</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>- 我们继续点击查看 loadSpringFactories 方法</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>MultiValueMap<span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//去获取一个资源 "META-INF/spring.factories"</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span> <span class="token operator">:</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LinkedMultiValueMap result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的资源遍历，封装成为一个Properties</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                URL url <span class="token operator">=</span> <span class="token punctuation">(</span>URL<span class="token punctuation">)</span>urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UrlResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator var6 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>var6<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String factoryClassName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> var9 <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> var10 <span class="token operator">=</span> var9<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var11 <span class="token operator">&lt;</span> var10<span class="token punctuation">;</span> <span class="token operator">++</span>var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String factoryName <span class="token operator">=</span> var9<span class="token punctuation">[</span>var11<span class="token punctuation">]</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> factoryName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location [META-INF/spring.factories]"</span><span class="token punctuation">,</span> var13<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>发现一个多次出现的文件：spring.factories。</li></ul><h5 id="5-3-11、-spring-factories"><a href="#5-3-11、-spring-factories" class="headerlink" title="5.3.11、 spring.factories"></a>5.3.11、 spring.factories</h5><pre><code>打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！打开WebMvcAutoConfiguration：可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean。所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</code></pre><h4 id="5-4、结论"><a href="#5-4、结论" class="headerlink" title="5.4、结论"></a>5.4、结论</h4><pre><code>1、SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值2、将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；3、整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；4、它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；5、有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</code></pre><h3 id="6、-SpringApplication-主启动类"><a href="#6、-SpringApplication-主启动类" class="headerlink" title="6、 SpringApplication 主启动类"></a>6、 SpringApplication 主启动类</h3><h4 id="6-1、SpringApplication"><a href="#6-1、SpringApplication" class="headerlink" title="6.1、SpringApplication"></a>6.1、SpringApplication</h4><pre><code>我最初以为就是运行了一个main方法，没想到却开启了一个服务；SpringApplication.run分析:分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-2、这个类主要做了以下四件事情："><a href="#6-2、这个类主要做了以下四件事情：" class="headerlink" title="6.2、这个类主要做了以下四件事情："></a>6.2、这个类主要做了以下四件事情：</h4><pre><code>1、推断应用的类型是普通的项目还是Web项目2、查找并加载所有可用初始化器 ， 设置到initializers属性中3、找出所有的应用程序监听器，设置到listeners属性中4、推断并设置main方法的定义类，找到运行的主类。</code></pre><p>查看构造器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7、-yaml"><a href="#7、-yaml" class="headerlink" title="7、 yaml"></a>7、 yaml</h3><h4 id="7-1、配置文件"><a href="#7-1、配置文件" class="headerlink" title="7.1、配置文件"></a>7.1、配置文件</h4><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><pre><code>- application.properties- 语法结构 ：key=value- application.yaml- 语法结构 ：key：空格 value</code></pre><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><h4 id="7-2、-yaml概述"><a href="#7-2、-yaml概述" class="headerlink" title="7.2、 yaml概述"></a>7.2、 yaml概述</h4><pre><code>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）这种语言以数据***作***为中心，而不是以标记语言为重点！以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</code></pre><p>传统的xml配置：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>server<span class="token operator">></span>    <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token number">8081</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>server</code></pre><p>yaml配置：</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">:</span>  port<span class="token punctuation">:</span> <span class="token number">8888</span></code></pre><h4 id="7-3、-yaml基础语法"><a href="#7-3、-yaml基础语法" class="headerlink" title="7.3、 yaml基础语法"></a>7.3、 yaml基础语法</h4><pre><code>说明：语法要求严格！1、空格不能省略2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。3、属性和值的大小写都是十分敏感的。字面量：普通的值 [ 数字，布尔值，字符串 ]字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</code></pre><p>注意：<br>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；<br>比如 ：name: “kuang \n shen” 输出 ：kuang 换行 shen</p><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出<br>比如 ：name: ‘kuang \n shen’ 输出 ：kuang \n shen</p><ul><li>对象、Map（键值对）：</li></ul><pre class=" language-java"><code class="language-java">#对象、Map格式k<span class="token operator">:</span>     v1<span class="token operator">:</span>    v2<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>student<span class="token operator">:</span>    name<span class="token operator">:</span> qinjiang    age<span class="token operator">:</span> <span class="token number">3</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token comment" spellcheck="true">//内行写法：</span>student<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> qinjiang<span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span></code></pre><ul><li>数组（ List、set ）<br>用 - 值表示数组中的一个元素,比如</li></ul><pre class=" language-java"><code class="language-java">pets<span class="token operator">:</span> <span class="token operator">-</span> cat <span class="token operator">-</span> dog <span class="token operator">-</span> pig <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token comment" spellcheck="true">//内行写法：</span> pets<span class="token operator">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h4 id="7-4、原来注入配置文件-Value-“”-。"><a href="#7-4、原来注入配置文件-Value-“”-。" class="headerlink" title="7.4、原来注入配置文件@Value(“”)。"></a>7.4、原来注入配置文件@Value(“”)。</h4><h5 id="7-4-1、application-yml"><a href="#7-4-1、application-yml" class="headerlink" title="7.4.1、application.yml"></a>7.4.1、application.yml</h5><pre><code>- 在springboot项目中的resources目录下新建一个文件 。</code></pre><h5 id="7-4-2、写实体类-Dog；"><a href="#7-4-2、写实体类-Dog；" class="headerlink" title="7.4.2、写实体类 Dog；"></a>7.4.2、写实体类 Dog；</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有参无参构造、get、set方法、toString()方法  </span><span class="token punctuation">}</span></code></pre><h5 id="7-4-3、原来给bean注入：-Value-“”-。"><a href="#7-4-3、原来给bean注入：-Value-“”-。" class="headerlink" title="7.4.3、原来给bean注入：@Value(“”)。"></a>7.4.3、原来给bean注入：@Value(“”)。</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-4-4、SpringBoot测试类；"><a href="#7-4-4、SpringBoot测试类；" class="headerlink" title="7.4.4、SpringBoot测试类；"></a>7.4.4、SpringBoot测试类；</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment" spellcheck="true">//将狗狗自动注入进来</span>    Dog dog<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印看下狗狗对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果成功输出，@Value注入成功，这是我们原来的办法。</p><h4 id="7-5、-使用yaml-注入"><a href="#7-5、-使用yaml-注入" class="headerlink" title="7.5、 使用yaml 注入"></a>7.5、 使用yaml 注入</h4><h5 id="7-5-1、-编写实体类：Person-类"><a href="#7-5-1、-编写实体类：Person-类" class="headerlink" title="7.5.1、 编写实体类：Person 类"></a>7.5.1、 编写实体类：Person 类</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有参无参构造、get、set方法、toString()方法  </span><span class="token punctuation">}</span></code></pre><h5 id="7-5-2、使用yaml配置的方式进行注入。"><a href="#7-5-2、使用yaml配置的方式进行注入。" class="headerlink" title="7.5.2、使用yaml配置的方式进行注入。"></a>7.5.2、使用yaml配置的方式进行注入。</h5><pre><code>- 大家写的时候注意区别和优势，我们编写一个yaml配置！</code></pre><pre class=" language-java"><code class="language-java">person<span class="token operator">:</span>  name<span class="token operator">:</span> qinjiang  age<span class="token operator">:</span> <span class="token number">3</span>  happy<span class="token operator">:</span> <span class="token boolean">false</span>  birth<span class="token operator">:</span> <span class="token number">2000</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">01</span>  maps<span class="token operator">:</span> <span class="token punctuation">{</span>k1<span class="token operator">:</span> v1<span class="token punctuation">,</span>k2<span class="token operator">:</span> v2<span class="token punctuation">}</span>  lists<span class="token operator">:</span>   <span class="token operator">-</span> code   <span class="token operator">-</span> girl   <span class="token operator">-</span> music  dog<span class="token operator">:</span>    name<span class="token operator">:</span> 旺财    age<span class="token operator">:</span> <span class="token number">1</span></code></pre><h5 id="7-5-3、yaml配置注入实体类"><a href="#7-5-3、yaml配置注入实体类" class="headerlink" title="7.5.3、yaml配置注入实体类"></a>7.5.3、yaml配置注入实体类</h5><pre><code>- 我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*@ConfigurationProperties作用：    将配置文件中配置的每一个属性的值，映射到这个组件中；    告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定        参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应*/</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-5-3、导入springBoot配置处理器包"><a href="#7-5-3、导入springBoot配置处理器包" class="headerlink" title="7.5.3、导入springBoot配置处理器包"></a>7.5.3、导入springBoot配置处理器包</h5><pre><code>- IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>configuration<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h5 id="7-5-4、测试类。"><a href="#7-5-4、测试类。" class="headerlink" title="7.5.4、测试类。"></a>7.5.4、测试类。</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    Person person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将person自动注入进来</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印person信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：所有值全部注入成功！</p><h4 id="7-6、-加载指定的配置文件"><a href="#7-6、-加载指定的配置文件" class="headerlink" title="7.6、 加载指定的配置文件"></a>7.6、 加载指定的配置文件</h4><h5 id="7-6-1、-PropertySource-："><a href="#7-6-1、-PropertySource-：" class="headerlink" title="7.6.1、 **@PropertySource ："></a>7.6.1、 **@PropertySource ：</h5><pre><code>- **加载指定的配置文件；</code></pre><h5 id="7-6-2、-configurationProperties："><a href="#7-6-2、-configurationProperties：" class="headerlink" title="7.6.2、 @configurationProperties："></a>7.6.2、 @configurationProperties：</h5><pre><code>- 默认从全局配置文件中获取值；</code></pre><h5 id="7-6-3、在resources目录新建person-properties文件"><a href="#7-6-3、在resources目录新建person-properties文件" class="headerlink" title="7.6.3、在resources目录新建person.properties文件"></a>7.6.3、在resources目录新建person.properties文件</h5><pre class=" language-java"><code class="language-java">name<span class="token operator">=</span>kuangshen</code></pre><h5 id="7-6-4、代码中指定加载person-properties文件"><a href="#7-6-4、代码中指定加载person-properties文件" class="headerlink" title="7.6.4、代码中指定加载person.properties文件"></a>7.6.4、代码中指定加载person.properties文件</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:person.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span></code></pre><p>再次输出测试一下：指定配置文件绑定成功！</p><h4 id="7-7、-配置文件占位符"><a href="#7-7、-配置文件占位符" class="headerlink" title="7.7、 配置文件占位符"></a>7.7、 配置文件占位符</h4><pre class=" language-java"><code class="language-java">person<span class="token operator">:</span>    name<span class="token operator">:</span> qinjiang$<span class="token punctuation">{</span>random<span class="token punctuation">.</span>uuid<span class="token punctuation">}</span> # 随机uuid    age<span class="token operator">:</span> $<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">}</span>  # 随机<span class="token keyword">int</span>    happy<span class="token operator">:</span> <span class="token boolean">false</span>    birth<span class="token operator">:</span> <span class="token number">2000</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">01</span>    maps<span class="token operator">:</span> <span class="token punctuation">{</span>k1<span class="token operator">:</span> v1<span class="token punctuation">,</span>k2<span class="token operator">:</span> v2<span class="token punctuation">}</span>    lists<span class="token operator">:</span>      <span class="token operator">-</span> code      <span class="token operator">-</span> girl      <span class="token operator">-</span> music    dog<span class="token operator">:</span>      name<span class="token operator">:</span> $<span class="token punctuation">{</span>person<span class="token punctuation">.</span>hello<span class="token operator">:</span>other<span class="token punctuation">}</span>_旺财      age<span class="token operator">:</span> <span class="token number">1</span></code></pre><h4 id="7-8、-使用原来的properties"><a href="#7-8、-使用原来的properties" class="headerlink" title="7.8、 使用原来的properties"></a>7.8、 使用原来的properties</h4><pre><code>- 我们上面采用的yaml方法都是最简单的方式，开发中最常用的；也是springboot所推荐的！那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties。- 【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8。- settings–&gt;FileEncodings 中配置；</code></pre><h5 id="7-8-1、-新建实体类User"><a href="#7-8-1、-新建实体类User" class="headerlink" title="7.8.1、 新建实体类User"></a>7.8.1、 新建实体类User</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-8-2、编辑配置文件-user-properties"><a href="#7-8-2、编辑配置文件-user-properties" class="headerlink" title="7.8.2、编辑配置文件 user.properties"></a>7.8.2、编辑配置文件 user.properties</h5><pre class=" language-java"><code class="language-java">user<span class="token punctuation">.</span>name<span class="token operator">=</span>kuangshenuser<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span>user<span class="token punctuation">.</span>sex<span class="token operator">=</span>男</code></pre><h5 id="7-8-2、在User类上使用-Value注入"><a href="#7-8-2、在User类上使用-Value注入" class="headerlink" title="7.8.2、在User类上使用@Value注入"></a>7.8.2、在User类上使用@Value注入</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:user.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直接使用@value</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.name}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从配置文件中取值</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{9*2}"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// #{SPEL} Spring表达式</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 字面量</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-8-3、-SpringBoot测试，结果正常输出"><a href="#7-8-3、-SpringBoot测试，结果正常输出" class="headerlink" title="7.8.3、 SpringBoot测试，结果正常输出"></a>7.8.3、 SpringBoot测试，结果正常输出</h5><h4 id="7-9、-yaml-和-properties对比小结"><a href="#7-9、-yaml-和-properties对比小结" class="headerlink" title="7.9、 yaml 和 properties对比小结"></a>7.9、 yaml 和 properties对比小结</h4><table><thead><tr><th align="center"></th><th align="center">@Configuraction</th><th align="center">@Value</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">批量注入配置文件中的属性</td><td align="center">一个个指定</td></tr><tr><td align="center">松散绑定（松散语法）</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">SpEL</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">JSR3030数据校验</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">复杂类型封装</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加<br>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下<br>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性<br>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><ul><li>结论：<br>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；<br>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；<br>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</li></ul><h3 id="8、-JSR303数据校验"><a href="#8、-JSR303数据校验" class="headerlink" title="8、 JSR303数据校验"></a>8、 JSR303数据校验</h3><h4 id="8-1、JSR303数据校验使用"><a href="#8-1、JSR303数据校验使用" class="headerlink" title="8.1、JSR303数据校验使用"></a>8.1、JSR303数据校验使用</h4><pre><code>- Springboot中可以用@Validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">//数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//name必须是邮箱格式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果 ：default message [不是一个合法的电子邮件地址];<br>    - 使用数据校验，可以保证数据的正确性；</p><h4 id="8-2、常见参数"><a href="#8-2、常见参数" class="headerlink" title="8.2、常见参数"></a>8.2、常见参数</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"名字不能为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"年龄最大不能查过120"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span>空检查<span class="token annotation punctuation">@Null</span>       验证对象是否为null<span class="token annotation punctuation">@NotNull</span>    验证对象是否不为null<span class="token punctuation">,</span> 无法查检长度为<span class="token number">0</span>的字符串<span class="token annotation punctuation">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="token number">0</span><span class="token punctuation">,</span>只对字符串<span class="token punctuation">,</span>且会去掉前后空格<span class="token punctuation">.</span><span class="token annotation punctuation">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY<span class="token punctuation">.</span>    Boolean检查<span class="token annotation punctuation">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="token boolean">true</span>  <span class="token annotation punctuation">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="token boolean">false</span>      长度检查<span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> 验证对象（Array<span class="token punctuation">,</span>Collection<span class="token punctuation">,</span>Map<span class="token punctuation">,</span>String）长度是否在给定的范围之内  <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> string is between min and max included<span class="token punctuation">.</span>日期检查<span class="token annotation punctuation">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  <span class="token annotation punctuation">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  <span class="token annotation punctuation">@Pattern</span>    验证 String 对象是否符合正则表达式的规则<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等等除此以外，我们还可以自定义一些数据校验规则</code></pre><h4 id="8-3、多配置文件"><a href="#8-3、多配置文件" class="headerlink" title="8.3、多配置文件"></a>8.3、多配置文件</h4><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；<br>    例如：<br>    - application-test.properties 代表测试环境配置<br>    - application-dev.properties  代表开发环境配置<br>    - 但是Springboot并不会直接启动这些配置文件，它默认使用application.properties主配置文件；<br>    - 我们需要通过一个配置来选择需要激活的环境：</p><pre class=" language-java"><code class="language-java">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>dev</code></pre><h4 id="8-4、yaml的多文挡块"><a href="#8-4、yaml的多文挡块" class="headerlink" title="8.4、yaml的多文挡块"></a>8.4、yaml的多文挡块</h4><pre><code>- 和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</code></pre><pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8081</span>#选择要激活那个环境块spring<span class="token operator">:</span>  profiles<span class="token operator">:</span>    active<span class="token operator">:</span> prod<span class="token operator">--</span><span class="token operator">-</span>server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8083</span>spring<span class="token operator">:</span>  profiles<span class="token operator">:</span> dev #配置环境的名称<span class="token operator">--</span><span class="token operator">-</span>server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8084</span>spring<span class="token operator">:</span>  profiles<span class="token operator">:</span> prod  #配置环境的名称</code></pre><pre><code>- 注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</code></pre><h4 id="8-5、配置文件加载位置"><a href="#8-5、配置文件加载位置" class="headerlink" title="8.5、配置文件加载位置"></a>8.5、配置文件加载位置</h4><pre><code>- 外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！- springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</code></pre><pre class=" language-java"><code class="language-java">优先级<span class="token number">1</span>：项目路径下的config文件夹配置文件优先级<span class="token number">2</span>：项目路径下配置文件优先级<span class="token number">3</span>：资源路径下的config文件夹配置文件优先级<span class="token number">4</span>：资源路径下配置文件</code></pre><pre><code>- 优先级由高到底，高优先级的配置会覆盖低优先级的配置；- SpringBoot会从这四个位置全部加载主配置文件；互补配置；</code></pre><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><pre class=" language-java"><code class="language-java">#配置项目的访问路径server<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>kuang</code></pre><h4 id="8-6、-指定位置加载配置文件"><a href="#8-6、-指定位置加载配置文件" class="headerlink" title="8.6、 指定位置加载配置文件"></a>8.6、 指定位置加载配置文件</h4><pre><code>-（运维小技巧）- 我们还可以通过spring.config.location来改变默认的配置文件位置- 项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；- 这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</code></pre><h3 id="9、SpringBoot自动装配原理"><a href="#9、SpringBoot自动装配原理" class="headerlink" title="9、SpringBoot自动装配原理"></a>9、SpringBoot自动装配原理</h3><h4 id="9-1、分析自动配置原理"><a href="#9-1、分析自动配置原理" class="headerlink" title="9.1、分析自动配置原理"></a>9.1、分析自动配置原理</h4><pre><code>- 我们以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；</span>  <span class="token comment" spellcheck="true">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span>  <span class="token comment" spellcheck="true">//并把HttpProperties加入到ioc容器中</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解</span>  <span class="token comment" spellcheck="true">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span>  <span class="token comment" spellcheck="true">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span>  <span class="token comment" spellcheck="true">//如果不存在，判断也是成立的</span>  <span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span>    value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"enabled"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Encoding properties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>    <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//。。。。。。。</span><span class="token punctuation">}</span></code></pre><pre><code>- 一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！- 一但这个配置类生效；这个配置类就会给容器中添加各种组件；- 这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；- 所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；- 配置文件能配置什么就可以参照某个功能对应的这个属性类</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// .....</span><span class="token punctuation">}</span></code></pre><h4 id="9-2、精髓"><a href="#9-2、精髓" class="headerlink" title="9.2、精髓"></a>9.2、精髓</h4><pre><code>- 1、SpringBoot启动会加载大量的自动配置类- 2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；- 3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）- 4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；- **xxxxAutoConfigurartion：自动配置类；**给容器中添加组件- xxxxProperties:封装配置文件中相关属性；</code></pre><h4 id="9-3、了解：-Conditional"><a href="#9-3、了解：-Conditional" class="headerlink" title="9.3、了解：@Conditional"></a>9.3、了解：@Conditional</h4><pre><code>- 了解完自动装配的原理后，我们来关注一个细节问题，自动配置类必须在一定的条件下才能生效；- @Conditional派生注解（Spring注解版原生的@Conditional作用）- 作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置里面的所有内容才生效；</code></pre><table><thead><tr><th align="center">@Conditional扩展注解</th><th align="center">作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td align="center">@ConditionalOnJava</td><td align="center">系统的java版本是否符合要求</td></tr><tr><td align="center">@ConditionalOnBean</td><td align="center">容器中存在指定Bean</td></tr><tr><td align="center">@ConditionalOnMissingBean</td><td align="center">容器中不存在指定Bean</td></tr><tr><td align="center">@ConditionalOnExpression</td><td align="center">满足SpEL表达式指定</td></tr><tr><td align="center">@ConditionalOnClass</td><td align="center">系统中由指定的类</td></tr><tr><td align="center">@ConditionalOnMissingClass</td><td align="center">系统中没有指定的类</td></tr><tr><td align="center">@ConditionalOnSigleCandidate</td><td align="center">容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td align="center">@ConditionalOnProperty</td><td align="center">系统中指定的属性，是否有指定值</td></tr><tr><td align="center">@ConditionalOnResource</td><td align="center">类路径下是否存在指定资源文件</td></tr><tr><td align="center">@ConditionalOnWebApplication</td><td align="center">当前是web环境</td></tr><tr><td align="center">@CongitionalOnNotWebApplication</td><td align="center">当前不是web环境</td></tr><tr><td align="center">@ConditionalOnJndi</td><td align="center">JNDI存在指定项</td></tr></tbody></table><pre><code>- 那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。- 我们怎么知道哪些自动配置类生效？- 我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</code></pre><pre class=" language-java"><code class="language-java">#开启springboot的调试类debug<span class="token operator">=</span><span class="token boolean">true</span></code></pre><pre><code>- Positive matches:（自动配置类启用的：正匹配）- Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）- Unconditional classes: （没有条件的类）</code></pre><h3 id="10、web开发，静态资源导入"><a href="#10、web开发，静态资源导入" class="headerlink" title="10、web开发，静态资源导入"></a>10、web开发，静态资源导入</h3><h4 id="10-1、使用springBoot的步骤"><a href="#10-1、使用springBoot的步骤" class="headerlink" title="10.1、使用springBoot的步骤"></a>10.1、使用springBoot的步骤</h4><ul><li><p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p></li><li><p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p></li><li><p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p></li><li><p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p></li><li><p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p><ul><li>向容器中自动配置组件 ：*** Autoconfiguration</li><li>自动配置类，封装配置文件的内容：***Properties</li></ul></li></ul><h4 id="10-2、-静态资源映射规则"><a href="#10-2、-静态资源映射规则" class="headerlink" title="10.2、 静态资源映射规则"></a>10.2、 静态资源映射规则</h4><pre><code>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的- SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；- 有一个方法：addResourceHandlers 添加资源处理- 比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已禁用默认资源处理</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 缓存控制</span>    Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// webjars 配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态资源配置</span>    String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-3、什么是webjars-呢？"><a href="#10-3、什么是webjars-呢？" class="headerlink" title="10.3、什么是webjars 呢？"></a>10.3、什么是webjars 呢？</h4><pre><code>- Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。- 使用SpringBoot需要使用Webjars- 网站：https://www.webjars.org- 要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>webjars<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jquery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><pre><code>- 访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：http://localhost:8080/webjars/jquery/3.4.1/jquery.js</code></pre><h4 id="10-4、第二种静态资源映射规则"><a href="#10-4、第二种静态资源映射规则" class="headerlink" title="10.4、第二种静态资源映射规则"></a>10.4、第二种静态资源映射规则</h4><pre><code>- 我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 进入方法</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 找到对应的值</span><span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> CLASSPATH_RESOURCE_LOCATIONS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 找到路径</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span>  <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre><code>- ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。- 所以得出结论，以下四个目录存放的静态资源可以被我们识别：</code></pre><pre class=" language-java"><code class="language-java"><span class="token string">"classpath:/META-INF/resources/"</span><span class="token string">"classpath:/resources/"</span><span class="token string">"classpath:/static/"</span><span class="token string">"classpath:/public/"</span></code></pre><pre><code>- 我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；- 比如我们访问 http://localhost:8080/1.js , 他就会去这些文件夹中寻找对应的静态资源文件；</code></pre><h4 id="10-5、自定义静态资源路径"><a href="#10-5、自定义静态资源路径" class="headerlink" title="10.5、自定义静态资源路径"></a>10.5、自定义静态资源路径</h4><pre><code>- 我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</code></pre><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token operator">-</span>locations<span class="token operator">=</span>classpath<span class="token operator">:</span><span class="token operator">/</span>coding<span class="token operator">/</span><span class="token punctuation">,</span>classpath<span class="token operator">:</span><span class="token operator">/</span>kuang<span class="token operator">/</span></code></pre><pre><code>- 一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</code></pre><h4 id="10-6、总结"><a href="#10-6、总结" class="headerlink" title="10.6、总结"></a>10.6、总结</h4><ul><li>在springBoot中，我们可以使用以下方式处理静态资源：<ul><li>webjars   localhost:8080/webjars/</li><li>public  static  /**  resources</li></ul></li><li>优先级<ul><li>resources &gt; static(默认) &gt; public</li></ul></li></ul><h3 id="11、Thymeleaf-模板引擎"><a href="#11、Thymeleaf-模板引擎" class="headerlink" title="11、Thymeleaf 模板引擎"></a>11、Thymeleaf 模板引擎</h3><h4 id="11-1、模板引擎介绍"><a href="#11-1、模板引擎介绍" class="headerlink" title="11.1、模板引擎介绍"></a>11.1、模板引擎介绍</h4><pre><code>- 前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。- jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，第二，我们用的还是嵌入式的Tomcat，所以呢，他现在默认是不支持jsp的。- 那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？- SpringBoot推荐你可以来使用模板引擎：- 模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的。- 模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</code></pre><h4 id="11-2、引入Thymeleaf"><a href="#11-2、引入Thymeleaf" class="headerlink" title="11.2、引入Thymeleaf"></a>11.2、引入Thymeleaf</h4><p>对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：<br>    - Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a><br>    - Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a><br>    - Spring官方文档：找到我们对应的版本<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a><br>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>thymeleaf<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>thymeleaf<span class="token operator">-</span>spring5<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>extras<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>thymeleaf<span class="token operator">-</span>extras<span class="token operator">-</span>java8time<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h4 id="11-3、Thymeleaf-分析"><a href="#11-3、Thymeleaf-分析" class="headerlink" title="11.3、Thymeleaf 分析"></a>11.3、Thymeleaf 分析</h4><h5 id="11-3-1、自动配置类：ThymeleafPropert"><a href="#11-3-1、自动配置类：ThymeleafPropert" class="headerlink" title="11.3.1、自动配置类：ThymeleafPropert"></a>11.3.1、自动配置类：ThymeleafPropert</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplateLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String prefix <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String suffix <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String mode <span class="token operator">=</span> <span class="token string">"HTML"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset encoding<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>我们可以在其中看到默认的前缀和后缀！</li><li>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</li><li>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</li></ul><h5 id="11-3-2、测试"><a href="#11-3-2、测试" class="headerlink" title="11.3.2、测试"></a>11.3.2、测试</h5><pre><code>- 编写一个TestController</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="11-3-3、-test-html"><a href="#11-3-3、-test-html" class="headerlink" title="11.3.3、 test.html"></a>11.3.3、 test.html</h5><pre><code>- 编写测试页面 test.html 放在 templates 目录下</code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><pre><code>- 启动项目请求测试</code></pre><h4 id="11-4、Thymeleaf-语法"><a href="#11-4、Thymeleaf-语法" class="headerlink" title="11.4、Thymeleaf 语法"></a>11.4、Thymeleaf 语法</h4><ul><li>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></li></ul><h5 id="11-4-1、修改测试请求，增加数据传输；"><a href="#11-4-1、修改测试请求，增加数据传输；" class="headerlink" title="11.4.1、修改测试请求，增加数据传输；"></a>11.4.1、修改测试请求，增加数据传输；</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test1</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存入数据</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,Thymeleaf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="11-4-2、导入命名空间约束"><a href="#11-4-2、导入命名空间约束" class="headerlink" title="11.4.2、导入命名空间约束"></a>11.4.2、导入命名空间约束</h5><pre><code>- 我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示</code></pre><pre class=" language-java"><code class="language-java">xmlns<span class="token operator">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span></code></pre><h5 id="11-4-3、编写下前端页面"><a href="#11-4-3、编写下前端页面" class="headerlink" title="11.4.3、编写下前端页面"></a>11.4.3、编写下前端页面</h5><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> xmlns<span class="token punctuation">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>狂神说<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>th<span class="token punctuation">:</span>text就是将div中的内容设置为它指定的值，和之前学习的Vue一样<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div th<span class="token punctuation">:</span>text<span class="token operator">=</span><span class="token string">"${msg}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="11-5、Thymeleaf-表达式："><a href="#11-5、Thymeleaf-表达式：" class="headerlink" title="11.5、Thymeleaf 表达式："></a>11.5、Thymeleaf 表达式：</h4><pre class=" language-java"><code class="language-java">Simple expressions<span class="token operator">:</span>（表达式语法）Variable Expressions<span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>：获取变量值；OGNL；    <span class="token number">1</span>）、获取对象的属性、调用方法    <span class="token number">2</span>）、使用内置的基本对象：#<span class="token number">18</span>         #ctx <span class="token operator">:</span> the context object<span class="token punctuation">.</span>         #vars<span class="token operator">:</span> the context variables<span class="token punctuation">.</span>         #locale <span class="token operator">:</span> the context locale<span class="token punctuation">.</span>         #request <span class="token operator">:</span> <span class="token punctuation">(</span>only in Web Contexts<span class="token punctuation">)</span> the HttpServletRequest object<span class="token punctuation">.</span>         #response <span class="token operator">:</span> <span class="token punctuation">(</span>only in Web Contexts<span class="token punctuation">)</span> the HttpServletResponse object<span class="token punctuation">.</span>         #session <span class="token operator">:</span> <span class="token punctuation">(</span>only in Web Contexts<span class="token punctuation">)</span> the HttpSession object<span class="token punctuation">.</span>         #servletContext <span class="token operator">:</span> <span class="token punctuation">(</span>only in Web Contexts<span class="token punctuation">)</span> the ServletContext object<span class="token punctuation">.</span>    <span class="token number">3</span>）、内置的一些工具对象：　　　　　　#execInfo <span class="token operator">:</span> information about the template being processed<span class="token punctuation">.</span>　　　　　　#uris <span class="token operator">:</span> methods <span class="token keyword">for</span> escaping parts of URLs<span class="token operator">/</span>URIs　　　　　　#conversions <span class="token operator">:</span> methods <span class="token keyword">for</span> executing the configured conversion <span class="token function">service</span> <span class="token punctuation">(</span><span class="token keyword">if</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>　　　　　　#dates <span class="token operator">:</span> methods <span class="token keyword">for</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date objects<span class="token operator">:</span> formatting<span class="token punctuation">,</span> component extraction<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>　　　　　　#calendars <span class="token operator">:</span> analogous to #dates <span class="token punctuation">,</span> but <span class="token keyword">for</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar objects<span class="token punctuation">.</span>　　　　　　#numbers <span class="token operator">:</span> methods <span class="token keyword">for</span> formatting numeric objects<span class="token punctuation">.</span>　　　　　　#strings <span class="token operator">:</span> methods <span class="token keyword">for</span> String objects<span class="token operator">:</span> contains<span class="token punctuation">,</span> startsWith<span class="token punctuation">,</span> prepending<span class="token operator">/</span>appending<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>　　　　　　#objects <span class="token operator">:</span> methods <span class="token keyword">for</span> objects in general<span class="token punctuation">.</span>　　　　　　#bools <span class="token operator">:</span> methods <span class="token keyword">for</span> <span class="token keyword">boolean</span> evaluation<span class="token punctuation">.</span>　　　　　　#arrays <span class="token operator">:</span> methods <span class="token keyword">for</span> arrays<span class="token punctuation">.</span>　　　　　　#lists <span class="token operator">:</span> methods <span class="token keyword">for</span> lists<span class="token punctuation">.</span>　　　　　　#sets <span class="token operator">:</span> methods <span class="token keyword">for</span> sets<span class="token punctuation">.</span>　　　　　　#maps <span class="token operator">:</span> methods <span class="token keyword">for</span> maps<span class="token punctuation">.</span>　　　　　　#aggregates <span class="token operator">:</span> methods <span class="token keyword">for</span> creating aggregates on arrays or collections<span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  Selection Variable Expressions<span class="token operator">:</span> <span class="token operator">*</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>：选择表达式：和$<span class="token punctuation">{</span><span class="token punctuation">}</span>在功能上是一样；  Message Expressions<span class="token operator">:</span> #<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>：获取国际化内容  Link URL Expressions<span class="token operator">:</span> @<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>：定义URL；  Fragment Expressions<span class="token operator">:</span> <span class="token operator">~</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>：片段引用表达式Literals（字面量）      Text literals<span class="token operator">:</span> <span class="token string">'one text'</span> <span class="token punctuation">,</span> <span class="token string">'Another one!'</span> <span class="token punctuation">,</span>…      Number literals<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">34</span> <span class="token punctuation">,</span> <span class="token number">3.0</span> <span class="token punctuation">,</span> <span class="token number">12.3</span> <span class="token punctuation">,</span>…      Boolean literals<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> <span class="token boolean">false</span>      Null literal<span class="token operator">:</span> null      Literal tokens<span class="token operator">:</span> one <span class="token punctuation">,</span> sometext <span class="token punctuation">,</span> main <span class="token punctuation">,</span>…      Text operations<span class="token operator">:</span>（文本操作）    String concatenation<span class="token operator">:</span> <span class="token operator">+</span>    Literal substitutions<span class="token operator">:</span> <span class="token operator">|</span>The name is $<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">|</span>    Arithmetic operations<span class="token operator">:</span>（数学运算）    Binary operators<span class="token operator">:</span> <span class="token operator">+</span> <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token operator">/</span> <span class="token punctuation">,</span> <span class="token operator">%</span>    Minus <span class="token function">sign</span> <span class="token punctuation">(</span>unary operator<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">-</span>    Boolean operations<span class="token operator">:</span>（布尔运算）    Binary operators<span class="token operator">:</span> and <span class="token punctuation">,</span> or    Boolean <span class="token function">negation</span> <span class="token punctuation">(</span>unary operator<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">!</span> <span class="token punctuation">,</span> not    Comparisons and equality<span class="token operator">:</span>（比较运算）    Comparators<span class="token operator">:</span> <span class="token operator">></span> <span class="token punctuation">,</span> <span class="token operator">&lt;</span> <span class="token punctuation">,</span> <span class="token operator">>=</span> <span class="token punctuation">,</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span> gt <span class="token punctuation">,</span> lt <span class="token punctuation">,</span> ge <span class="token punctuation">,</span> le <span class="token punctuation">)</span>    Equality operators<span class="token operator">:</span> <span class="token operator">==</span> <span class="token punctuation">,</span> <span class="token operator">!=</span> <span class="token punctuation">(</span> eq <span class="token punctuation">,</span> ne <span class="token punctuation">)</span>    Conditional operators<span class="token operator">:</span>条件运算（三元运算符）    If<span class="token operator">-</span>then<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>then<span class="token punctuation">)</span>    If<span class="token operator">-</span>then<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>then<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">else</span><span class="token punctuation">)</span>    Default<span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>defaultvalue<span class="token punctuation">)</span>    Special tokens<span class="token operator">:</span>    No<span class="token operator">-</span>Operation<span class="token operator">:</span> _</code></pre><h4 id="11-6、练习测试"><a href="#11-6、练习测试" class="headerlink" title="11.6、练习测试"></a>11.6、练习测试</h4><p>1、编写一个Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存入数据</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"&lt;h1>Hello&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"qinjiang"</span><span class="token punctuation">,</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//classpath:/templates/test.html</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、测试页面，取出数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span> xmlns<span class="token punctuation">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>狂神说<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>测试页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>div th<span class="token punctuation">:</span>text<span class="token operator">=</span><span class="token string">"${msg}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不转义<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div th<span class="token punctuation">:</span>utext<span class="token operator">=</span><span class="token string">"${msg}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>遍历数据<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>th<span class="token punctuation">:</span>each每次遍历都会生成当前这个标签<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h4 th<span class="token punctuation">:</span>each<span class="token operator">=</span><span class="token string">"user :${users}"</span> th<span class="token punctuation">:</span>text<span class="token operator">=</span><span class="token string">"${user}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span>h4<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>行内写法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span th<span class="token punctuation">:</span>each<span class="token operator">=</span><span class="token string">"user:${users}"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="12、SpringBoot-MVC自动配置原理"><a href="#12、SpringBoot-MVC自动配置原理" class="headerlink" title="12、SpringBoot:MVC自动配置原理"></a>12、SpringBoot:MVC自动配置原理</h3><pre><code>- 官方文档：https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</code></pre><pre class=" language-java"><code class="language-java">Spring MVC Auto<span class="token operator">-</span>configuration<span class="token comment" spellcheck="true">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span>Spring Boot provides auto<span class="token operator">-</span>configuration <span class="token keyword">for</span> Spring MVC that works well with most applications<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 自动配置在Spring默认设置的基础上添加了以下功能：</span>The auto<span class="token operator">-</span>configuration adds the following features on top of Spring’s defaults<span class="token operator">:</span><span class="token comment" spellcheck="true">// 包含视图解析器</span>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 支持静态资源文件夹的路径，以及webjars</span>Support <span class="token keyword">for</span> serving <span class="token keyword">static</span> resources<span class="token punctuation">,</span> including support <span class="token keyword">for</span> WebJars <span class="token comment" spellcheck="true">// 自动注册了Converter：</span><span class="token comment" spellcheck="true">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把"1"字符串自动转换为int类型</span><span class="token comment" spellcheck="true">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span>Automatic registration of Converter<span class="token punctuation">,</span> GenericConverter<span class="token punctuation">,</span> and Formatter beans<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// HttpMessageConverters</span><span class="token comment" spellcheck="true">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span>Support <span class="token keyword">for</span> <span class="token function">HttpMessageConverters</span> <span class="token punctuation">(</span>covered later in <span class="token keyword">this</span> document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 定义错误代码生成规则的</span>Automatic registration of <span class="token function">MessageCodesResolver</span> <span class="token punctuation">(</span>covered later in <span class="token keyword">this</span> document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 首页定制</span>Static index<span class="token punctuation">.</span>html support<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 图标定制</span>Custom Favicon <span class="token function">support</span> <span class="token punctuation">(</span>covered later in <span class="token keyword">this</span> document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span>Automatic use of a ConfigurableWebBindingInitializer <span class="token function">bean</span> <span class="token punctuation">(</span>covered later in <span class="token keyword">this</span> document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/*如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。*/</span>If you want to keep Spring Boot MVC features and you want to add additional MVC <span class="token function">configuration</span> <span class="token punctuation">(</span>interceptors<span class="token punctuation">,</span> formatters<span class="token punctuation">,</span> view controllers<span class="token punctuation">,</span> and other features<span class="token punctuation">)</span><span class="token punctuation">,</span> you can add your own <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">class</span> <span class="token class-name">of</span> type WebMvcConfigurer but without <span class="token annotation punctuation">@EnableWebMvc</span><span class="token punctuation">.</span> If you wish to provide custom instances of RequestMappingHandlerMapping<span class="token punctuation">,</span> RequestMappingHandlerAdapter<span class="token punctuation">,</span> or ExceptionHandlerExceptionResolver<span class="token punctuation">,</span> you can declare a WebMvcRegistrationsAdapter instance to provide such components<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span>If you want to take complete control of Spring MVC<span class="token punctuation">,</span> you can add your own <span class="token annotation punctuation">@Configuration</span> annotated with <span class="token annotation punctuation">@EnableWebMvc</span><span class="token punctuation">.</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot1 成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2016/05/21/ajax/"/>
      <url>/2016/05/21/ajax/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringMVC-Ajax技术"><a href="#SpringMVC-Ajax技术" class="headerlink" title="SpringMVC:Ajax技术"></a>SpringMVC:Ajax技术</h3><span id="more"></span><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><pre><code>Ajax=Asynchronous JavaScript and XML (异步的JavaScript和XML)。Ajax是一种在无需加载整个网页的情况下，能够更新部分网页的技术。Ajax不是一种新的编程语言，而是用于创建一种更好更快以及交互性更强的web应用程序的技术。当在搜索框输入关键字时，javaScript会将这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。使用Ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。使用Ajax，用户可以创建接近本地桌面应用的直接，高可用、更丰富、更动态的web用户界面。</code></pre><h3 id="2、伪造Ajax"><a href="#2、伪造Ajax" class="headerlink" title="2、伪造Ajax"></a>2、伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签<br>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！<br>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>title<span class="token operator">></span>kuangshen<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>   window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentTime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> targetUrl <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframePosition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>p<span class="token operator">></span>请输入要加载的地址：<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"currentTime"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>   <span class="token operator">&lt;</span>p<span class="token operator">></span>       <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"url"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"https://www.baidu.com/"</span><span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> onclick<span class="token operator">=</span><span class="token string">"LoadPage()"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>h3<span class="token operator">></span>加载页面位置：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>   <span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframePosition"</span> style<span class="token operator">=</span><span class="token string">"width: 100%;height: 500px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>3、使用IDEA开浏览器测试一下！<br>    利用AJAX可以做：<br>    -注册时，输入用户名自动检测用户是否已经存在。<br>    -登陆时，提示用户名密码错误<br>    -删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。<br>    -….等等</p><h3 id="3、jQuery-ajax"><a href="#3、jQuery-ajax" class="headerlink" title="3、jQuery.ajax"></a>3、jQuery.ajax</h3><pre><code>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。jQuery 提供多个与 AJAX 有关的方法。通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。jQuery 不是生产者，而是大自然搬运工。jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</code></pre><pre class=" language-java"><code class="language-java">jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      部分参数：            url：请求地址            type：请求方式，GET、POST（<span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">0</span>之后用method）        headers：请求头            data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型<span class="token punctuation">(</span>默认<span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded; charset=UTF-8"</span><span class="token punctuation">)</span>          async：是否异步        timeout：设置请求超时时间（毫秒）      beforeSend：发送请求前执行的函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>        complete：完成之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>        success：成功之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>          error：失败之后执行的回调函数<span class="token punctuation">(</span>全局<span class="token punctuation">)</span>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型        dataType：将服务器端返回的数据转换成指定类型          <span class="token string">"xml"</span><span class="token operator">:</span> 将服务器端返回的内容转换成xml格式          <span class="token string">"text"</span><span class="token operator">:</span> 将服务器端返回的内容转换成普通文本格式          <span class="token string">"html"</span><span class="token operator">:</span> 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。        <span class="token string">"script"</span><span class="token operator">:</span> 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式          <span class="token string">"json"</span><span class="token operator">:</span> 将服务器端返回的内容转换成相应的JavaScript对象        <span class="token string">"jsonp"</span><span class="token operator">:</span> JSONP 格式使用 JSONP 形式调用函数时，如 <span class="token string">"myurl?callback=?"</span> jQuery 将自动替换 <span class="token operator">?</span> 为正确的函数名，以执行回调函数</code></pre><h3 id="4、使用最原始的HttpServletResponse处理-最简单-最通用。"><a href="#4、使用最原始的HttpServletResponse处理-最简单-最通用。" class="headerlink" title="4、使用最原始的HttpServletResponse处理 , .最简单 , 最通用。"></a>4、使用最原始的HttpServletResponse处理 , .最简单 , 最通用。</h3><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>      xmlns<span class="token punctuation">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>      xmlns<span class="token punctuation">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>      xmlns<span class="token punctuation">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>      xsi<span class="token punctuation">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd       http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context       https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd       http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc       https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xsd"<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 自动扫描指定的包，下面所有注解类交给IOC容器管理 <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>context<span class="token punctuation">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.kuang.controller"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>mvc<span class="token punctuation">:</span><span class="token keyword">default</span><span class="token operator">-</span>servlet<span class="token operator">-</span>handler <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>mvc<span class="token punctuation">:</span>annotation<span class="token operator">-</span>driven <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 视图解析器 <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>         id<span class="token operator">=</span><span class="token string">"internalResourceViewResolver"</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 前缀 <span class="token operator">--</span><span class="token operator">></span>       <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/jsp/"</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 后缀 <span class="token operator">--</span><span class="token operator">></span>       <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p>2、编写一个AjaxController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a1"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ajax1</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script</code></pre><p>4、编写index.jsp测试</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span>   <span class="token operator">&lt;</span>title<span class="token operator">></span>$Title$<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>   <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a1"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txtName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>onblur：失去焦点触发事件<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>用户名<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"txtName"</span> onblur<span class="token operator">=</span><span class="token string">"a1()"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><h3 id="5、Springmvc实现"><a href="#5、Springmvc实现" class="headerlink" title="5、Springmvc实现"></a>5、Springmvc实现</h3><p>1、实体类user</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、我们来获取一个集合对象，展示到前端页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆1号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆2号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆3号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于@RestController注解，将list转成json格式返回</span><span class="token punctuation">}</span></code></pre><p>3、前端页面</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>   <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"btn"</span> value<span class="token operator">=</span><span class="token string">"获取数据"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>table width<span class="token operator">=</span><span class="token string">"80%"</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>tr<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>   <span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"${pageContext.request.contextPath}/a2"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>               <span class="token keyword">var</span> html<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   html<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;tr>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;/tr>"</span>              <span class="token punctuation">}</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>4、成功实现了数据回显！可以体会一下Ajax的好处！</p><h3 id="6、注册提示效果"><a href="#6、注册提示效果" class="headerlink" title="6、注册提示效果"></a>6、注册提示效果</h3><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化<br>1、我们写一个Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ajax3</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>   String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//模拟数据库中存在数据</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"用户名输入错误"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"密码输入有误"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> msg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于@RestController注解，将msg转成json格式返回</span><span class="token punctuation">}</span></code></pre><p>2、前端页面 login.jsp</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>   <span class="token operator">&lt;</span>title<span class="token operator">></span>ajax<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>   <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>  用户名<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"name"</span> onblur<span class="token operator">=</span><span class="token string">"a1()"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"userInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>  密码<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"pwd"</span> onblur<span class="token operator">=</span><span class="token string">"a2()"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"pwdInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>3、【记得处理json乱码问题】<br>4、测试一下效果，动态请求响应，局部刷新，就是如此！</p><h3 id="7、获取baidu接口Demo"><a href="#7、获取baidu接口Demo" class="headerlink" title="7、获取baidu接口Demo"></a>7、获取baidu接口Demo</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>   <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>title<span class="token operator">></span>JSONP百度搜索<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>   <span class="token operator">&lt;</span>style<span class="token operator">></span>       #q<span class="token punctuation">{</span>           width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>           height<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           border<span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span>           line<span class="token operator">-</span>height<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           display<span class="token punctuation">:</span> block<span class="token punctuation">;</span>           margin<span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           padding<span class="token punctuation">:</span> <span class="token number">0</span> 10px<span class="token punctuation">;</span>           font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       #ul<span class="token punctuation">{</span>           width<span class="token punctuation">:</span> 520px<span class="token punctuation">;</span>           list<span class="token operator">-</span>style<span class="token punctuation">:</span> none<span class="token punctuation">;</span>           margin<span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           padding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           border<span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span>           margin<span class="token operator">-</span>top<span class="token punctuation">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>           display<span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       #ul li<span class="token punctuation">{</span>           line<span class="token operator">-</span>height<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           padding<span class="token punctuation">:</span> <span class="token number">0</span> 10px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       #ul li<span class="token punctuation">:</span>hover<span class="token punctuation">{</span>           background<span class="token operator">-</span>color<span class="token punctuation">:</span> #f60<span class="token punctuation">;</span>           color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 2.步骤二</span>       <span class="token comment" spellcheck="true">// 定义demo函数 (分析接口、数据)</span>       <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 如果搜索数据存在 把内容添加进去</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 隐藏掉的ul显示出来</span>               Ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 搜索到的数据循环追加到li里</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 循环的li写入ul</span>               Ul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 1.步骤一</span>       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 获取输入框和ul</span>           <span class="token keyword">var</span> Q <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 事件鼠标抬起时候</span>           Q<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 如果输入框不等于空</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span>                   <span class="token comment" spellcheck="true">// 创建标签</span>                   <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//给定要跨域的地址 赋值给src</span>                   <span class="token comment" spellcheck="true">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span>                   script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'&amp;cb=demo'</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 将组合好的带src的script标签追加到body里</span>                   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"q"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"ul"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax 成 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
